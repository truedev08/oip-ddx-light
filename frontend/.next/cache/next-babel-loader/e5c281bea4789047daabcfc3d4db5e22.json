{"ast":null,"code":"import { Networks, OIP } from 'js-oip';\nimport { ECPair, payments } from 'bitcoinjs-lib';\nimport config from '../../../config.js';\nimport { setFloBalance, setFloExchangeRate, txError, txPending, txSuccess, purchase_record } from './creators';\nimport axios from 'axios';\nimport { updatePurchasedTxid } from '../Autopay/creators';\nconst {\n  floMainnet,\n  floTestnet\n} = Networks;\nconst network = {\n  flo_mainnet: floMainnet.network,\n  flo_testnet: floTestnet.network\n};\n\nfunction getPubAddress(wif, useNetwork = 'mainnet') {\n  let floNetwork = useNetwork === 'mainnet' ? network.flo_mainnet : network.floTestnet;\n  const EC = ECPair.fromWIF(wif, floNetwork);\n  return payments.p2pkh({\n    pubkey: EC.publicKey,\n    network: floNetwork\n  }).address;\n} //! ****************************************************TIP Function **************************************************/\n\n\nexport const tip = ({\n  paymentAddr,\n  paymentTemplate,\n  tipAmountSat,\n  tV\n}) => async (dispatch, getState) => {\n  const {\n    Platform,\n    Wallet\n  } = getState();\n  const wallet = Wallet.xWallet;\n\n  if (!wallet) {\n    console.error(`Failed to send tip. private key is probably not set. Wallet undefined`);\n    return;\n  } // paymentTemplate holds the sugTip array\n  // tV value is passed up from child PaymentRow depending on which button is clicked\n  // If template doesnt have sugTip, it will default to .2 cents in PaymentRow\n\n\n  const TIP_FIAT = tV;\n  console.log(`Tip amount: $${tV}`);\n  const TIP_FLO_SAT = TIP_FIAT * 1e8 / (Wallet.floExchangeRate * 1e8) * 1e8; //console.log(TIP_FLO_SAT, Wallet.floExchangeRate);\n\n  let platformAddr; //! *************** There is currently no platform, when not using a platform we need to change this to ignore the platform cut. It is currently taking a cut\n  // if (Platform.registered) {\n  //   // console.log(Platform.registered, Platform.platformData.floPaymentAddress)\n  //   platformAddr = Platform.platformData.floPaymentAddress;\n  // }\n\n  let amount = tipAmountSat || Math.floor(TIP_FLO_SAT); // console.log('amount', amount);\n\n  let pubCut;\n  let pubValue;\n  let platformValue;\n  let toPlatform;\n\n  if (paymentTemplate && paymentTemplate.platformCut) {\n    pubCut = (100 - paymentTemplate.platformCut) / 100;\n    pubValue = Math.floor(amount * pubCut);\n    platformValue = Math.floor(amount * (paymentTemplate.platformCut / 100));\n    toPlatform = {\n      address: platformAddr,\n      value: platformValue\n    };\n  } else pubValue = amount; // console.log(pubCut, pubValue, platformValue)\n\n\n  const toPublisher = {\n    address: paymentAddr,\n    value: pubValue\n  };\n  let outputs = [toPublisher, toPlatform]; // console.log(outputs);\n\n  let txid;\n\n  try {\n    txid = await dispatch(sendTx(outputs));\n  } catch (err) {\n    console.error(err);\n    return;\n  } // console.log('sent tip: ', txid)\n\n\n  setTimeout(() => {\n    dispatch(getBalance());\n  }, 5000);\n  return txid;\n}; //! ******************************************* END TIP Function ********************************/\n\nexport const sendTx = outputs => async (dispatch, getState) => {\n  const {\n    Wallet\n  } = getState();\n  const xWallet = Wallet.xWallet;\n\n  if (!xWallet) {\n    console.error(`Failed to send transaction. private key is probably not set. Wallet undefined`);\n    return;\n  }\n\n  dispatch(txPending());\n  let txid;\n\n  try {\n    txid = await xWallet.sendTx(outputs);\n  } catch (err) {\n    dispatch(txError(err));\n    throw Error(`Failed to sendTx: \\n ${err}`);\n  }\n\n  dispatch(txSuccess());\n  console.log(`tx sent: `, txid);\n  return txid;\n};\nexport const getBalance = addr => async (dispatch, getState) => {\n  const {\n    Wallet\n  } = getState();\n  const xWallet = Wallet.xWallet;\n\n  if (!xWallet) {\n    console.error(`Failed to get balance. private key is probably not set. Wallet undefined`);\n    return;\n  }\n\n  let address = addr || getPubAddress(config.privatekey);\n  let explorer = xWallet.explorer;\n  let res;\n\n  try {\n    res = await explorer.getAddress(address);\n  } catch (err) {\n    console.error(`failed to get address from explorer: \\n ${err}`);\n    return;\n  }\n\n  dispatch(setFloBalance(res.balanceSat));\n  return res.balanceSat;\n};\nexport const getExchangeRate = () => async (dispatch, getState) => {\n  const {\n    _exchange\n  } = getState().Wallet;\n  let xr;\n\n  try {\n    xr = await _exchange.getExchangeRate('flo', 'usd');\n  } catch (err) {\n    console.log(`Failed to get exchange rate: \\n ${err}`);\n    return;\n  }\n\n  dispatch(setFloExchangeRate(xr));\n  return xr;\n}; //! ****************************************************PurchaseRecord Function **************************************************/\n\nexport const purchaseRecord = ({\n  txid,\n  terms\n}) => async (dispatch, getState) => {\n  const {\n    Platform,\n    Wallet\n  } = getState();\n  const wallet = Wallet.xWallet;\n\n  if (!wallet) {\n    console.error(`Failed to send tip. private key is probably not set. Wallet undefined`);\n    return;\n  }\n\n  const response = await axios.get(`https://api.oip.io/oip/o5/location/request?id=${txid}&terms=${terms}`);\n  const {\n    valid_until,\n    pre_image\n  } = response.data;\n  const res = await axios.get(`https://api.oip.io/oip/o5/record/get/${txid}`);\n  const {\n    amount,\n    destination\n  } = res.data.results[0].record.details.tmpl_DE84D583;\n  const paymentAddr = destination;\n  console.log(\"PURCHASE REFCORD!\");\n  let payment_txid;\n\n  try {\n    let output = {\n      address: paymentAddr,\n      value: amount * 1e8 //satoshis\n\n    };\n    payment_txid = await dispatch(sendTx(output));\n\n    function sleep(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    await sleep(2000);\n  } catch (err) {\n    console.error(err);\n    return {\n      'error': err\n    };\n  }\n\n  return dispatch(updatePurchasedTxid({\n    txid,\n    payment_txid,\n    terms\n  })); // setTimeout(() => {\n  //   dispatch(getBalance());\n  // }, 5000);\n}; //todo: To grab previous purchases:  find amd search addresses from commerical content; in wallet's transactions if so, grab the txid. push that into...\n// the global state.autoPay.purchased. \n// UseEffect will call proofOfPurchase and take care of the rest.\n\nexport const proofOfPurchase = ({\n  payment_txid,\n  txid,\n  terms\n}) => async (dispatch, getState) => {\n  const {\n    Platform,\n    Wallet\n  } = getState();\n  const wallet = Wallet.xWallet;\n\n  if (!wallet) {\n    console.error(`Failed to send tip. private key is probably not set. Wallet undefined`);\n    return;\n  }\n\n  const response = await axios.get(`https://api.oip.io/oip/o5/location/request?id=${txid}&terms=${terms}`);\n  const {\n    valid_until,\n    pre_image\n  } = response.data;\n  let signature = wallet.signMessage(pre_image);\n  let publicAddress = getPubAddress(config.privatekey);\n  const body = {\n    valid_until,\n    id: txid,\n    term: terms,\n    pre_image,\n    signature,\n    payment_txid,\n    signing_address: publicAddress\n  };\n\n  try {\n    const res = await axios.post(`https://api.oip.io/oip/o5/location/proof?id=${txid}&terms=${terms}`, body);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n}; //! ****************************************************END PurchaseRecord Function **************************************************/","map":null,"metadata":{},"sourceType":"module"}