{"ast":null,"code":"import { Networks, OIP } from 'js-oip';\nimport { ECPair, payments } from 'bitcoinjs-lib';\nimport config from '../../../config.js';\nimport { setFloBalance, setFloExchangeRate, txError, txPending, txSuccess, purchase_record } from './creators';\nimport axios from 'axios';\nimport { updatePurchasedTxid } from '../Autopay/creators';\nconst {\n  floMainnet,\n  floTestnet\n} = Networks;\nconst network = {\n  flo_mainnet: floMainnet.network,\n  flo_testnet: floTestnet.network\n};\n\nfunction getPubAddress(wif, useNetwork = 'mainnet') {\n  let floNetwork = useNetwork === 'mainnet' ? network.flo_mainnet : network.floTestnet;\n  const EC = ECPair.fromWIF(wif, floNetwork);\n  return payments.p2pkh({\n    pubkey: EC.publicKey,\n    network: floNetwork\n  }).address;\n} //! ****************************************************TIP Function **************************************************/\n\n\nexport const tip = ({\n  paymentAddr,\n  paymentTemplate,\n  tipAmountSat,\n  tV\n}) => async (dispatch, getState) => {\n  const {\n    Platform,\n    Wallet\n  } = getState();\n  const wallet = Wallet.xWallet;\n\n  if (!wallet) {\n    console.error(`Failed to send tip. private key is probably not set. Wallet undefined`);\n    return;\n  } // paymentTemplate holds the sugTip array\n  // tV value is passed up from child PaymentRow depending on which button is clicked\n  // If template doesnt have sugTip, it will default to .2 cents in PaymentRow\n\n\n  const TIP_FIAT = tV;\n  console.log(`Tip amount: $${tV}`);\n  const TIP_FLO_SAT = TIP_FIAT * 1e8 / (Wallet.floExchangeRate * 1e8) * 1e8; //console.log(TIP_FLO_SAT, Wallet.floExchangeRate);\n\n  let platformAddr; //! *************** There is currently no platform, when not using a platform we need to change this to ignore the platform cut. It is currently taking a cut\n  // if (Platform.registered) {\n  //   // console.log(Platform.registered, Platform.platformData.floPaymentAddress)\n  //   platformAddr = Platform.platformData.floPaymentAddress;\n  // }\n\n  let amount = tipAmountSat || Math.floor(TIP_FLO_SAT); // console.log('amount', amount);\n\n  let pubCut;\n  let pubValue;\n  let platformValue;\n  let toPlatform;\n\n  if (paymentTemplate && paymentTemplate.platformCut) {\n    pubCut = (100 - paymentTemplate.platformCut) / 100;\n    pubValue = Math.floor(amount * pubCut);\n    platformValue = Math.floor(amount * (paymentTemplate.platformCut / 100));\n    toPlatform = {\n      address: platformAddr,\n      value: platformValue\n    };\n  } else pubValue = amount; // console.log(pubCut, pubValue, platformValue)\n\n\n  const toPublisher = {\n    address: paymentAddr,\n    value: pubValue\n  };\n  let outputs = [toPublisher, toPlatform]; // console.log(outputs);\n\n  let txid;\n\n  try {\n    txid = await dispatch(sendTx(outputs));\n  } catch (err) {\n    console.error(err);\n    return;\n  } // console.log('sent tip: ', txid)\n\n\n  setTimeout(() => {\n    dispatch(getBalance());\n  }, 5000);\n  return txid;\n}; //! ******************************************* END TIP Function ********************************/\n\nexport const sendTx = outputs => async (dispatch, getState) => {\n  const {\n    Wallet\n  } = getState();\n  const xWallet = Wallet.xWallet;\n\n  if (!xWallet) {\n    console.error(`Failed to send transaction. private key is probably not set. Wallet undefined`);\n    return;\n  }\n\n  dispatch(txPending());\n  let txid;\n\n  try {\n    txid = await xWallet.sendTx(outputs);\n  } catch (err) {\n    dispatch(txError(err));\n    throw Error(`Failed to sendTx: \\n ${err}`);\n  }\n\n  dispatch(txSuccess());\n  console.log(`tx sent: `, txid);\n  return txid;\n};\nexport const getBalance = addr => async (dispatch, getState) => {\n  const {\n    Wallet\n  } = getState();\n  const xWallet = Wallet.xWallet;\n\n  if (!xWallet) {\n    console.error(`Failed to get balance. private key is probably not set. Wallet undefined`);\n    return;\n  }\n\n  let address = addr || getPubAddress(config.privatekey);\n  let explorer = xWallet.explorer;\n  let res;\n\n  try {\n    res = await explorer.getAddress(address);\n  } catch (err) {\n    console.error(`failed to get address from explorer: \\n ${err}`);\n    return;\n  }\n\n  dispatch(setFloBalance(res.balanceSat));\n  return res.balanceSat;\n};\nexport const getExchangeRate = () => async (dispatch, getState) => {\n  const {\n    _exchange\n  } = getState().Wallet;\n  let xr;\n\n  try {\n    xr = await _exchange.getExchangeRate('flo', 'usd');\n  } catch (err) {\n    console.log(`Failed to get exchange rate: \\n ${err}`);\n    return;\n  }\n\n  dispatch(setFloExchangeRate(xr));\n  return xr;\n}; //! ****************************************************PurchaseRecord Function **************************************************/\n\nexport const purchaseRecord = ({\n  txid,\n  terms\n}) => async (dispatch, getState) => {\n  const {\n    Platform,\n    Wallet\n  } = getState();\n  const wallet = Wallet.xWallet;\n\n  if (!wallet) {\n    console.error(`Failed to send tip. private key is probably not set. Wallet undefined`);\n    return;\n  }\n\n  const response = await axios.get(`https://api.oip.io/oip/o5/location/request?id=${txid}&terms=${terms}`);\n  const {\n    valid_until,\n    pre_image\n  } = response.data;\n  const res = await axios.get(`https://api.oip.io/oip/o5/record/get/${txid}`);\n  const {\n    amount,\n    destination\n  } = res.data.results[0].record.details.tmpl_DE84D583;\n  const paymentAddr = destination;\n  console.log(\"PURCHASE REFCORD!\");\n  let payment_txid;\n\n  try {\n    let output = {\n      address: paymentAddr,\n      value: amount * 1e8 //satoshis\n\n    };\n    payment_txid = await dispatch(sendTx(output));\n\n    function sleep(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    await sleep(2000);\n  } catch (err) {\n    console.error(err);\n    return {\n      'error': err\n    };\n  }\n\n  return dispatch(updatePurchasedTxid({\n    txid,\n    payment_txid,\n    terms\n  })); // setTimeout(() => {\n  //   dispatch(getBalance());\n  // }, 5000);\n}; //todo: To grab previous purchases:  find amd search addresses from commerical content; in wallet's transactions if so, grab the txid. push that into...\n// the global state.autoPay.purchased. \n// UseEffect will call proofOfPurchase and take care of the rest.\n\nexport const proofOfPurchase = ({\n  payment_txid,\n  txid,\n  terms\n}) => async (dispatch, getState) => {\n  const {\n    Platform,\n    Wallet\n  } = getState();\n  const wallet = Wallet.xWallet;\n\n  if (!wallet) {\n    console.error(`Failed to send tip. private key is probably not set. Wallet undefined`);\n    return;\n  }\n\n  const response = await axios.get(`https://api.oip.io/oip/o5/location/request?id=${txid}&terms=${terms}`);\n  const {\n    valid_until,\n    pre_image\n  } = response.data;\n  let signature = wallet.signMessage(pre_image);\n  let publicAddress = getPubAddress(config.privatekey);\n  const body = {\n    valid_until,\n    id: txid,\n    term: terms,\n    pre_image,\n    signature,\n    payment_txid,\n    signing_address: publicAddress\n  };\n\n  try {\n    const res = await axios.post(`https://api.oip.io/oip/o5/location/proof?id=${txid}&terms=${terms}`, body);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n}; //! ****************************************************END PurchaseRecord Function **************************************************/","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/redux/actions/Wallet/thunks.js"],"names":["Networks","OIP","ECPair","payments","config","setFloBalance","setFloExchangeRate","txError","txPending","txSuccess","purchase_record","axios","updatePurchasedTxid","floMainnet","floTestnet","network","flo_mainnet","flo_testnet","getPubAddress","wif","useNetwork","floNetwork","EC","fromWIF","p2pkh","pubkey","publicKey","address","tip","paymentAddr","paymentTemplate","tipAmountSat","tV","dispatch","getState","Platform","Wallet","wallet","xWallet","console","error","TIP_FIAT","log","TIP_FLO_SAT","floExchangeRate","platformAddr","amount","Math","floor","pubCut","pubValue","platformValue","toPlatform","platformCut","value","toPublisher","outputs","txid","sendTx","err","setTimeout","getBalance","Error","addr","privatekey","explorer","res","getAddress","balanceSat","getExchangeRate","_exchange","xr","purchaseRecord","terms","response","get","valid_until","pre_image","data","destination","results","record","details","tmpl_DE84D583","payment_txid","output","sleep","ms","Promise","resolve","proofOfPurchase","signature","signMessage","publicAddress","body","id","term","signing_address","post"],"mappings":"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","sourcesContent":["import { Networks, OIP } from 'js-oip';\nimport { ECPair, payments } from 'bitcoinjs-lib';\nimport config from '../../../config.js';\nimport {\n  setFloBalance,\n  setFloExchangeRate,\n  txError,\n  txPending,\n  txSuccess,\n  purchase_record\n} from './creators';\nimport axios from 'axios'\nimport { updatePurchasedTxid } from '../Autopay/creators'\n\nconst { floMainnet, floTestnet } = Networks;\n\nconst network = {\n  flo_mainnet: floMainnet.network,\n  flo_testnet: floTestnet.network\n};\nfunction getPubAddress(wif, useNetwork = 'mainnet') {\n  let floNetwork =\n    useNetwork === 'mainnet' ? network.flo_mainnet : network.floTestnet;\n  const EC = ECPair.fromWIF(wif, floNetwork);\n  return payments.p2pkh({ pubkey: EC.publicKey, network: floNetwork }).address;\n}\n//! ****************************************************TIP Function **************************************************/\nexport const tip = ({\n  paymentAddr,\n  paymentTemplate,\n  tipAmountSat,\n  tV\n}) => async (dispatch, getState) => {\n  const { Platform, Wallet } = getState();\n  const wallet = Wallet.xWallet;\n  if (!wallet) {\n    console.error(\n      `Failed to send tip. private key is probably not set. Wallet undefined`\n    );\n    return;\n  }\n  // paymentTemplate holds the sugTip array\n  // tV value is passed up from child PaymentRow depending on which button is clicked\n  // If template doesnt have sugTip, it will default to .2 cents in PaymentRow\n\n  const TIP_FIAT = tV;\n  console.log(`Tip amount: $${tV}`);\n  const TIP_FLO_SAT = ((TIP_FIAT * 1e8) / (Wallet.floExchangeRate * 1e8)) * 1e8;\n  //console.log(TIP_FLO_SAT, Wallet.floExchangeRate);\n\n  let platformAddr;\n  //! *************** There is currently no platform, when not using a platform we need to change this to ignore the platform cut. It is currently taking a cut\n  // if (Platform.registered) {\n  //   // console.log(Platform.registered, Platform.platformData.floPaymentAddress)\n  //   platformAddr = Platform.platformData.floPaymentAddress;\n  // }\n\n  let amount = tipAmountSat || Math.floor(TIP_FLO_SAT);\n  // console.log('amount', amount);\n\n  let pubCut;\n  let pubValue;\n  let platformValue;\n  let toPlatform;\n\n  if (paymentTemplate && paymentTemplate.platformCut) {\n    pubCut = (100 - paymentTemplate.platformCut) / 100;\n    pubValue = Math.floor(amount * pubCut);\n    platformValue = Math.floor(amount * (paymentTemplate.platformCut / 100));\n    toPlatform = {\n      address: platformAddr,\n      value: platformValue\n    };\n  } else pubValue = amount;\n\n  // console.log(pubCut, pubValue, platformValue)\n\n  const toPublisher = {\n    address: paymentAddr,\n    value: pubValue\n  };\n\n  let outputs = [toPublisher, toPlatform];\n  // console.log(outputs);\n  let txid;\n  try {\n    txid = await dispatch(sendTx(outputs));\n  } catch (err) {\n    console.error(err);\n    return;\n  }\n\n  // console.log('sent tip: ', txid)\n  setTimeout(() => {\n    dispatch(getBalance());\n  }, 5000);\n  return txid;\n};\n//! ******************************************* END TIP Function ********************************/\n\nexport const sendTx = (outputs) => async (dispatch, getState) => {\n  const { Wallet } = getState();\n  const xWallet = Wallet.xWallet;\n  if (!xWallet) {\n    console.error(\n      `Failed to send transaction. private key is probably not set. Wallet undefined`\n    );\n    return;\n  }\n\n  dispatch(txPending());\n  let txid;\n  try {\n    txid = await xWallet.sendTx(outputs);\n  } catch (err) {\n    dispatch(txError(err));\n    throw Error(`Failed to sendTx: \\n ${err}`);\n  }\n  dispatch(txSuccess());\n  console.log(`tx sent: `, txid);\n  return txid;\n};\n\nexport const getBalance = (addr) => async (dispatch, getState) => {\n  const { Wallet } = getState();\n  const xWallet = Wallet.xWallet;\n  if (!xWallet) {\n    console.error(\n      `Failed to get balance. private key is probably not set. Wallet undefined`\n    );\n    return;\n  }\n  let address = addr || getPubAddress(config.privatekey);\n  let explorer = xWallet.explorer;\n  let res;\n  try {\n    res = await explorer.getAddress(address);\n  } catch (err) {\n    console.error(`failed to get address from explorer: \\n ${err}`);\n    return;\n  }\n  dispatch(setFloBalance(res.balanceSat));\n  return res.balanceSat;\n};\n\nexport const getExchangeRate = () => async (dispatch, getState) => {\n  const { _exchange } = getState().Wallet;\n  let xr;\n  try {\n    xr = await _exchange.getExchangeRate('flo', 'usd');\n  } catch (err) {\n    console.log(`Failed to get exchange rate: \\n ${err}`);\n    return;\n  }\n  dispatch(setFloExchangeRate(xr));\n  return xr;\n};\n//! ****************************************************PurchaseRecord Function **************************************************/\n\nexport const purchaseRecord = ({\n  txid,\n  terms,\n}) => async (dispatch, getState) => {\n  const { Platform, Wallet } = getState();\n  const wallet = Wallet.xWallet;\n  if (!wallet) {\n    console.error(\n      `Failed to send tip. private key is probably not set. Wallet undefined`\n    );\n    return;\n  }\n  \n  const response = await axios.get(`https://api.oip.io/oip/o5/location/request?id=${txid}&terms=${terms}`)\n\n  const { valid_until, pre_image, } = response.data\n\n  const res = await axios.get(`https://api.oip.io/oip/o5/record/get/${txid}`)\n\n  const { amount, destination } = res.data.results[0].record.details.tmpl_DE84D583\n\n  const paymentAddr = destination;\n\n  console.log(\"PURCHASE REFCORD!\")\n  let payment_txid;\n\n\n  try {\n\n    let output = {\n      address: paymentAddr,\n      value: (amount * 1e8) //satoshis\n  }\n\n  payment_txid = await dispatch(sendTx(output));\n\n    function sleep(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n    \n    \n    await sleep(2000)\n\n  } catch (err) {\n    console.error(err);\n    return {'error': err}\n  }\n\n\n  return dispatch(updatePurchasedTxid({txid, payment_txid, terms }))\n\n  // setTimeout(() => {\n  //   dispatch(getBalance());\n  // }, 5000);\n\n};\n\n\n\n//todo: To grab previous purchases:  find amd search addresses from commerical content; in wallet's transactions if so, grab the txid. push that into...\n// the global state.autoPay.purchased. \n// UseEffect will call proofOfPurchase and take care of the rest.\n\nexport const proofOfPurchase = ({\n  payment_txid,\n  txid,\n  terms\n}) => async (dispatch, getState) => {\n  const { Platform, Wallet } = getState();\n  const wallet = Wallet.xWallet;\n  if (!wallet) {\n    console.error(\n      `Failed to send tip. private key is probably not set. Wallet undefined`\n    );\n    return;\n  }\n\n  const response = await axios.get(`https://api.oip.io/oip/o5/location/request?id=${txid}&terms=${terms}`)\n\n  const { valid_until, pre_image, } = response.data\n\n  let signature = wallet.signMessage(pre_image)\n  let publicAddress = getPubAddress(config.privatekey)\n  \n  const body = { valid_until, id: txid, term: terms, pre_image, signature, payment_txid, signing_address: publicAddress }\n\n  try {\n    const res = await axios.post(`https://api.oip.io/oip/o5/location/proof?id=${txid}&terms=${terms}`, body)\n\n    return res.data\n  } catch(error) {\n    console.log(error)\n  }\n}\n//! ****************************************************END PurchaseRecord Function **************************************************/\n\n\n"]},"metadata":{},"sourceType":"module"}