{"ast":null,"code":"var _jsxFileName = \"/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/components/views/dumb/paymentRow/PaymentRow.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport withStyles from 'react-jss';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    flex: '0 0 50px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: [0, 30],\n    position: 'relative'\n  },\n  tipButton: {\n    position: 'relative',\n    display: 'flex',\n    justifyContent: 'center',\n    left: 30,\n    backgroundColor: 'transparent',\n    border: 'none',\n    outline: 'none',\n    '&:hover': {\n      cursor: 'pointer'\n    },\n    '& > img': {\n      height: 40,\n      '&:hover': {\n        height: 42\n      }\n    }\n  },\n  transactionContainer: {\n    marginLeft: '30px'\n  },\n  transactionLink: {\n    cursor: 'pointer',\n    borderBottom: 'none',\n    color: theme.palette.primary.main\n  }\n});\n\nconst PaymentRow = ({\n  classes,\n  paymentTemplate,\n  paymentAddress,\n  tip\n}) => {\n  const {\n    0: txid,\n    1: setTxid\n  } = useState(undefined);\n  const {\n    0: showTxid,\n    1: setShowTxid\n  } = useState(false);\n\n  async function sendTip(tV) {\n    let tx = await tip({\n      paymentAddr: paymentAddress,\n      paymentTemplate,\n      tV\n    });\n    console.log('tip txid: ', tx);\n\n    if (tx) {\n      setTxid(tx);\n      setShowTxid(true);\n    }\n\n    setTimeout(() => {\n      setShowTxid(false);\n    }, 20000);\n  }\n  /**Storing sugTip amounts in suggestedTips */\n\n\n  let suggestedTips = paymentTemplate.sugTip; // console.log(suggestedTips);\n\n  /**Mapping over suggestedTips and returning a button for each with the suggested tip, if no suggestedTip return default button */\n\n  if (suggestedTips) {\n    return __jsx(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, suggestedTips.map(tipValue => {\n      return __jsx(\"button\", {\n        //! sendTip takes the tipvalue and passes it back to the thunk. That vaule is used to calculate tip based on what is clicked\n        onClick: () => sendTip(tipValue),\n        className: classes.tipButton,\n        key: tipValue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }\n      }, __jsx(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }\n      }, \"$\", tipValue), __jsx(\"img\", {\n        src: '/static/assets/icons/tip.png',\n        alt: 'tip',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }\n      }));\n    }), __jsx(\"div\", {\n      className: classes.transactionContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, showTxid && __jsx(\"a\", {\n      target: \"_blank\",\n      href: `https://livenet.flocha.in/tx/${txid}`,\n      className: classes.transactionLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, \"See payment here\")));\n  } else {\n    return __jsx(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, __jsx(\"button\", {\n      onClick: () => sendTip(0.2),\n      className: classes.tipButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, __jsx(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, \".20\\uD834\\uDDCD\"), __jsx(\"img\", {\n      src: '/static/assets/icons/tip.png',\n      alt: 'tip',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    })), __jsx(\"div\", {\n      className: classes.transactionContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, showTxid && __jsx(\"a\", {\n      target: \"_blank\",\n      href: `https://livenet.flocha.in/tx/${txid}`,\n      className: classes.transactionLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, \"See payment here\")));\n  }\n};\n\nPaymentRow.propTypes = {\n  classes: PropTypes.object.isRequired,\n  paymentTemplate: PropTypes.object.isRequired,\n  paymentAddress: PropTypes.string.isRequired,\n  tip: PropTypes.func.isRequired\n};\nexport default withStyles(styles)(PaymentRow);","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/components/views/dumb/paymentRow/PaymentRow.js"],"names":["React","useState","withStyles","PropTypes","styles","theme","root","display","flexDirection","flex","alignItems","justifyContent","padding","position","tipButton","left","backgroundColor","border","outline","cursor","height","transactionContainer","marginLeft","transactionLink","borderBottom","color","palette","primary","main","PaymentRow","classes","paymentTemplate","paymentAddress","tip","txid","setTxid","undefined","showTxid","setShowTxid","sendTip","tV","tx","paymentAddr","console","log","setTimeout","suggestedTips","sugTip","map","tipValue","propTypes","object","isRequired","string","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport withStyles from 'react-jss';\nimport PropTypes from 'prop-types';\n\nconst styles = (theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    flex: '0 0 50px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: [0, 30],\n    position: 'relative'\n  },\n  tipButton: {\n    position: 'relative',\n    display: 'flex',\n    justifyContent: 'center',\n    left: 30,\n    backgroundColor: 'transparent',\n    border: 'none',\n    outline: 'none',\n    '&:hover': {\n      cursor: 'pointer'\n    },\n    '& > img': {\n      height: 40,\n      '&:hover': {\n        height: 42\n      }\n    }\n  },\n  transactionContainer: {\n    marginLeft: '30px'\n  },\n  transactionLink: {\n    cursor: 'pointer',\n    borderBottom: 'none',\n    color: theme.palette.primary.main\n  }\n});\n\nconst PaymentRow = ({ classes, paymentTemplate, paymentAddress, tip }) => {\n  const [txid, setTxid] = useState(undefined);\n  const [showTxid, setShowTxid] = useState(false);\n  async function sendTip(tV) {\n    let tx = await tip({\n      paymentAddr: paymentAddress,\n      paymentTemplate,\n      tV\n    });\n    console.log('tip txid: ', tx);\n    if (tx) {\n      setTxid(tx);\n      setShowTxid(true);\n    }\n    setTimeout(() => {\n      setShowTxid(false);\n    }, 20000);\n  }\n\n  /**Storing sugTip amounts in suggestedTips */\n  let suggestedTips = paymentTemplate.sugTip;\n  // console.log(suggestedTips);\n\n  /**Mapping over suggestedTips and returning a button for each with the suggested tip, if no suggestedTip return default button */\n  if (suggestedTips) {\n    return (\n      <div className={classes.root}>\n        {suggestedTips.map((tipValue) => {\n          return (\n            <button\n              //! sendTip takes the tipvalue and passes it back to the thunk. That vaule is used to calculate tip based on what is clicked\n              onClick={() => sendTip(tipValue)}\n              className={classes.tipButton}\n              key={tipValue}\n            >\n              <h4>${tipValue}</h4>\n              <img src={'/static/assets/icons/tip.png'} alt={'tip'} />\n            </button>\n          );\n        })}\n        <div className={classes.transactionContainer}>\n          {showTxid && (\n            <a\n              target='_blank'\n              href={`https://livenet.flocha.in/tx/${txid}`}\n              className={classes.transactionLink}\n            >\n              See payment here\n            </a>\n          )}\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.root}>\n        <button onClick={() => sendTip(0.2)} className={classes.tipButton}>\n          <h4>.20𝇍</h4>\n          <img src={'/static/assets/icons/tip.png'} alt={'tip'} />\n        </button>\n        <div className={classes.transactionContainer}>\n          {showTxid && (\n            <a\n              target='_blank'\n              href={`https://livenet.flocha.in/tx/${txid}`}\n              className={classes.transactionLink}\n            >\n              See payment here\n            </a>\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nPaymentRow.propTypes = {\n  classes: PropTypes.object.isRequired,\n  paymentTemplate: PropTypes.object.isRequired,\n  paymentAddress: PropTypes.string.isRequired,\n  tip: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(PaymentRow);\n"]},"metadata":{},"sourceType":"module"}