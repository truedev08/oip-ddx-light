{"ast":null,"code":"import { DaemonApi } from 'js-oip';\nimport { setDaemonApi, fetchingRecords, fetchingRecordsSuccess, fetchingRecordsError, setDefaultRecords, fetchingTemplates, fetchingTemplatesSuccess, setDefaultTemplates, fetchingTemplatesError, setSearchedRecords, setSearchedTemplates } from './creators'; // _exists_:record.details.tmpl_000000000000F113\n\nconst EXISTS = '_exists_';\nconst limit = 100;\nconst sort = `meta.time:d`;\nexport const applyTemplateFilter = query => (_, getState) => {\n  const {\n    templateFilter,\n    templateOperand\n  } = getState().Explorer;\n\n  if (templateFilter.length === 0) {\n    return query;\n  }\n\n  let queryArray = [];\n\n  for (let template of templateFilter) {\n    let tmpFilter = `${EXISTS}:record.details.${template}`;\n    queryArray.push(tmpFilter);\n  }\n\n  let queryString = queryArray.join(` ${templateOperand} `);\n\n  if (query) {\n    queryString = `(${queryString}) AND ${query}`;\n  }\n\n  return queryString;\n};\nexport const getDefaultRecords = query => async dispatch => {\n  dispatch(fetchingRecords());\n  let response;\n\n  try {\n    response = await dispatch(getOip5Records(query));\n  } catch (err) {\n    dispatch(fetchingRecordsError(err.message));\n    return {\n      success: false,\n      error: err.message,\n      results: []\n    };\n  }\n\n  const {\n    success,\n    error,\n    payload\n  } = response;\n\n  if (success) {\n    dispatch(fetchingRecordsSuccess());\n    dispatch(setDefaultRecords(payload));\n  } else {\n    dispatch(fetchingRecordsError(error));\n  }\n\n  return payload;\n};\nexport const searchRecords = query => async dispatch => {\n  dispatch(fetchingRecords());\n  let response;\n\n  try {\n    response = await dispatch(getOip5Records(query));\n  } catch (err) {\n    dispatch(fetchingRecordsError(err.message));\n    return {\n      success: false,\n      error: err.message,\n      results: []\n    };\n  }\n\n  const {\n    success,\n    error,\n    payload\n  } = response;\n\n  if (success) {\n    dispatch(fetchingRecordsSuccess());\n    dispatch(setSearchedRecords(payload));\n  } else {\n    dispatch(fetchingRecordsError(error));\n  }\n\n  return payload;\n};\nexport const getOip5Records = query => async (dispatch, getState) => {\n  const {\n    templateFilter,\n    daemonApi\n  } = getState().Explorer; // if query or filter, search artifacts\n\n  if (query || templateFilter.length > 0) {\n    let q = dispatch(applyTemplateFilter(query));\n\n    try {\n      return daemonApi.searchOip5Records({\n        q,\n        limit,\n        sort\n      });\n    } catch (err) {\n      throw Error(err);\n    } // else if filter get filtered records\n\n  } else {\n    try {\n      return daemonApi.getLatestOip5Records({\n        limit,\n        sort\n      });\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n};\nexport const searchTemplates = query => async dispatch => {\n  dispatch(fetchingTemplates());\n  let response;\n\n  try {\n    response = await dispatch(getOip5Templates(query));\n  } catch (err) {\n    dispatch(fetchingTemplatesError(err.message));\n    return {\n      success: false,\n      error: err.message,\n      results: []\n    };\n  }\n\n  const {\n    success,\n    error,\n    payload\n  } = response;\n\n  if (success) {\n    dispatch(fetchingTemplatesSuccess());\n    dispatch(setSearchedTemplates(payload));\n  } else {\n    dispatch(fetchingTemplatesError(error));\n  }\n\n  return payload;\n};\nexport const getDefaultTemplates = query => async dispatch => {\n  dispatch(fetchingTemplates());\n  let response;\n\n  try {\n    response = await dispatch(getOip5Templates(query));\n  } catch (err) {\n    dispatch(fetchingTemplatesError(err.message));\n    return {\n      success: false,\n      error: err.message,\n      results: []\n    };\n  }\n\n  const {\n    success,\n    error,\n    payload\n  } = response;\n\n  if (success) {\n    dispatch(fetchingTemplatesSuccess());\n    dispatch(setDefaultTemplates(payload));\n  } else {\n    dispatch(fetchingTemplatesError(error));\n  }\n\n  return payload;\n};\nexport const getOip5Templates = query => async (dispatch, getState) => {\n  const {\n    daemonApi\n  } = getState().Explorer; // if query or filter, search artifacts\n\n  if (query) {\n    try {\n      return daemonApi.searchOip5Templates({\n        q: query,\n        limit,\n        sort\n      });\n    } catch (err) {\n      throw Error(err);\n    } // else if filter get filtered records\n\n  } else {\n    try {\n      return daemonApi.getLatestOip5Templates({\n        limit,\n        sort\n      });\n    } catch (err) {\n      throw Error(err);\n    }\n  }\n};\nexport const createDaemonApi = url => dispatch => {\n  const daemon = new DaemonApi(url);\n  dispatch(setDaemonApi(daemon));\n};","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/redux/actions/Explorer/thunks.js"],"names":["DaemonApi","setDaemonApi","fetchingRecords","fetchingRecordsSuccess","fetchingRecordsError","setDefaultRecords","fetchingTemplates","fetchingTemplatesSuccess","setDefaultTemplates","fetchingTemplatesError","setSearchedRecords","setSearchedTemplates","EXISTS","limit","sort","applyTemplateFilter","query","_","getState","templateFilter","templateOperand","Explorer","length","queryArray","template","tmpFilter","push","queryString","join","getDefaultRecords","dispatch","response","getOip5Records","err","message","success","error","results","payload","searchRecords","daemonApi","q","searchOip5Records","Error","getLatestOip5Records","searchTemplates","getOip5Templates","getDefaultTemplates","searchOip5Templates","getLatestOip5Templates","createDaemonApi","url","daemon"],"mappings":"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","sourcesContent":["import { DaemonApi } from 'js-oip'\nimport {\n  setDaemonApi,\n  fetchingRecords,\n  fetchingRecordsSuccess,\n  fetchingRecordsError,\n  setDefaultRecords,\n  fetchingTemplates,\n  fetchingTemplatesSuccess,\n  setDefaultTemplates,\n  fetchingTemplatesError, setSearchedRecords, setSearchedTemplates\n} from './creators'\n\n// _exists_:record.details.tmpl_000000000000F113\n\nconst EXISTS = '_exists_'\nconst limit = 100\nconst sort = `meta.time:d`\n\nexport const applyTemplateFilter = query => (_, getState) => {\n  const { templateFilter, templateOperand } = getState().Explorer\n\n  if (templateFilter.length === 0) {\n    return query\n  }\n  let queryArray = []\n  for (let template of templateFilter) {\n    let tmpFilter = `${EXISTS}:record.details.${template}`\n    queryArray.push(tmpFilter)\n  }\n  let queryString = queryArray.join(` ${templateOperand} `)\n  if (query) {\n    queryString = `(${queryString}) AND ${query}`\n  }\n  return queryString\n}\n\nexport const getDefaultRecords = query => async dispatch => {\n  dispatch(fetchingRecords())\n  let response\n  try {\n    response = await dispatch(getOip5Records(query))\n  } catch (err) {\n    dispatch(fetchingRecordsError(err.message))\n    return { success: false, error: err.message, results: [] }\n  }\n  const { success, error, payload } = response\n  if (success) {\n    dispatch(fetchingRecordsSuccess())\n    dispatch(setDefaultRecords(payload))\n  } else {\n    dispatch(fetchingRecordsError(error))\n  }\n  return payload\n}\n\nexport const searchRecords = query => async dispatch => {\n  dispatch(fetchingRecords())\n  let response\n  try {\n    response = await dispatch(getOip5Records(query))\n  } catch (err) {\n    dispatch(fetchingRecordsError(err.message))\n    return { success: false, error: err.message, results: [] }\n  }\n  const { success, error, payload } = response\n  if (success) {\n    dispatch(fetchingRecordsSuccess())\n    dispatch(setSearchedRecords(payload))\n  } else {\n    dispatch(fetchingRecordsError(error))\n  }\n  return payload\n}\n\nexport const getOip5Records = query => async (dispatch, getState) => {\n  const { templateFilter, daemonApi } = getState().Explorer\n  // if query or filter, search artifacts\n  if (query || templateFilter.length > 0) {\n    let q = dispatch(applyTemplateFilter(query))\n    try {\n      return daemonApi.searchOip5Records({ q, limit, sort })\n    } catch (err) {\n      throw Error(err)\n    }\n    // else if filter get filtered records\n  } else {\n    try {\n      return daemonApi.getLatestOip5Records({ limit, sort })\n    } catch (err) {\n      throw new Error(err)\n    }\n  }\n}\n\nexport const searchTemplates = query => async dispatch => {\n  dispatch(fetchingTemplates())\n  let response\n  try {\n    response = await dispatch(getOip5Templates(query))\n  } catch (err) {\n    dispatch(fetchingTemplatesError(err.message))\n    return { success: false, error: err.message, results: [] }\n  }\n  const { success, error, payload } = response\n  if (success) {\n    dispatch(fetchingTemplatesSuccess())\n    dispatch(setSearchedTemplates(payload))\n  } else {\n    dispatch(fetchingTemplatesError(error))\n  }\n  return payload\n}\n\nexport const getDefaultTemplates = query => async dispatch => {\n  dispatch(fetchingTemplates())\n  let response\n  try {\n    response = await dispatch(getOip5Templates(query))\n  } catch (err) {\n    dispatch(fetchingTemplatesError(err.message))\n    return { success: false, error: err.message, results: [] }\n  }\n  const { success, error, payload } = response\n  if (success) {\n    dispatch(fetchingTemplatesSuccess())\n    dispatch(setDefaultTemplates(payload))\n  } else {\n    dispatch(fetchingTemplatesError(error))\n  }\n  return payload\n}\n\nexport const getOip5Templates = query => async (dispatch, getState) => {\n  const { daemonApi } = getState().Explorer\n\n  // if query or filter, search artifacts\n  if (query) {\n    try {\n      return daemonApi.searchOip5Templates({ q: query, limit, sort })\n    } catch (err) {\n      throw Error(err)\n    }\n    // else if filter get filtered records\n  } else {\n    try {\n      return daemonApi.getLatestOip5Templates({ limit, sort })\n    } catch (err) {\n      throw Error(err)\n    }\n  }\n}\n\nexport const createDaemonApi = (url) => dispatch => {\n  const daemon = new DaemonApi(url)\n  dispatch(setDaemonApi(daemon))\n}\n"]},"metadata":{},"sourceType":"module"}