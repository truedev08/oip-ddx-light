{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { OIP } from 'js-oip';\nimport Exchange from '@oipwg/exchange-rate';\nimport config from '../../config.js';\nimport * as actions from '../actions/Wallet/creators';\nlet explorerWallet;\n\nif (config.privatekey) {\n  explorerWallet = new OIP(config.privatekey, config.network, {\n    explorerUrl: config.explorerUrl\n  }).wallet;\n}\n\nconst initialState = {\n  xWallet: explorerWallet,\n  _exchange: new Exchange(),\n  txPending: false,\n  txSuccess: false,\n  txError: false,\n  txErrorMessage: undefined,\n  floBalanceSat: undefined,\n  floExchangeRate: undefined\n};\n\nconst Wallet = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.SET_X_WALLET:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          xWallet: action.xWallet\n        });\n      }\n\n    case actions.TX_PENDING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        txPending: true,\n        txSuccess: false,\n        txError: false,\n        txErrorMessage: null\n      });\n\n    case actions.TX_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        txPending: false,\n        txSuccess: true,\n        txError: false,\n        txErrorMessage: null\n      });\n\n    case actions.TX_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        txPending: false,\n        txSuccess: false,\n        txError: true,\n        txErrorMessage: action.errorMessage\n      });\n\n    case actions.CLEAR_TX_STATUS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        txPending: false,\n        txSuccess: false,\n        txError: null,\n        txErrorMessage: false\n      });\n\n    case actions.SET_FLO_BALANCE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        floBalanceSat: action.balance\n      });\n\n    case actions.SET_FLO_XR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        floExchangeRate: action.xr\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default Wallet;","map":null,"metadata":{},"sourceType":"module"}