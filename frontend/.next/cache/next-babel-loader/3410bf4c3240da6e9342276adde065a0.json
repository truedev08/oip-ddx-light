{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport getIpfsUrl from '../../../../helpers/getIpfsUrl';\nimport withStyles from 'react-jss';\nimport { Document, Page } from 'react-pdf';\n/*******************************************npm install react-pdf or yarn add react-pdf */\n\nconst styles = () => ({\n  pdfCont: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  pdfSelf: {\n    display: 'flex',\n    '& > canvas': {\n      height: [800, '!important'],\n      width: [700, '!important']\n    }\n  },\n  pdfNone: {\n    display: 'none',\n    '& > canvas': {\n      display: 'none',\n      height: [800, '!important'],\n      width: [700, '!important']\n    }\n  },\n  '@media (max-device-width: 1600px)': {\n    pdfSelf: {\n      display: 'flex',\n      '& > canvas': {\n        height: [600, '!important'],\n        width: [400, '!important']\n      }\n    }\n  }\n});\n/**********************recordPayload prop which holds template information, passed from switchViewer, classes is for the jss styles *********************/\n\n\nconst PdfViewer = ({\n  recordPayload,\n  classes\n}) => {\n  /**********************Set state with Hooks *********************/\n  const {\n    0: pageNum,\n    1: setPageNum\n  } = useState(1);\n  const {\n    0: numPages,\n    1: setNumPages\n  } = useState(1);\n  /**********************Get address and filename(if there is one) from props *********************/\n\n  const addressPull = recordPayload.record.details.tmpl_8EE48C00.addressDirectory;\n  const pdfFile = recordPayload.record.details.tmpl_8EE48C00.fileName;\n  /**********************Use getIfps to convert address and filename into accessable URL *********************/\n\n  const pdfSrc = getIpfsUrl({\n    dirName: addressPull,\n    pdfFile\n  });\n  /**********************Function to get the number of pages of the PDF*********************/\n\n  const onDocumentLoadSuccess = ({\n    numPages\n  }) => {\n    setNumPages(numPages);\n  };\n\n  const nextPage = () => {\n    if (pageNum === numPages || pageNum === numPages - 1) {\n      setPageNum(pageNum);\n    } else if (pageNum > 1) {\n      setPageNum(pageNum + 2);\n    } else {\n      setPageNum(pageNum + 1);\n    }\n  };\n\n  const backPage = () => {\n    if (pageNum === 2) {\n      setPageNum(pageNum - 1);\n    } else if (pageNum === 1) {\n      setPageNum(pageNum);\n    } else {\n      setPageNum(pageNum - 2);\n    }\n  };\n  /**Console logs to check if URL and numPages successfully updated*/\n\n\n  console.log(pdfSrc); // console.log(numPages);\n\n  console.log(pageNum);\n  return __jsx(\"div\", null, __jsx(Document, {\n    file: pdfSrc,\n    className: classes.pdfCont,\n    onLoadSuccess: onDocumentLoadSuccess\n  }, __jsx(\"button\", {\n    onClick: () => backPage()\n  }, \"Back\"), __jsx(Page, {\n    pageNumber: pageNum,\n    className: classes.pdfSelf\n  }), __jsx(Page, {\n    pageNumber: pageNum + 1 > numPages ? 1 : pageNum + 1,\n    className: pageNum > 1 ? classes.pdfSelf : classes.pdfNone\n  }), __jsx(\"button\", {\n    onClick: () => nextPage()\n  }, \"Next\")));\n};\n\nexport default withStyles(styles)(PdfViewer);","map":null,"metadata":{},"sourceType":"module"}