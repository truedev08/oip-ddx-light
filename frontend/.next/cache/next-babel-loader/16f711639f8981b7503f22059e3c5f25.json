{"ast":null,"code":"var _jsxFileName = \"/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/pages/record.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport withStyles from 'react-jss';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport SwitchViewer from '../components/views/dumb/SwitchViewer';\nimport RecordMap from '../components/views/dumb/recordMap/RecordMap';\nimport PaymentRow from '../components/views/dumb/paymentRow/PaymentRow';\nimport SideBar from '../components/views/dumb/SideBar';\nimport { getBalance, getExchangeRate, tip, purchaseRecord, proofOfPurchase } from '../redux/actions/Wallet/thunks';\nimport { setActivePage } from '../redux/actions/Interface/creators';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    height: '100%'\n  },\n  [`@media (max-width: ${theme.breakpoints['md']}px)`]: {\n    root: {\n      flexDirection: 'column'\n    }\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    overflowY: 'auto',\n    overflowX: 'hidden',\n    flex: 1\n  },\n  recordViewer: {\n    display: 'flex',\n    flex: '1 0 700px',\n    flexDirection: 'column',\n    maxHeight: 850 // height: 1000\n\n  },\n  recordsByPublisher: {\n    display: 'flex',\n    flex: 1,\n    minHeight: '50%',\n    flexDirection: 'column',\n    '& h3': {\n      paddingLeft: 30,\n      color: theme.palette.greyscale(0.8)\n    }\n  }\n});\n\nconst Record = ({\n  classes,\n  recordPayload,\n  daemonApi,\n  registered,\n  platformData,\n  tip,\n  showOnlyVerifiedPublishers,\n  setActivePage,\n  getExchangeRate,\n  getBalance,\n  autoPay,\n  purchaseRecord,\n  proofOfPurchase\n}) => {\n  useEffect(() => {\n    setActivePage(null);\n  }, []);\n  const {\n    0: purchasedData,\n    1: setPurchasedData\n  } = useState({\n    proofTxid: '',\n    data: '',\n    paid: false\n  });\n  useEffect(() => {\n    if (autoPay.purchased) {\n      let {\n        txid\n      } = recordPayload.meta;\n      let found = autoPay.purchased.find(purchase => {\n        return purchase.txid === txid;\n      });\n\n      if (found) {\n        let {\n          txid,\n          payment_txid,\n          terms\n        } = found;\n        proofOfPurchase({\n          txid,\n          payment_txid,\n          terms\n        }).then(data => {\n          setPurchasedData({\n            proofTxid: payment_txid,\n            data: data,\n            paid: true\n          });\n        }).catch(err => console.log(err));\n      }\n    }\n  }, []); // get records by the same publisher\n\n  const {\n    0: recordsByPublisher,\n    1: setRecordsByPublisher\n  } = useState([]);\n  useEffect(() => {\n    let current = true;\n\n    const getRecordsByPublisher = async () => {\n      const {\n        meta\n      } = recordPayload;\n      const q = `meta.signed_by:${meta.signed_by}`;\n      let res;\n\n      try {\n        res = await daemonApi.searchOip5Records({\n          q,\n          limit: 100\n        });\n      } catch (err) {\n        console.error(err);\n      }\n\n      if (!res) return;\n      const {\n        success,\n        payload,\n        error\n      } = res;\n\n      if (success) {\n        const {\n          results\n        } = payload;\n\n        if (results.length > 0) {\n          if (current) {\n            setRecordsByPublisher(results);\n          }\n        }\n      } else {\n        console.error(error);\n      }\n    };\n\n    if (recordPayload) {\n      try {\n        getRecordsByPublisher();\n      } catch (err) {\n        console.error(`Failed to get records by publisher: \\n ${err}`);\n      }\n    }\n\n    return () => {\n      current = false;\n    };\n  }, []); // get flo balance and exchange rate\n\n  useEffect(() => {\n    let current = true;\n\n    const getXrAndBalance = async () => {\n      if (current) {\n        await getExchangeRate();\n        await getBalance();\n      }\n    };\n\n    getXrAndBalance();\n    return () => {\n      current = false;\n    };\n  }, []);\n\n  async function isVerified({\n    pubAddr,\n    templateName,\n    apiUrl,\n    localhost\n  }) {\n    try {\n      return await daemonApi.isVerifiedPublisher({\n        pubAddr,\n        templateName,\n        apiUrl,\n        localhost\n      });\n    } catch (err) {\n      console.error(`Failed to verify pub address: ${pubAddr}: \\n ${err}`);\n      return {\n        success: false,\n        error: err\n      };\n    }\n  } // check if record includes a payment template\n\n\n  const TMPL_PAYMENT = 'tmpl_3084380E';\n  let payment = false;\n\n  if (recordPayload.record.details[TMPL_PAYMENT]) {\n    payment = true;\n  }\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, __jsx(SideBar, {\n    reroute: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: classes.recordViewer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, __jsx(SwitchViewer, {\n    recordPayload: recordPayload,\n    purchasedData: purchasedData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }), payment && __jsx(PaymentRow, {\n    paymentTemplate: recordPayload.record.details[TMPL_PAYMENT],\n    registered: registered,\n    platformData: platformData,\n    paymentAddress: recordPayload.meta.signed_by,\n    tip: tip,\n    purchasedData: purchasedData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    className: classes.recordsByPublisher,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, __jsx(RecordMap, {\n    records: recordsByPublisher,\n    isVerified: isVerified,\n    showOnlyVerifiedPublishers: showOnlyVerifiedPublishers,\n    autoPay: autoPay,\n    purchaseRecord: purchaseRecord,\n    proofOfPurchase: proofOfPurchase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }))));\n};\n\nRecord.getInitialProps = async ctx => {\n  const {\n    reduxStore,\n    query\n  } = ctx;\n  const {\n    getState\n  } = reduxStore; // const isServer = !!req\n\n  let state = getState();\n  const {\n    Explorer\n  } = state;\n  const txid = query.txid;\n  let response = await Explorer.daemonApi.getOip5Record(txid);\n  const {\n    success,\n    payload,\n    error\n  } = response;\n\n  if (success) {\n    const {\n      results\n    } = payload;\n\n    if (results[0]) {\n      return {\n        recordPayload: results[0]\n      };\n    }\n  } else {\n    console.error(error);\n  }\n\n  return {};\n};\n\nRecord.propTypes = {\n  classes: PropTypes.object.isRequired,\n  registered: PropTypes.bool.isRequired,\n  platformData: PropTypes.object.isRequired,\n  daemonApi: PropTypes.object.isRequired,\n  setActivePage: PropTypes.func.isRequired,\n  getExchangeRate: PropTypes.func.isRequired,\n  getBalance: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    registered: state.Platform.registered,\n    platformData: state.Platform.platformData,\n    showOnlyVerifiedPublishers: state.Interface.showOnlyVerifiedPublishers,\n    daemonApi: state.Explorer.daemonApi,\n    autoPay: state.Autopay\n  };\n}\n\nconst mapDispatchToProps = {\n  tip,\n  setActivePage,\n  getExchangeRate,\n  getBalance,\n  purchaseRecord,\n  proofOfPurchase\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Record));","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/pages/record.js"],"names":["React","useState","useEffect","withStyles","PropTypes","connect","SwitchViewer","RecordMap","PaymentRow","SideBar","getBalance","getExchangeRate","tip","purchaseRecord","proofOfPurchase","setActivePage","styles","theme","root","display","flexDirection","height","breakpoints","content","overflowY","overflowX","flex","recordViewer","maxHeight","recordsByPublisher","minHeight","paddingLeft","color","palette","greyscale","Record","classes","recordPayload","daemonApi","registered","platformData","showOnlyVerifiedPublishers","autoPay","purchasedData","setPurchasedData","proofTxid","data","paid","purchased","txid","meta","found","find","purchase","payment_txid","terms","then","catch","err","console","log","setRecordsByPublisher","current","getRecordsByPublisher","q","signed_by","res","searchOip5Records","limit","error","success","payload","results","length","getXrAndBalance","isVerified","pubAddr","templateName","apiUrl","localhost","isVerifiedPublisher","TMPL_PAYMENT","payment","record","details","getInitialProps","ctx","reduxStore","query","getState","state","Explorer","response","getOip5Record","propTypes","object","isRequired","bool","func","mapStateToProps","Platform","Interface","Autopay","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport withStyles from 'react-jss';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport SwitchViewer from '../components/views/dumb/SwitchViewer';\nimport RecordMap from '../components/views/dumb/recordMap/RecordMap';\nimport PaymentRow from '../components/views/dumb/paymentRow/PaymentRow';\nimport SideBar from '../components/views/dumb/SideBar';\nimport {\n  getBalance,\n  getExchangeRate,\n  tip,\n  purchaseRecord,\n  proofOfPurchase\n} from '../redux/actions/Wallet/thunks';\n\nimport { setActivePage } from '../redux/actions/Interface/creators';\n\nconst styles = (theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    height: '100%'\n  },\n  [`@media (max-width: ${theme.breakpoints['md']}px)`]: {\n    root: {\n      flexDirection: 'column'\n    }\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    overflowY: 'auto',\n    overflowX: 'hidden',\n    flex: 1\n  },\n  recordViewer: {\n    display: 'flex',\n    flex: '1 0 700px',\n    flexDirection: 'column',\n    maxHeight: 850\n    // height: 1000\n  },\n  recordsByPublisher: {\n    display: 'flex',\n    flex: 1,\n    minHeight: '50%',\n    flexDirection: 'column',\n    '& h3': {\n      paddingLeft: 30,\n      color: theme.palette.greyscale(0.8)\n    }\n  }\n});\n\nconst Record = ({\n  classes,\n  recordPayload,\n  daemonApi,\n  registered,\n  platformData,\n  tip,\n  showOnlyVerifiedPublishers,\n  setActivePage,\n  getExchangeRate,\n  getBalance,\n  autoPay,\n  purchaseRecord,\n  proofOfPurchase\n}) => {\n  useEffect(() => {\n    setActivePage(null);\n  }, []);\n\n\n  const [purchasedData, setPurchasedData] = useState({\n    proofTxid: '',\n    data: '',\n    paid: false\n})\n\n\nuseEffect(() => {\nif(autoPay.purchased){\n  let { txid } = recordPayload.meta\n\n  let found = autoPay.purchased.find(purchase => {\n     return purchase.txid === txid\n  })\n  \n  if(found){\n    let {txid, payment_txid, terms } = found\n    proofOfPurchase({txid, payment_txid, terms })\n    .then(data => {\n      setPurchasedData({\n        proofTxid: payment_txid,\n        data: data,\n        paid: true\n      })})\n    .catch(err => console.log(err))\n  }\n}\n}, [])\n\n\n  // get records by the same publisher\n  const [recordsByPublisher, setRecordsByPublisher] = useState([]);\n  useEffect(() => {\n    let current = true;\n    const getRecordsByPublisher = async () => {\n      const { meta } = recordPayload;\n      const q = `meta.signed_by:${meta.signed_by}`;\n      let res;\n      try {\n        res = await daemonApi.searchOip5Records({ q, limit: 100 });\n      } catch (err) {\n        console.error(err);\n      }\n      if (!res) return;\n\n      const { success, payload, error } = res;\n      if (success) {\n        const { results } = payload;\n        if (results.length > 0) {\n          if (current) {\n            setRecordsByPublisher(results);\n          }\n        }\n      } else {\n        console.error(error);\n      }\n    };\n    if (recordPayload) {\n      try {\n        getRecordsByPublisher();\n      } catch (err) {\n        console.error(`Failed to get records by publisher: \\n ${err}`);\n      }\n    }\n\n    return () => {\n      current = false;\n    };\n  }, []);\n\n  // get flo balance and exchange rate\n  useEffect(() => {\n    let current = true;\n    const getXrAndBalance = async () => {\n      if (current) {\n        await getExchangeRate();\n        await getBalance();\n      }\n    };\n    getXrAndBalance();\n    return () => {\n      current = false;\n    };\n  }, []);\n\n  async function isVerified({ pubAddr, templateName, apiUrl, localhost }) {\n    try {\n      return await daemonApi.isVerifiedPublisher({\n        pubAddr,\n        templateName,\n        apiUrl,\n        localhost\n      });\n    } catch (err) {\n      console.error(`Failed to verify pub address: ${pubAddr}: \\n ${err}`);\n      return { success: false, error: err };\n    }\n  }\n  // check if record includes a payment template\n  const TMPL_PAYMENT = 'tmpl_3084380E';\n  let payment = false;\n  if (recordPayload.record.details[TMPL_PAYMENT]) {\n    payment = true;\n  }\n  return (\n    <div className={classes.root}>\n      <SideBar reroute />\n      <div className={classes.content}>\n        <div className={classes.recordViewer}>\n          <SwitchViewer recordPayload={recordPayload} purchasedData={purchasedData} />\n          {payment && (\n            <PaymentRow\n              paymentTemplate={recordPayload.record.details[TMPL_PAYMENT]}\n              registered={registered}\n              platformData={platformData}\n              paymentAddress={recordPayload.meta.signed_by}\n              tip={tip}\n              purchasedData={purchasedData}\n            />\n          )}\n        </div>\n        <div className={classes.recordsByPublisher}>\n          <RecordMap\n            records={recordsByPublisher}\n            isVerified={isVerified}\n            showOnlyVerifiedPublishers={showOnlyVerifiedPublishers}\n            autoPay={autoPay}\n            purchaseRecord={purchaseRecord}\n            proofOfPurchase={proofOfPurchase}\n\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nRecord.getInitialProps = async (ctx) => {\n  const { reduxStore, query } = ctx;\n  const { getState } = reduxStore;\n  // const isServer = !!req\n\n  let state = getState();\n  const { Explorer } = state;\n\n  const txid = query.txid;\n\n  let response = await Explorer.daemonApi.getOip5Record(txid);\n  const { success, payload, error } = response;\n  if (success) {\n    const { results } = payload;\n    if (results[0]) {\n      return {\n        recordPayload: results[0]\n      };\n    }\n  } else {\n    console.error(error);\n  }\n\n  return {};\n};\n\nRecord.propTypes = {\n  classes: PropTypes.object.isRequired,\n  registered: PropTypes.bool.isRequired,\n  platformData: PropTypes.object.isRequired,\n  daemonApi: PropTypes.object.isRequired,\n  setActivePage: PropTypes.func.isRequired,\n  getExchangeRate: PropTypes.func.isRequired,\n  getBalance: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    registered: state.Platform.registered,\n    platformData: state.Platform.platformData,\n    showOnlyVerifiedPublishers: state.Interface.showOnlyVerifiedPublishers,\n    daemonApi: state.Explorer.daemonApi,\n    autoPay: state.Autopay\n  };\n}\nconst mapDispatchToProps = {\n  tip,\n  setActivePage,\n  getExchangeRate,\n  getBalance,\n  purchaseRecord,\n  proofOfPurchase\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(Record));\n"]},"metadata":{},"sourceType":"module"}