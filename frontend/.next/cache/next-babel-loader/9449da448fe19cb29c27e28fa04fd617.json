{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useEffect } from 'react';\nimport withStyles from 'react-jss';\nimport videojs from 'video.js';\nimport getIpfsUrl from '../../../../helpers/getIpfsUrl';\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      display: 'flex',\n      flex: 1,\n      '& > .video-js': {\n        height: '100%',\n        width: '100%'\n      }\n    }\n  };\n};\n\nvar RenderPlayer = function RenderPlayer(_ref) {\n  var classes = _ref.classes,\n      videoSrc = _ref.videoSrc,\n      videoExtension = _ref.videoExtension;\n  var videoRef = useRef(null);\n  var playerRef = useRef(null);\n  useEffect(function () {\n    playerRef.current = videojs(videoRef.current, {\n      controls: true,\n      autoplay: false,\n      preload: 'auto'\n    });\n    var player = playerRef.current;\n    player.on('ready', function () {\n      console.log('player is ready');\n    });\n    return function () {\n      if (playerRef.current) {\n        playerRef.current.dispose();\n      }\n    };\n  }, []);\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"video\", {\n    ref: videoRef,\n    className: 'video-js vjs-oip vjs-big-play-centered'\n  }, __jsx(\"source\", {\n    src: videoSrc,\n    type: \"video/\".concat(videoExtension)\n  })));\n};\n\nvar stripFileExtension = function stripFileExtension(filename) {\n  var split = filename.split('.');\n  return split[split.length - 1];\n};\n\nvar MAINNET_VIDEO_TEMPLATE = 'tmpl_4769368E';\nvar TESTNET_VIDEO_TEMPLATE = 'tmpl_5679C4E4';\n\nvar VideoViewer = function VideoViewer(_ref2) {\n  var classes = _ref2.classes,\n      recordPayload = _ref2.recordPayload,\n      src = _ref2.src;\n  var record = recordPayload.record;\n  var details = record.details;\n  var template;\n  var addressDirectory,\n      filename,\n      thumbnail = '';\n  var videoExtension, thumbnailSrc, videoSrc;\n\n  if (details[MAINNET_VIDEO_TEMPLATE]) {\n    template = details[MAINNET_VIDEO_TEMPLATE];\n  } else {\n    template = details[TESTNET_VIDEO_TEMPLATE];\n  }\n\n  if (template) {\n    addressDirectory = template.addressDirectory;\n    filename = template.filename;\n    thumbnail = template.thumbnailFilename;\n  } else {\n    var _loop = function _loop(obj) {\n      Object.keys(details[obj]).map(function (key) {\n        if (key === 'addressDirectory') {\n          addressDirectory = details[obj][key];\n        }\n\n        if (key === 'filename') {\n          filename = details[obj][key];\n        }\n\n        if (key === 'thumbnailFilename') {\n          thumbnail = details[obj][key];\n        }\n      });\n    };\n\n    for (var obj in details) {\n      _loop(obj);\n    }\n  }\n\n  if (thumbnail) {\n    thumbnailSrc = getIpfsUrl({\n      dirName: addressDirectory,\n      filename: thumbnail\n    });\n  }\n\n  if (filename) {\n    videoExtension = stripFileExtension(filename);\n  } else videoExtension = stripFileExtension(src); // init video js\n  // const videoRef = useRef(null);\n  // const playerRef = useRef(null);\n\n\n  if (src) {\n    videoSrc = getIpfsUrl({\n      dirName: src\n    });\n  } else {\n    videoSrc = getIpfsUrl({\n      dirName: addressDirectory,\n      filename: filename\n    });\n  }\n\n  if (src && videoSrc) {\n    return __jsx(RenderPlayer, {\n      classes: classes,\n      videoSrc: videoSrc,\n      videoExtension: videoExtension\n    });\n  } else return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"img\", {\n    src: thumbnailSrc,\n    style: {\n      width: \"100%\",\n      height: '100%'\n    }\n  }));\n};\n\nexport default withStyles(styles)(VideoViewer);","map":null,"metadata":{},"sourceType":"module"}