{"ast":null,"code":"import { DaemonApi } from 'js-oip';\nimport { setDaemonApi, fetchingRecords, fetchingRecordsSuccess, fetchingRecordsError, setDefaultRecords, fetchingTemplates, fetchingTemplatesSuccess, setDefaultTemplates, fetchingTemplatesError, setSearchedRecords, setSearchedTemplates } from './creators'; // _exists_:record.details.tmpl_000000000000F113\n\nconst EXISTS = '_exists_';\nconst limit = 100;\nconst sort = `meta.time:d`;\nexport const applyTemplateFilter = query => (_, getState) => {\n  const {\n    templateFilter,\n    templateOperand\n  } = getState().Explorer;\n\n  if (templateFilter.length === 0) {\n    return query;\n  }\n\n  let queryArray = [];\n\n  for (let template of templateFilter) {\n    let tmpFilter = `${EXISTS}:record.details.${template}`;\n    queryArray.push(tmpFilter);\n  }\n\n  let queryString = queryArray.join(` ${templateOperand} `);\n\n  if (query) {\n    queryString = `(${queryString}) AND ${query}`;\n  }\n\n  return queryString;\n};\nexport const getDefaultRecords = query => async dispatch => {\n  dispatch(fetchingRecords());\n  let response;\n\n  try {\n    response = await dispatch(getOip5Records(query));\n  } catch (err) {\n    dispatch(fetchingRecordsError(err.message));\n    return {\n      success: false,\n      error: err.message,\n      results: []\n    };\n  }\n\n  const {\n    success,\n    error,\n    payload\n  } = response;\n\n  if (success) {\n    dispatch(fetchingRecordsSuccess());\n    dispatch(setDefaultRecords(payload));\n  } else {\n    dispatch(fetchingRecordsError(error));\n  }\n\n  return payload;\n};\nexport const searchRecords = query => async dispatch => {\n  dispatch(fetchingRecords());\n  let response;\n\n  try {\n    response = await dispatch(getOip5Records(query));\n  } catch (err) {\n    dispatch(fetchingRecordsError(err.message));\n    return {\n      success: false,\n      error: err.message,\n      results: []\n    };\n  }\n\n  const {\n    success,\n    error,\n    payload\n  } = response;\n\n  if (success) {\n    dispatch(fetchingRecordsSuccess());\n    dispatch(setSearchedRecords(payload));\n  } else {\n    dispatch(fetchingRecordsError(error));\n  }\n\n  return payload;\n};\nexport const getOip5Records = query => async (dispatch, getState) => {\n  const {\n    templateFilter,\n    daemonApi\n  } = getState().Explorer; // if query or filter, search artifacts\n\n  if (query || templateFilter.length > 0) {\n    let q = dispatch(applyTemplateFilter(query));\n\n    try {\n      return daemonApi.searchOip5Records({\n        q,\n        limit,\n        sort\n      });\n    } catch (err) {\n      throw Error(err);\n    } // else if filter get filtered records\n\n  } else {\n    try {\n      return daemonApi.getLatestOip5Records({\n        limit,\n        sort\n      });\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n};\nexport const searchTemplates = query => async dispatch => {\n  dispatch(fetchingTemplates());\n  let response;\n\n  try {\n    response = await dispatch(getOip5Templates(query));\n  } catch (err) {\n    dispatch(fetchingTemplatesError(err.message));\n    return {\n      success: false,\n      error: err.message,\n      results: []\n    };\n  }\n\n  const {\n    success,\n    error,\n    payload\n  } = response;\n\n  if (success) {\n    dispatch(fetchingTemplatesSuccess());\n    dispatch(setSearchedTemplates(payload));\n  } else {\n    dispatch(fetchingTemplatesError(error));\n  }\n\n  return payload;\n};\nexport const getDefaultTemplates = query => async dispatch => {\n  dispatch(fetchingTemplates());\n  let response;\n\n  try {\n    response = await dispatch(getOip5Templates(query));\n  } catch (err) {\n    dispatch(fetchingTemplatesError(err.message));\n    return {\n      success: false,\n      error: err.message,\n      results: []\n    };\n  }\n\n  const {\n    success,\n    error,\n    payload\n  } = response;\n\n  if (success) {\n    dispatch(fetchingTemplatesSuccess());\n    dispatch(setDefaultTemplates(payload));\n  } else {\n    dispatch(fetchingTemplatesError(error));\n  }\n\n  return payload;\n};\nexport const getOip5Templates = query => async (dispatch, getState) => {\n  const {\n    daemonApi\n  } = getState().Explorer; // if query or filter, search artifacts\n\n  if (query) {\n    try {\n      return daemonApi.searchOip5Templates({\n        q: query,\n        limit,\n        sort\n      });\n    } catch (err) {\n      throw Error(err);\n    } // else if filter get filtered records\n\n  } else {\n    try {\n      return daemonApi.getLatestOip5Templates({\n        limit,\n        sort\n      });\n    } catch (err) {\n      throw Error(err);\n    }\n  }\n};\nexport const createDaemonApi = url => dispatch => {\n  const daemon = new DaemonApi(url);\n  dispatch(setDaemonApi(daemon));\n};","map":null,"metadata":{},"sourceType":"module"}