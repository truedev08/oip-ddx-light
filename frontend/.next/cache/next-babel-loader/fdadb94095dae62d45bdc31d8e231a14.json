{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport withStyles from 'react-jss';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport { FaTwitter } from 'react-icons/fa';\nimport config from '../../../../config.js';\nimport knownTemplates from '../../../../templates/knownTemplates';\nimport getIpfsUrl from '../../../../helpers/getIpfsUrl';\nimport { connect } from 'react-redux';\nimport { purchaseRecord, proofOfPurchase } from '../../../../redux/actions/Wallet/thunks.js';\nimport { updatePurchasedTxid } from '../../../../redux/actions/Autopay/creators';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    overflow: 'hidden',\n    wordBreak: 'break-word',\n    borderTop: `1px solid ${theme.palette.greyscale(0.3)}`,\n    padding: 10,\n    fontSize: 12,\n    boxSizing: 'border-box'\n  },\n  tableData: {\n    width: '100%'\n  },\n  thumbnail: {\n    width: 300,\n    float: 'right',\n    paddingRight: 16,\n    paddingBottom: 10,\n    marginTop: 10\n  },\n  templateData: {},\n  templateDataRow: {\n    // width: 30\n    margin: [7, 0]\n  },\n  templateName: {\n    backgroundColor: theme.palette.primary.main,\n    fontWeight: '600',\n    color: 'white',\n    padding: [3, 4]\n  },\n  recordField: {\n    fontWeight: '600',\n    color: theme.palette.greyscale(0.9),\n    padding: [2, 4]\n  },\n  recordFieldRow: {\n    margin: [7, 16]\n  },\n  actionBarRoot: {\n    display: 'flex',\n    flex: '0 0 30px',\n    alignItems: 'center',\n    justifyContent: 'flex-end'\n  },\n  actionIcon: {\n    cursor: 'pointer'\n  },\n  txidHeader: {\n    fontSize: 12,\n    color: theme.palette.primary.main,\n    outline: 'none',\n    textDecoration: 'none',\n    '&:visited': {\n      color: theme.palette.tertiary.main\n    },\n    transition: 'all .2s ease-in-out',\n    '&:hover': {\n      transform: 'scale(1.1)'\n    }\n  },\n  linkRowRoot: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  actionIconButton: {\n    display: 'flex',\n    alignItems: 'center',\n    backgroundColor: 'transparent',\n    padding: [3, 7],\n    border: '1px solid',\n    borderRadius: 3,\n    marginLeft: 7,\n    '&:hover': {\n      cursor: 'pointer' // backgroundColor: 'black',\n      // color: 'white'\n\n    }\n  },\n  searchLink: {\n    display: 'inherit',\n    '& > img': {\n      height: 13\n    }\n  },\n  twitterButton: {\n    extend: 'actionIconButton',\n    borderColor: '#1DA1F2',\n    '&:hover': {\n      backgroundColor: '#1DA1F2',\n      '& > $twitterLink': {\n        color: 'white'\n      }\n    }\n  },\n  twitterLink: {\n    display: 'flex',\n    color: '#1DA1F2',\n    borderColor: '#1DA1F2',\n    backgroundColor: 'transparent'\n  },\n  gabButton: {\n    extend: 'actionIconButton',\n    borderColor: '#00D384',\n    '&:hover': {\n      // backgroundColor: '#1DA1F2',\n      '& > $twitterLink': {// color: 'white'\n      }\n    }\n  },\n  gabLink: {\n    display: 'flex',\n    // color: '#1DA1F2',\n    // borderColor: '#1DA1F2',\n    backgroundColor: 'transparent',\n    '& > img': {\n      height: 14\n    }\n  },\n  validButton: {\n    display: 'flex',\n    alignSelf: 'flex-end',\n    border: '.5em solid black',\n    borderRadius: '10%',\n    height: '2rem',\n    width: '2rem',\n    padding: '2px',\n    cursor: 'pointer',\n    transition: 'all .2s ease-in-out',\n    '&:hover': {\n      transform: 'scale(1.05)'\n    }\n  },\n  triangleUp: {\n    width: '0',\n    height: '0',\n    borderLeft: '1rem solid transparent',\n    borderRight: '1rem solid transparent',\n    borderBottom: '2rem solid rgb(13,112,16)'\n  },\n  triangleDown: {\n    width: '0',\n    height: '0',\n    borderLeft: '1rem solid transparent',\n    borderRight: '1rem solid transparent',\n    borderTop: '2rem solid rgb(179,27,17)'\n  },\n  confirmsUp: {\n    color: '#fff',\n    fontSize: '1.25rem',\n    position: 'relative',\n    right: '72%',\n    top: '25%'\n  },\n  confirmsDown: {\n    color: '#fff',\n    fontSize: '1.25rem',\n    position: 'relative',\n    right: '72%',\n    top: '0%'\n  },\n  dialogBox: {\n    position: 'relative',\n    background: '#fff',\n    border: '4px solid #000',\n    height: '6rem',\n    width: '8rem',\n    padding: '2rem',\n    borderRadius: '5%',\n    '&:after,&:before': {\n      left: '100%',\n      top: '35%',\n      border: 'solid transparent',\n      content: `\" \"`,\n      height: '0',\n      width: '0',\n      position: 'absolute',\n      pointerEvents: 'none'\n    },\n    '&:after': {\n      borderColor: 'rgba(213,213,213,0)',\n      borderLeftColor: '#fff',\n      borderWidth: '25px',\n      marginTop: '-25px'\n    },\n    '&:before': {\n      borderColor: 'rgba(0,0,0,0)',\n      borderLeftColor: '#000',\n      borderWidth: '31px',\n      marginTop: '-31px'\n    }\n  }\n}); // dialogBox: {\n//   width: '150px',\n//   height: '75px',\n//   backgroundColor: '#fff',\n//   color: '#000',\n//   padding: '20px',\n//   position: 'relative',\n//   margin: '40px',\n//   float: 'left',\n//   border: '2px solid black',\n//   borderRadius: '10%',\n//    '&:after': {\n//       content: `\" \"`,\n//       position: 'absolute',\n//       right: '-15px',\n//       top: '15px',\n//       borderTop: '15px solid transparent',\n//       borderRight: 'none',\n//       borderLeft: '15px solid black',\n//       borderBottom: '15px solid transparent',\n//    },\n// .arrow_box {\n// \tposition: relative;\n// \tbackground: #d5d5d5;\n// \tborder: 5px solid #000000;\n// }\n// .arrow_box:after, .arrow_box:before {\n// \tleft: 100%;\n// \ttop: 50%;\n// \tborder: solid transparent;\n// \tcontent: \" \";\n// \theight: 0;\n// \twidth: 0;\n// \tposition: absolute;\n// \tpointer-events: none;\n// }\n// .arrow_box:after {\n// \tborder-color: rgba(213, 213, 213, 0);\n// \tborder-left-color: #d5d5d5;\n// \tborder-width: 25px;\n// \tmargin-top: -25px;\n// }\n// .arrow_box:before {\n// \tborder-color: rgba(0, 0, 0, 0);\n// \tborder-left-color: #000000;\n// \tborder-width: 32px;\n// \tmargin-top: -32px;\n// }\n\n\nconst ActionBar = ({\n  classes,\n  verified,\n  txid,\n  terms,\n  commercialContent,\n  mediaType,\n  autoPay,\n  amount,\n  handleClick,\n  purchasedData\n}) => {\n  let explorerLink;\n\n  if (config.network === 'testnet') {\n    explorerLink = `https://testnet.flocha.in/tx/${txid}`;\n  } else explorerLink = `https://livenet.flocha.in/tx/${txid}`;\n\n  return __jsx(\"div\", {\n    className: classes.actionBarRoot\n  }, __jsx(\"a\", {\n    className: classes.txidHeader,\n    href: explorerLink,\n    target: \"_blank\"\n  }, __jsx(\"img\", {\n    src: \"https://testnet.flocha.in/img/icons/favicon.ico\",\n    alt: `transaction: #${txid}`\n  })), __jsx(LinkRow, {\n    classes: classes,\n    verified: verified,\n    txid: txid,\n    commercialContent: commercialContent,\n    mediaType: mediaType,\n    autoPay: autoPay,\n    amount: amount,\n    handleClick: handleClick,\n    purchasedData: purchasedData,\n    terms: terms\n  }));\n};\n\nconst ValidIcon = ({\n  classes,\n  confirms,\n  onClick\n}) => {\n  return __jsx(\"div\", {\n    className: classes.validButton\n  }, __jsx(\"div\", {\n    className: classes.triangleUp\n  }), __jsx(\"div\", {\n    className: classes.confirmsUp\n  }, confirms));\n};\n\nconst InValidIcon = ({\n  classes,\n  confirms,\n  onClick\n}) => {\n  return __jsx(\"div\", {\n    className: classes.validButton\n  }, __jsx(\"div\", {\n    className: classes.triangleDown\n  }), __jsx(\"div\", {\n    className: classes.confirmsDown\n  }, confirms));\n};\n\nconst DialogBox = ({\n  classes\n}) => {\n  return __jsx(\"div\", {\n    className: classes.dialogBox\n  }, \"Coolbeans\");\n};\n\nconst LinkRow = ({\n  classes,\n  verified,\n  txid,\n  terms,\n  commercialContent,\n  mediaType,\n  autoPay,\n  amount,\n  handleClick,\n  purchasedData\n}) => {\n  const {\n    twitter,\n    gab\n  } = verified;\n\n  if (mediaType === undefined) {\n    mediaType = 'other';\n  }\n\n  if (autoPay === undefined) {\n    autoPay = null;\n  }\n\n  if (amount === undefined) {\n    amount = 0;\n  }\n\n  const RenderAutoPay = ({\n    mediaType,\n    amount,\n    autoPay,\n    handleClick,\n    purchasedData\n  }) => {\n    if (!purchasedData) {\n      console.log({\n        purchasedData\n      });\n      return null;\n    }\n\n    if (!(mediaType && autoPay)) {\n      return;\n    }\n\n    if (purchasedData.paid) {\n      return __jsx(React.Fragment, null, __jsx(Link, {\n        passHref: true,\n        href: `/record?txid=${txid}`\n      }, __jsx(\"button\", {\n        className: classes.actionIconButton\n      }, __jsx(\"a\", {\n        className: classes.searchLink\n      }, \"paid\"))));\n    }\n\n    if (mediaType in autoPay) {\n      return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"button\", {\n        className: classes.actionIconButton,\n        style: purchasedData.paid ? {} : {\n          color: 'red'\n        },\n        onClick: () => handleClick(txid, terms)\n      }, __jsx(\"a\", {\n        className: classes.searchLink\n      }, purchasedData.paid ? 'paid' : autoPay[mediaType] >= amount ? 'autopay' : `Pay ${amount} FLO`))));\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: classes.linkRowRoot\n  }, gab && __jsx(\"button\", {\n    className: classes.gabButton\n  }, __jsx(\"a\", {\n    className: classes.gabLink,\n    href: `https://gab.com/OpenIndexProtocol/posts/${verified.gabId}`,\n    target: \"_blank\"\n  }, __jsx(\"img\", {\n    src: '/static/assets/icons/gabSvg.svg',\n    alt: 'gab'\n  }))), twitter && __jsx(\"button\", {\n    className: classes.twitterButton\n  }, __jsx(\"a\", {\n    className: classes.twitterLink,\n    href: `https://twitter.com/oip/status/${verified.twitterId}`,\n    target: \"_blank\"\n  }, __jsx(FaTwitter, null))), commercialContent ? __jsx(RenderAutoPay, {\n    mediaType: mediaType,\n    amount: amount,\n    autoPay: autoPay,\n    handleClick: handleClick,\n    purchasedData: purchasedData\n  }) : __jsx(Link, {\n    passHref: true,\n    href: `/record?txid=${txid}`\n  }, __jsx(\"button\", {\n    className: classes.actionIconButton\n  }, __jsx(\"a\", {\n    className: classes.searchLink\n  }, \"view\"))));\n};\n\nconst BASIC = 'tmpl_66089C48';\nconst VIDEO = 'tmpl_4769368E';\nconst PAYMENT = 'tmpl_3084380E';\nconst COMMERICAL = 'tmpl_D8D0F22C';\nconst SIMPCOINSALE = 'tmpl_DE84D583';\n/******************************************* MAIN COMPONENT ******************************************/\n\nconst RecordRow = ({\n  classes,\n  record,\n  meta,\n  isVerified,\n  showOnlyVerifiedPublishers = false,\n  autoPay,\n  purchaseRecord,\n  proofOfPurchase\n}) => {\n  const {\n    details\n  } = record; // tags, payment, permissions\n  // eslint-disable-next-line camelcase\n\n  const {\n    signed_by\n  } = meta;\n  const {\n    0: verified,\n    1: setVerified\n  } = useState({\n    twitter: false,\n    gab: false\n  });\n  const {\n    0: purchasedData,\n    1: setPurchasedData\n  } = useState({\n    proofTxid: '',\n    data: '',\n    paid: false\n  });\n\n  const handleClick = async (txid, terms) => {\n    purchaseRecord({\n      txid,\n      terms\n    }).then(data => {\n      //   console.log(\"DATA\", data)\n      Router.push(`/record?txid=${txid}`); //   if(data){\n      //     if(data.id === txid){\n      //       setPurchasedData({\n      //         proofTxid: '',\n      //         data: data,\n      //         paid: true\n      //       })\n      //     }\n      //   }\n    }).catch(err => console.log(err));\n  };\n\n  let mediaTypes = {\n    audio: knownTemplates.audio,\n    video: knownTemplates.video,\n    image: knownTemplates.image,\n    pdf: knownTemplates.pdf\n  };\n  useEffect(() => {\n    if (autoPay.purchased) {\n      let {\n        txid\n      } = meta;\n      let found = autoPay.purchased.find(purchase => {\n        return purchase.txid === txid;\n      });\n\n      if (found) {\n        let {\n          txid,\n          payment_txid,\n          terms\n        } = found;\n        proofOfPurchase({\n          txid,\n          payment_txid,\n          terms\n        }).then(data => {\n          setPurchasedData({\n            proofTxid: payment_txid,\n            data: data,\n            paid: true\n          });\n        }).catch(err => console.log(err));\n      }\n    }\n  }, []);\n  useEffect(() => {\n    let current = true;\n\n    async function verify(pubAddr) {\n      let tmplName;\n      let localhost = false;\n\n      if (config.network === 'testnet') {\n        tmplName = 'tmpl_2A46C905'; // verified pub testnet template\n\n        localhost = true;\n      }\n\n      const {\n        success,\n        payload\n      } = await isVerified({\n        pubAddr,\n        templateName: tmplName,\n        localhost\n      });\n\n      if (success && current) {\n        setVerified(payload);\n      }\n    }\n\n    verify(signed_by);\n    return () => {\n      current = false;\n    };\n  }, []);\n  let typeOfMedia; // order template data to start with basic and end with payments\n\n  let tmpDetails = [BASIC, VIDEO, ...Object.keys(details), PAYMENT];\n  let orderedDetails = [];\n\n  for (let tmpl of tmpDetails) {\n    if (!orderedDetails.includes(tmpl)) {\n      orderedDetails.push(tmpl);\n    }\n\n    for (const media in mediaTypes) {\n      mediaTypes[media].find(x => {\n        if (x == tmpl) {\n          return typeOfMedia = media;\n        }\n      });\n    }\n  } // get VIDEO and thumbnail\n\n\n  let thumbnail;\n  let ipfsUrl;\n\n  if (Object.keys(details).includes(VIDEO)) {\n    if (details[VIDEO].thumbnailFilename && details[VIDEO].addressDirectory) {\n      ipfsUrl = getIpfsUrl({\n        dirName: details[VIDEO].addressDirectory,\n        filename: details[VIDEO].thumbnailFilename\n      });\n      thumbnail = true;\n    }\n  } // COMMERICAL CONTENT \n\n\n  if (Object.keys(details).includes(COMMERICAL)) {\n    let amount;\n    let {\n      txid\n    } = meta;\n    let terms;\n\n    for (const item in details) {\n      let obj = details[item];\n      Object.keys(obj).map(key => {\n        if (key === 'embeddedTerms') {\n          terms = obj[key][0];\n        }\n\n        if (key === 'amount') {\n          return amount = obj[key];\n        }\n      });\n    }\n\n    return __jsx(RecordRowData, {\n      classes: classes,\n      meta: meta,\n      thumbnail: thumbnail,\n      ipfsUrl: ipfsUrl,\n      orderedDetails: orderedDetails,\n      details: details // eslint-disable-next-line camelcase\n      ,\n      signed_by: signed_by,\n      verified: verified,\n      commercialContent: true,\n      mediaType: typeOfMedia,\n      autoPay: autoPay,\n      amount: Number(amount),\n      handleClick: handleClick,\n      purchasedData: purchasedData,\n      terms: terms.toString()\n    });\n  }\n\n  if (showOnlyVerifiedPublishers) {\n    if (verified.gab || verified.twitter) {\n      return __jsx(RecordRowData, {\n        classes: classes,\n        meta: meta,\n        thumbnail: thumbnail,\n        ipfsUrl: ipfsUrl,\n        orderedDetails: orderedDetails,\n        details: details // eslint-disable-next-line camelcase\n        ,\n        signed_by: signed_by,\n        verified: verified,\n        showExpand: true,\n        commercialContent: false\n      });\n    } else return null;\n  }\n\n  return __jsx(RecordRowData, {\n    classes: classes,\n    meta: meta,\n    thumbnail: thumbnail,\n    ipfsUrl: ipfsUrl,\n    orderedDetails: orderedDetails,\n    details: details // eslint-disable-next-line camelcase\n    ,\n    signed_by: signed_by,\n    verified: verified,\n    showExpand: true,\n    commercialContent: false\n  });\n};\n/******************************************* END MAIN COMPONENT ******************************************/\n\n\nconst RecordRowData = ({\n  classes,\n  verified,\n  details,\n  meta,\n  thumbnail,\n  ipfsUrl,\n  orderedDetails,\n  // eslint-disable-next-line camelcase\n  signed_by,\n  showExpand,\n  commercialContent,\n  mediaType,\n  autoPay,\n  amount,\n  handleClick,\n  purchasedData,\n  terms\n}) => {\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(ActionBar, {\n    classes: classes,\n    verified: verified,\n    recordDetails: details,\n    txid: meta.txid,\n    commercialContent: commercialContent,\n    mediaType: mediaType,\n    autoPay: autoPay,\n    amount: amount,\n    handleClick: handleClick,\n    purchasedData: purchasedData,\n    terms: terms\n  }), __jsx(TableData, {\n    classes: classes,\n    thumbnail: thumbnail,\n    ipfsUrl: ipfsUrl,\n    orderedDetails: orderedDetails,\n    details: details // eslint-disable-next-line camelcase\n    ,\n    signed_by: signed_by,\n    verified: verified,\n    purchasedData: purchasedData\n  }));\n};\n\nconst TableData = ({\n  classes,\n  thumbnail,\n  ipfsUrl,\n  orderedDetails,\n  details,\n  // eslint-disable-next-line camelcase\n  signed_by,\n  verified,\n  purchasedData\n}) => {\n  return __jsx(\"div\", {\n    className: classes.tableData\n  }, thumbnail && __jsx(Thumbnail, {\n    src: ipfsUrl,\n    classes: classes\n  }), __jsx(\"div\", {\n    className: classes.templateData\n  }, orderedDetails.map(tmpl => {\n    if (!details[tmpl]) return null;\n    return __jsx(TemplateData, {\n      classes: classes,\n      tmpl: tmpl,\n      details: details[tmpl],\n      key: tmpl,\n      purchasedData: purchasedData\n    });\n  }), signed_by && __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: classes.templateName\n  }, \"signed_by:\"), __jsx(\"span\", null, \" \", signed_by)), verified.name && __jsx(\"div\", {\n    style: {\n      marginTop: '7px'\n    }\n  }, __jsx(\"span\", {\n    className: classes.templateName\n  }, \"verified name:\"), __jsx(\"span\", null, \" \", verified.name))));\n};\n\nconst Thumbnail = ({\n  src,\n  classes\n}) => {\n  return __jsx(\"img\", {\n    className: classes.thumbnail,\n    src: src,\n    alt: 'thumbnail'\n  });\n};\n\nconst TemplateData = ({\n  classes,\n  tmpl,\n  details,\n  purchasedData\n}) => {\n  let templateName;\n  let mediaType = '';\n\n  if (knownTemplates[tmpl]) {\n    templateName = knownTemplates[tmpl].friendly_name;\n  } else if (knownTemplates.testnet[tmpl]) {\n    templateName = knownTemplates.testnet[tmpl].friendly_name;\n  } else {\n    templateName = 'Unknown Template';\n  }\n\n  if (tmpl === BASIC) {\n    details = {\n      title: details.title,\n      description: details.description,\n      year: details.year\n    };\n  }\n\n  if (tmpl === VIDEO) {\n    details = {\n      displayName: details.displayName,\n      addressDirectory: details.addressDirectory,\n      filename: details.filename,\n      thumbnailFilename: details.thumbnailFilename,\n      publishDate: details.publishDate\n    };\n  }\n\n  if (tmpl === PAYMENT) {\n    details = _objectSpread({\n      platformCut: details.platformCut,\n      influencerCut: details.influencerCut\n    }, details);\n  }\n\n  if (tmpl === COMMERICAL) {\n    if (purchasedData.paid && purchasedData.data) {\n      details = {\n        location: purchasedData.data.location,\n        network: purchasedData.data.network,\n        embeddedTerms: purchasedData.data.term,\n        valid_until: purchasedData.data.valid_until\n      };\n    } else {\n      details = {\n        embeddedTerms: details.embeddedTerms\n      };\n    }\n  }\n\n  if (tmpl === SIMPCOINSALE) {\n    let coin = details.coin;\n    let flo = 'f9964d1e840608b68a3795fd2597e9b232dfce1029251d481b2110c83a68adf7';\n    let btc = '058bf55be2639673228e1904e2326e13184de08837983cf03cc7fef73ad13d5f';\n    let rvn = '';\n\n    switch (coin) {\n      case flo:\n        details.coin = ' FLO';\n        break;\n\n      case btc:\n        details.coin = ' BTC';\n        break;\n      // case rvn:\n      //   details.coin = ' RVN'\n      //   break;\n    }\n  }\n\n  return __jsx(\"div\", {\n    className: classes.templateDataRow\n  }, __jsx(\"span\", {\n    className: classes.templateName\n  }, templateName, \":\"), __jsx(\"span\", null, \" \", tmpl), Object.keys(details).map(recordField => {\n    return __jsx(RecordField, {\n      classes: classes,\n      key: recordField,\n      recordField: recordField,\n      recordFieldData: details[recordField]\n    });\n  }));\n};\n\nconst RecordField = ({\n  classes,\n  recordField,\n  recordFieldData\n}) => {\n  if (!recordFieldData) {\n    return null;\n  }\n\n  if (recordFieldData.raw) {\n    recordFieldData = recordFieldData.raw;\n  }\n\n  return __jsx(\"div\", {\n    className: classes.recordFieldRow\n  }, __jsx(\"span\", {\n    className: classes.recordField\n  }, recordField, \":\"), __jsx(\"span\", null, \" \", recordFieldData));\n};\n\nfunction mapStateToProps(state) {\n  return {\n    autoPay: state.Autopay\n  };\n}\n\nexport default connect(mapStateToProps, {\n  purchaseRecord,\n  proofOfPurchase,\n  updatePurchasedTxid\n})(withStyles(styles)(RecordRow));","map":null,"metadata":{},"sourceType":"module"}