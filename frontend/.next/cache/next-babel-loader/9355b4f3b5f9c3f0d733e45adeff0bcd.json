{"ast":null,"code":"import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { Explorer, Interface, Publisher, Wallet, Platform, Autopay } from './reducers'; // Create our Store\n\nconst createStoreFn = () => {\n  const reducers = {\n    Explorer,\n    Interface,\n    Publisher,\n    Wallet,\n    Platform,\n    Autopay\n  }; // Create the logger to log Actions to the console\n\n  let middleware = [thunkMiddleware];\n\n  if (true) {\n    const reduxLogger = require('redux-logger');\n\n    const logger = reduxLogger.createLogger({\n      collapsed: true,\n      predicate: (getState, action) => {\n        return false;\n      }\n    });\n    middleware.push(logger);\n  }\n\n  let composeEnhancers; // Compose a \"name\" for the window.\n\n  if (false && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n    composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      name: 'oip-publish-platform'\n    });\n  } else {\n    composeEnhancers = compose;\n  } // Use the Middleware and create an \"enhancer\"\n\n\n  const enhancer = composeEnhancers(applyMiddleware(...middleware) // other store enhancers if any\n  );\n  return createStore(combineReducers(reducers), enhancer);\n};\n\nexport { createStoreFn as createStore };","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/redux/store.js"],"names":["createStore","applyMiddleware","compose","combineReducers","thunkMiddleware","Explorer","Interface","Publisher","Wallet","Platform","Autopay","createStoreFn","reducers","middleware","reduxLogger","require","logger","createLogger","collapsed","predicate","getState","action","push","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","name","enhancer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,EAAgDC,eAAhD,QAAuE,OAAvE;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,SAA9B,EAAyCC,MAAzC,EAAiDC,QAAjD,EAA2DC,OAA3D,QAA0E,YAA1E,C,CAEA;;AACA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,QAAQ,GAAG;AACfP,IAAAA,QADe;AAEfC,IAAAA,SAFe;AAGfC,IAAAA,SAHe;AAIfC,IAAAA,MAJe;AAKfC,IAAAA,QALe;AAMfC,IAAAA;AANe,GAAjB,CAD0B,CAU1B;;AACA,MAAIG,UAAU,GAAG,CAACT,eAAD,CAAjB;;AACA,YAA2C;AACzC,UAAMU,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AACA,UAAMC,MAAM,GAAGF,WAAW,CAACG,YAAZ,CAAyB;AACtCC,MAAAA,SAAS,EAAE,IAD2B;AAEtCC,MAAAA,SAAS,EAAE,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAC/B;AACD;AAJqC,KAAzB,CAAf;AAMAR,IAAAA,UAAU,CAACS,IAAX,CAAgBN,MAAhB;AACD;;AAED,MAAIO,gBAAJ,CAvB0B,CAyB1B;;AACA,MAAI,SAA8BC,MAAM,CAACC,oCAAzC,EAA+E;AAC7EF,IAAAA,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,CAA4C;AAC7DC,MAAAA,IAAI,EAAE;AADuD,KAA5C,CAAnB;AAGD,GAJD,MAIO;AACLH,IAAAA,gBAAgB,GAAGrB,OAAnB;AACD,GAhCyB,CAkC1B;;;AACA,QAAMyB,QAAQ,GAAGJ,gBAAgB,CAC/BtB,eAAe,CAAC,GAAGY,UAAJ,CADgB,CAE/B;AAF+B,GAAjC;AAKA,SAAOb,WAAW,CAACG,eAAe,CAACS,QAAD,CAAhB,EAA4Be,QAA5B,CAAlB;AACD,CAzCD;;AA2CA,SACEhB,aAAa,IAAIX,WADnB","sourcesContent":["import { createStore, applyMiddleware, compose, combineReducers } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { Explorer, Interface, Publisher, Wallet, Platform, Autopay } from './reducers'\n\n// Create our Store\nconst createStoreFn = () => {\n  const reducers = {\n    Explorer,\n    Interface,\n    Publisher,\n    Wallet,\n    Platform,\n    Autopay\n  }\n\n  // Create the logger to log Actions to the console\n  let middleware = [thunkMiddleware]\n  if (process.env.NODE_ENV !== 'production') {\n    const reduxLogger = require('redux-logger')\n    const logger = reduxLogger.createLogger({\n      collapsed: true,\n      predicate: (getState, action) => {\n        return process.browser\n      }\n    })\n    middleware.push(logger)\n  }\n\n  let composeEnhancers\n\n  // Compose a \"name\" for the window.\n  if (typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n    composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      name: 'oip-publish-platform'\n    })\n  } else {\n    composeEnhancers = compose\n  }\n\n  // Use the Middleware and create an \"enhancer\"\n  const enhancer = composeEnhancers(\n    applyMiddleware(...middleware)\n    // other store enhancers if any\n  )\n\n  return createStore(combineReducers(reducers), enhancer)\n}\n\nexport {\n  createStoreFn as createStore\n}\n"]},"metadata":{},"sourceType":"module"}