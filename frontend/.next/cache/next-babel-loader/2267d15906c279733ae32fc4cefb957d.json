{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport Explorer from '../views/wrappers/Explorer';\nimport { DEFAULT, SEARCH, setMode } from '../../redux/actions/Interface/creators';\nimport { searchRecords, searchTemplates } from '../../redux/actions/Explorer/thunks';\nimport { extendTemplates, publishRecord, publishTemplate } from '../../redux/actions/Publisher/creators';\nconst Records = 'Records';\nconst Templates = 'Templates';\n\nconst ExplorerContainer = ({\n  defaultRecords,\n  defaultTemplates,\n  searchedRecords,\n  searchedTemplates,\n  mode,\n  defaultRecordPage,\n  defaultTemplatePage,\n  searchedRecordPage,\n  searchedTemplatePage,\n  defaultRecordKeys,\n  defaultTemplateKeys,\n  searchedRecordKeys,\n  searchedTemplateKeys,\n  recordsFetching,\n  recordsSuccess,\n  recordsError,\n  templatesFetching,\n  templatesSuccess,\n  templatesError,\n  searchRecords,\n  searchTemplates,\n  setMode,\n  publishRecord,\n  publishTemplate,\n  extendTemplates,\n  daemonApi,\n  showOnlyVerifiedPublishers\n}) => {\n  const {\n    0: searchInput,\n    1: setSearchInput\n  } = useState('');\n  const {\n    0: selectOption,\n    1: setSelectOption\n  } = useState(Records);\n\n  async function isVerified({\n    pubAddr,\n    templateName,\n    apiUrl,\n    localhost\n  }) {\n    try {\n      return await daemonApi.isVerifiedPublisher({\n        pubAddr,\n        templateName,\n        apiUrl,\n        localhost\n      });\n    } catch (err) {\n      console.error(`Failed to verify pub address: ${pubAddr}: \\n ${err}`);\n      return {\n        success: false,\n        error: err\n      };\n    }\n  }\n\n  const {\n    0: selectedTemplates,\n    1: setSelectedTemplates\n  } = useState({});\n\n  function handleSelectTemplate({\n    id,\n    template\n  }) {\n    if (selectedTemplates[id]) {\n      let {\n        [id]: _\n      } = selectedTemplates,\n          newSelection = _objectWithoutProperties(selectedTemplates, [id].map(_toPropertyKey));\n\n      setSelectedTemplates(newSelection);\n    } else {\n      setSelectedTemplates(prevState => {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          [id]: template\n        });\n      });\n    }\n  }\n\n  function handlePublishRecordWithTemplates() {\n    let templates = [];\n\n    for (let tmpl in selectedTemplates) {\n      if (selectedTemplates.hasOwnProperty(tmpl)) {\n        templates.push(selectedTemplates[tmpl]);\n      }\n    }\n\n    publishRecord(templates);\n  }\n\n  function handleExtendTemplates() {\n    // get template IDs\n    let ids = [];\n\n    for (let tmpl in selectedTemplates) {\n      if (selectedTemplates.hasOwnProperty(tmpl)) {\n        ids.push(selectedTemplates[tmpl].identifier);\n      }\n    }\n\n    publishTemplate();\n    extendTemplates(ids);\n  }\n\n  function handleSearchInput(e) {\n    setSearchInput(e.target.value);\n  }\n\n  function handleSelectOption(e) {\n    setSelectOption(e.target.value);\n  }\n\n  function handleSearchSubmit() {\n    if (searchInput === '') {\n      setMode(DEFAULT);\n    } else {\n      if (selectOption === Records) {\n        setMode(SEARCH);\n        searchRecords(searchInput);\n      }\n\n      if (selectOption === Templates) {\n        setMode(SEARCH);\n        searchTemplates(searchInput);\n      }\n    }\n  }\n\n  let records, templates;\n\n  if (mode === DEFAULT) {\n    records = defaultRecords;\n    const recordKey = defaultRecordKeys[defaultRecordPage];\n    records = records[recordKey];\n    templates = defaultTemplates;\n    const templateKey = defaultTemplateKeys[defaultTemplatePage];\n    templates = templates[templateKey];\n  } else if (mode === SEARCH) {\n    records = searchedRecords;\n    const recordKey = searchedRecordKeys[searchedRecordPage];\n    records = records[recordKey];\n    templates = searchedTemplates;\n    const templateKey = searchedTemplateKeys[searchedTemplatePage];\n    templates = templates[templateKey];\n  }\n\n  return __jsx(Explorer, {\n    records: records,\n    templates: templates,\n    searchInput: searchInput,\n    selectOption: selectOption,\n    handleSearchInput: handleSearchInput,\n    handleSelectOption: handleSelectOption,\n    handleSearchSubmit: handleSearchSubmit,\n    recordsFetching: recordsFetching,\n    recordsSuccess: recordsSuccess,\n    recordsError: recordsError,\n    templatesFetching: templatesFetching,\n    templatesSuccess: templatesSuccess,\n    templatesError: templatesError,\n    publishRecord: publishRecord,\n    publishTemplate: publishTemplate,\n    extendTemplates: extendTemplates,\n    handleSelectTemplate: handleSelectTemplate,\n    selectedTemplates: selectedTemplates,\n    handlePublishRecordWithTemplates: handlePublishRecordWithTemplates,\n    handleExtendTemplates: handleExtendTemplates,\n    isVerified: isVerified,\n    showOnlyVerifiedPublishers: showOnlyVerifiedPublishers\n  });\n};\n\nfunction mapStateToProps(state) {\n  // toDo: note:: separate templates and records\n  return {\n    daemonApi: state.Explorer.daemonApi,\n    defaultRecords: state.Explorer.defaultRecords,\n    defaultTemplates: state.Explorer.defaultTemplates,\n    searchedRecords: state.Explorer.searchedRecords,\n    searchedTemplates: state.Explorer.searchedTemplates,\n    mode: state.Interface.mode,\n    defaultRecordPage: state.Interface.defaultRecordPage,\n    defaultTemplatePage: state.Interface.defaultTemplatePage,\n    searchedRecordPage: state.Interface.searchedRecordPage,\n    searchedTemplatePage: state.Interface.searchedTemplatePage,\n    defaultRecordKeys: state.Explorer.defaultRecordKeys,\n    defaultTemplateKeys: state.Explorer.defaultTemplateKeys,\n    searchedRecordKeys: state.Explorer.searchedRecordKeys,\n    searchedTemplateKeys: state.Explorer.searchedTemplateKeys,\n    recordsFetching: state.Explorer.recordsFetching,\n    recordsSuccess: state.Explorer.recordsSuccess,\n    recordsError: state.Explorer.recordsError,\n    templatesFetching: state.Explorer.templatesFetching,\n    templatesSuccess: state.Explorer.templatesSuccess,\n    templatesError: state.Explorer.templatesError,\n    showOnlyVerifiedPublishers: state.Interface.showOnlyVerifiedPublishers\n  };\n}\n\nconst mapDispatchToProps = {\n  setMode,\n  searchRecords,\n  searchTemplates,\n  publishRecord,\n  publishTemplate,\n  extendTemplates\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerContainer);","map":null,"metadata":{},"sourceType":"module"}