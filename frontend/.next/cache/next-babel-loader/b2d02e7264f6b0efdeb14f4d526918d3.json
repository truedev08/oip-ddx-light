{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\n\nvar useWindowSize = function useWindowSize(_ref) {\n  _s();\n\n  var _ref$breakpoints = _ref.breakpoints,\n      breakpoints = _ref$breakpoints === void 0 ? {\n    xs: 0,\n    sm: 600,\n    md: 960,\n    lg: 1280,\n    xl: 1920\n  } : _ref$breakpoints,\n      _ref$initialWidth = _ref.initialWidth,\n      initialWidth = _ref$initialWidth === void 0 ? Infinity : _ref$initialWidth,\n      _ref$initialHeight = _ref.initialHeight,\n      initialHeight = _ref$initialHeight === void 0 ? Infinity : _ref$initialHeight;\n  var isClient = true;\n\n  var _useState = useState({\n    width: isClient ? window.innerWidth : initialWidth,\n    height: isClient ? window.innerHeight : initialHeight\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    if (isClient) {\n      var handler = function handler() {\n        setState({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      };\n\n      window.addEventListener('resize', handler);\n      return function () {\n        return window.removeEventListener('resize', handler);\n      };\n    } else {\n      return undefined;\n    }\n  }, []);\n  var height = state.height,\n      width = state.width;\n  var breakpoint;\n\n  if (width < breakpoints['sm']) {\n    breakpoint = 'xs';\n  } else if (width < breakpoints['md'] && width >= breakpoints['sm']) {\n    breakpoint = 'sm';\n  } else if (width < breakpoints['lg'] && width >= breakpoints['md']) {\n    breakpoint = 'md';\n  } else if (width < breakpoints['xl'] && width >= breakpoints['lg']) {\n    breakpoint = 'lg';\n  } else breakpoint = 'xl';\n\n  return {\n    height: height,\n    width: width,\n    breakpoint: breakpoint\n  };\n};\n\n_s(useWindowSize, \"k/29AwJzP7UNGnNevefvMTjCfmw=\");\n\nexport default useWindowSize;","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/helpers/hooks/useWindowSize.js"],"names":["useEffect","useState","useWindowSize","breakpoints","xs","sm","md","lg","xl","initialWidth","Infinity","initialHeight","isClient","width","window","innerWidth","height","innerHeight","state","setState","handler","addEventListener","removeEventListener","undefined","breakpoint"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAMqC;AAAA;;AAAA,8BANlCC,WAMkC;AAAA,MANlCA,WAMkC,iCANpB;AACrCC,IAAAA,EAAE,EAAE,CADiC;AAErCC,IAAAA,EAAE,EAAE,GAFiC;AAGrCC,IAAAA,EAAE,EAAE,GAHiC;AAIrCC,IAAAA,EAAE,EAAE,IAJiC;AAKrCC,IAAAA,EAAE,EAAE;AALiC,GAMoB;AAAA,+BAAxDC,YAAwD;AAAA,MAAxDA,YAAwD,kCAAzCC,QAAyC;AAAA,gCAA/BC,aAA+B;AAAA,MAA/BA,aAA+B,mCAAfD,QAAe;AACzD,MAAME,QAAQ,OAAd;;AADyD,kBAE/BX,QAAQ,CAAC;AACjCY,IAAAA,KAAK,EAAED,QAAQ,GAAGE,MAAM,CAACC,UAAV,GAAuBN,YADL;AAEjCO,IAAAA,MAAM,EAAEJ,QAAQ,GAAGE,MAAM,CAACG,WAAV,GAAwBN;AAFP,GAAD,CAFuB;AAAA,MAElDO,KAFkD;AAAA,MAE3CC,QAF2C;;AAOzDnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIY,QAAJ,EAAc;AACZ,UAAMQ,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBD,QAAAA,QAAQ,CAAC;AACPN,UAAAA,KAAK,EAAEC,MAAM,CAACC,UADP;AAEPC,UAAAA,MAAM,EAAEF,MAAM,CAACG;AAFR,SAAD,CAAR;AAID,OALD;;AAMAH,MAAAA,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCD,OAAlC;AACA,aAAO;AAAA,eAAMN,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqCF,OAArC,CAAN;AAAA,OAAP;AACD,KATD,MASO;AACL,aAAOG,SAAP;AACD;AACF,GAbQ,EAaN,EAbM,CAAT;AAPyD,MAqBjDP,MArBiD,GAqB/BE,KArB+B,CAqBjDF,MArBiD;AAAA,MAqBzCH,KArByC,GAqB/BK,KArB+B,CAqBzCL,KArByC;AAuBzD,MAAIW,UAAJ;;AACA,MAAIX,KAAK,GAAGV,WAAW,CAAC,IAAD,CAAvB,EAA+B;AAC7BqB,IAAAA,UAAU,GAAG,IAAb;AACD,GAFD,MAEO,IAAIX,KAAK,GAAGV,WAAW,CAAC,IAAD,CAAnB,IAA6BU,KAAK,IAAIV,WAAW,CAAC,IAAD,CAArD,EAA6D;AAClEqB,IAAAA,UAAU,GAAG,IAAb;AACD,GAFM,MAEA,IAAIX,KAAK,GAAGV,WAAW,CAAC,IAAD,CAAnB,IAA6BU,KAAK,IAAIV,WAAW,CAAC,IAAD,CAArD,EAA6D;AAClEqB,IAAAA,UAAU,GAAG,IAAb;AACD,GAFM,MAEA,IAAIX,KAAK,GAAGV,WAAW,CAAC,IAAD,CAAnB,IAA6BU,KAAK,IAAIV,WAAW,CAAC,IAAD,CAArD,EAA6D;AAClEqB,IAAAA,UAAU,GAAG,IAAb;AACD,GAFM,MAEAA,UAAU,GAAG,IAAb;;AAEP,SAAO;AAAER,IAAAA,MAAM,EAANA,MAAF;AAAUH,IAAAA,KAAK,EAALA,KAAV;AAAiBW,IAAAA,UAAU,EAAVA;AAAjB,GAAP;AACD,CAzCD;;GAAMtB,a;;AA2CN,eAAeA,aAAf","sourcesContent":["import { useEffect, useState } from 'react'\n\nconst useWindowSize = ({ breakpoints = {\n  xs: 0,\n  sm: 600,\n  md: 960,\n  lg: 1280,\n  xl: 1920\n}, initialWidth = Infinity, initialHeight = Infinity }) => {\n  const isClient = typeof window === 'object'\n  const [state, setState] = useState({\n    width: isClient ? window.innerWidth : initialWidth,\n    height: isClient ? window.innerHeight : initialHeight\n  })\n\n  useEffect(() => {\n    if (isClient) {\n      const handler = () => {\n        setState({\n          width: window.innerWidth,\n          height: window.innerHeight\n        })\n      }\n      window.addEventListener('resize', handler)\n      return () => window.removeEventListener('resize', handler)\n    } else {\n      return undefined\n    }\n  }, [])\n  const { height, width } = state\n\n  let breakpoint\n  if (width < breakpoints['sm']) {\n    breakpoint = 'xs'\n  } else if (width < breakpoints['md'] && width >= breakpoints['sm']) {\n    breakpoint = 'sm'\n  } else if (width < breakpoints['lg'] && width >= breakpoints['md']) {\n    breakpoint = 'md'\n  } else if (width < breakpoints['xl'] && width >= breakpoints['lg']) {\n    breakpoint = 'lg'\n  } else breakpoint = 'xl'\n\n  return { height, width, breakpoint }\n}\n\nexport default useWindowSize\n"]},"metadata":{},"sourceType":"module"}