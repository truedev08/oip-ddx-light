{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nvar REGISTERED_PLATFORM_TMPL = 'tmpl_F6A8A55E';\n\nvar useRegisterPlatform = function useRegisterPlatform(_ref) {\n  _s();\n\n  var txid = _ref.txid,\n      daemon = _ref.daemon;\n\n  var _useState = useState(false),\n      registered = _useState[0],\n      setRegister = _useState[1];\n\n  var _useState2 = useState({}),\n      platformData = _useState2[0],\n      setPlatformData = _useState2[1]; // look up register platform record\n\n\n  useEffect(function () {\n    var getPlatformRecord = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(txid) {\n        var res, _res, success, payload, httpUrl, results, record, details;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return daemon.getOip5Record(txid);\n\n              case 3:\n                res = _context.sent;\n                _context.next = 10;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(\"Failed to register platform; Failed to get platform record \\n \".concat(_context.t0));\n                return _context.abrupt(\"return\");\n\n              case 10:\n                // console.log(res)\n                _res = res, success = _res.success, payload = _res.payload;\n\n                if (success) {\n                  results = payload.results;\n\n                  if (results[0]) {\n                    record = results[0].record;\n                    details = record.details;\n                    setPlatformData(details[REGISTERED_PLATFORM_TMPL]);\n                    httpUrl = platformData.httpUrl;\n                  }\n\n                  if (window) {\n                    if (window.location.hostname === httpUrl) {\n                      setRegister(true);\n                    }\n\n                    if (window.location.hostname === 'localhost') {\n                      setRegister(true);\n                    }\n                  }\n                }\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 6]]);\n      }));\n\n      return function getPlatformRecord(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    getPlatformRecord(txid);\n  }, []);\n  return {\n    registered: registered,\n    platformData: platformData\n  };\n};\n\n_s(useRegisterPlatform, \"t7ZqwV8l10+hsko6J946lpUNbNM=\");\n\nexport default useRegisterPlatform;","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/helpers/hooks/useRegisterPlatform.js"],"names":["useState","useEffect","REGISTERED_PLATFORM_TMPL","useRegisterPlatform","txid","daemon","registered","setRegister","platformData","setPlatformData","getPlatformRecord","getOip5Record","res","console","error","success","payload","results","record","details","httpUrl","window","location","hostname"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,IAAMC,wBAAwB,GAAG,eAAjC;;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAGtB;AAAA;;AAAA,MAFJC,IAEI,QAFJA,IAEI;AAAA,MADJC,MACI,QADJA,MACI;;AAAA,kBAC8BL,QAAQ,CAAC,KAAD,CADtC;AAAA,MACGM,UADH;AAAA,MACeC,WADf;;AAAA,mBAEoCP,QAAQ,CAAC,EAAD,CAF5C;AAAA,MAEGQ,YAFH;AAAA,MAEiBC,eAFjB,kBAGJ;;;AACAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMS,iBAAiB;AAAA,2EAAG,iBAAON,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAGVC,MAAM,CAACM,aAAP,CAAqBP,IAArB,CAHU;;AAAA;AAGtBQ,gBAAAA,GAHsB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKtBC,gBAAAA,OAAO,CAACC,KAAR;AALsB;;AAAA;AASxB;AATwB,uBAUKF,GAVL,EAUhBG,OAVgB,QAUhBA,OAVgB,EAUPC,OAVO,QAUPA,OAVO;;AAWxB,oBAAID,OAAJ,EAAa;AAELE,kBAAAA,OAFK,GAEOD,OAFP,CAELC,OAFK;;AAGX,sBAAIA,OAAO,CAAC,CAAD,CAAX,EAAgB;AACNC,oBAAAA,MADM,GACKD,OAAO,CAAC,CAAD,CADZ,CACNC,MADM;AAENC,oBAAAA,OAFM,GAEMD,MAFN,CAENC,OAFM;AAGdV,oBAAAA,eAAe,CAACU,OAAO,CAACjB,wBAAD,CAAR,CAAf;AACAkB,oBAAAA,OAAO,GAAGZ,YAAY,CAACY,OAAvB;AACD;;AACD,sBAAIC,MAAJ,EAAY;AACV,wBAAIA,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6BH,OAAjC,EAA0C;AACxCb,sBAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AACD,wBAAIc,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,WAAjC,EAA8C;AAC5ChB,sBAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF;AACF;;AA5BuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAjBG,iBAAiB;AAAA;AAAA;AAAA,OAAvB;;AA8BAA,IAAAA,iBAAiB,CAACN,IAAD,CAAjB;AACD,GAhCQ,EAgCN,EAhCM,CAAT;AAkCA,SAAO;AAAEE,IAAAA,UAAU,EAAVA,UAAF;AAAcE,IAAAA,YAAY,EAAZA;AAAd,GAAP;AACD,CA1CD;;GAAML,mB;;AA4CN,eAAeA,mBAAf","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst REGISTERED_PLATFORM_TMPL = 'tmpl_F6A8A55E'\nconst useRegisterPlatform = ({\n  txid,\n  daemon\n}) => {\n  const [registered, setRegister] = useState(false)\n  const [platformData, setPlatformData] = useState({})\n  // look up register platform record\n  useEffect(() => {\n    const getPlatformRecord = async (txid) => {\n      let res\n      try {\n        res = await daemon.getOip5Record(txid)\n      } catch (err) {\n        console.error(`Failed to register platform; Failed to get platform record \\n ${err}`)\n        return\n      }\n\n      // console.log(res)\n      const { success, payload } = res\n      if (success) {\n        let httpUrl\n        let { results } = payload\n        if (results[0]) {\n          const { record } = results[0]\n          const { details } = record\n          setPlatformData(details[REGISTERED_PLATFORM_TMPL])\n          httpUrl = platformData.httpUrl\n        }\n        if (window) {\n          if (window.location.hostname === httpUrl) {\n            setRegister(true)\n          }\n          if (window.location.hostname === 'localhost') {\n            setRegister(true)\n          }\n        }\n      }\n    }\n    getPlatformRecord(txid)\n  }, [])\n\n  return { registered, platformData }\n}\n\nexport default useRegisterPlatform\n"]},"metadata":{},"sourceType":"module"}