{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport config from '../config.js';\nimport InterfaceContainer from '../components/containers/InterfaceContainer';\nimport { fetchingRecordsError, fetchingTemplatesError, setDefaultRecords, setDefaultTemplates } from '../redux/actions/Explorer/creators';\nimport { getDefaultRecords, getDefaultTemplates } from '../redux/actions/Explorer/thunks';\nimport { getBalance, getExchangeRate } from '../redux/actions/Wallet/thunks';\nimport useRegisterPlatform from '../helpers/hooks/useRegisterPlatform';\nimport { registerPlatform, setPlatformData } from '../redux/actions/Platform/creators';\n\nvar Index = function Index(_ref) {\n  var defaultRecords = _ref.defaultRecords,\n      defaultTemplates = _ref.defaultTemplates,\n      setDefaultRecords = _ref.setDefaultRecords,\n      setDefaultTemplates = _ref.setDefaultTemplates,\n      fetchingRecordsError = _ref.fetchingRecordsError,\n      fetchingTemplatesError = _ref.fetchingTemplatesError,\n      getExchangeRate = _ref.getExchangeRate,\n      getBalance = _ref.getBalance,\n      daemonApi = _ref.daemonApi,\n      setPlatformData = _ref.setPlatformData,\n      registerPlatform = _ref.registerPlatform;\n\n  var _useRegisterPlatform = useRegisterPlatform({\n    txid: config.platformRegistrationTxid,\n    daemon: daemonApi\n  }),\n      registered = _useRegisterPlatform.registered,\n      platformData = _useRegisterPlatform.platformData;\n\n  useEffect(function () {\n    var current = true;\n\n    if (current) {\n      if (registered) {\n        registerPlatform(registered);\n        setPlatformData(platformData);\n      }\n    }\n\n    return function () {\n      current = false;\n    };\n  }, [registered, platformData]);\n  useEffect(function () {\n    var current = true;\n\n    if (defaultRecords) {\n      var error = defaultRecords.error;\n\n      if (current) {\n        if (error) {\n          fetchingRecordsError(error);\n        } else setDefaultRecords(defaultRecords);\n      }\n    }\n\n    if (defaultTemplates) {\n      var _error = defaultTemplates.error;\n\n      if (current) {\n        if (_error) {\n          fetchingTemplatesError(_error);\n        } else setDefaultTemplates(defaultTemplates);\n      }\n    }\n\n    return function () {\n      current = false;\n    };\n  }, []); // get flo balance and exchange rate\n\n  useEffect(function () {\n    var current = true;\n\n    var getXrAndBalance = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!current) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return getExchangeRate();\n\n              case 3:\n                _context.next = 5;\n                return getBalance();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getXrAndBalance() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    getXrAndBalance();\n    return function () {\n      current = false;\n    };\n  }, []);\n  return __jsx(InterfaceContainer, null);\n};\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ctx) {\n    var req, reduxStore, dispatch, isServer, recordsPayload, templatesPayload;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            req = ctx.req, reduxStore = ctx.reduxStore;\n            dispatch = reduxStore.dispatch;\n            isServer = !!req; // this is a part of render blocking I think\n\n            _context2.next = 5;\n            return dispatch(getDefaultRecords());\n\n          case 5:\n            recordsPayload = _context2.sent;\n            _context2.next = 8;\n            return dispatch(getDefaultTemplates());\n\n          case 8:\n            templatesPayload = _context2.sent;\n\n            if (!isServer) {\n              _context2.next = 13;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              defaultRecords: recordsPayload,\n              defaultTemplates: templatesPayload\n            });\n\n          case 13:\n            return _context2.abrupt(\"return\", {});\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    daemonApi: state.Explorer.daemonApi\n  };\n};\n\nvar mapDispatchToProps = {\n  setDefaultTemplates: setDefaultTemplates,\n  setDefaultRecords: setDefaultRecords,\n  fetchingRecordsError: fetchingRecordsError,\n  fetchingTemplatesError: fetchingTemplatesError,\n  getExchangeRate: getExchangeRate,\n  getBalance: getBalance,\n  setPlatformData: setPlatformData,\n  registerPlatform: registerPlatform\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","map":null,"metadata":{},"sourceType":"module"}