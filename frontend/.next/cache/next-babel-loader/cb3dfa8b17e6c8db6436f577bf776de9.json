{"ast":null,"code":"import { useState, useEffect } from 'react';\nconst REGISTERED_PLATFORM_TMPL = 'tmpl_F6A8A55E';\n\nconst useRegisterPlatform = ({\n  txid,\n  daemon\n}) => {\n  const {\n    0: registered,\n    1: setRegister\n  } = useState(false);\n  const {\n    0: platformData,\n    1: setPlatformData\n  } = useState({}); // look up register platform record\n\n  useEffect(() => {\n    const getPlatformRecord = async txid => {\n      let res;\n\n      try {\n        res = await daemon.getOip5Record(txid);\n      } catch (err) {\n        console.error(`Failed to register platform; Failed to get platform record \\n ${err}`);\n        return;\n      } // console.log(res)\n\n\n      const {\n        success,\n        payload\n      } = res;\n\n      if (success) {\n        let httpUrl;\n        let {\n          results\n        } = payload;\n\n        if (results[0]) {\n          const {\n            record\n          } = results[0];\n          const {\n            details\n          } = record;\n          setPlatformData(details[REGISTERED_PLATFORM_TMPL]);\n          httpUrl = platformData.httpUrl;\n        }\n\n        if (window) {\n          if (window.location.hostname === httpUrl) {\n            setRegister(true);\n          }\n\n          if (window.location.hostname === 'localhost') {\n            setRegister(true);\n          }\n        }\n      }\n    };\n\n    getPlatformRecord(txid);\n  }, []);\n  return {\n    registered,\n    platformData\n  };\n};\n\nexport default useRegisterPlatform;","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/helpers/hooks/useRegisterPlatform.js"],"names":["useState","useEffect","REGISTERED_PLATFORM_TMPL","useRegisterPlatform","txid","daemon","registered","setRegister","platformData","setPlatformData","getPlatformRecord","res","getOip5Record","err","console","error","success","payload","httpUrl","results","record","details","window","location","hostname"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,MAAMC,wBAAwB,GAAG,eAAjC;;AACA,MAAMC,mBAAmB,GAAG,CAAC;AAC3BC,EAAAA,IAD2B;AAE3BC,EAAAA;AAF2B,CAAD,KAGtB;AACJ,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACQ,YAAD;AAAA,OAAeC;AAAf,MAAkCT,QAAQ,CAAC,EAAD,CAAhD,CAFI,CAGJ;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,iBAAiB,GAAG,MAAON,IAAP,IAAgB;AACxC,UAAIO,GAAJ;;AACA,UAAI;AACFA,QAAAA,GAAG,GAAG,MAAMN,MAAM,CAACO,aAAP,CAAqBR,IAArB,CAAZ;AACD,OAFD,CAEE,OAAOS,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAe,iEAAgEF,GAAI,EAAnF;AACA;AACD,OAPuC,CASxC;;;AACA,YAAM;AAAEG,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAuBN,GAA7B;;AACA,UAAIK,OAAJ,EAAa;AACX,YAAIE,OAAJ;AACA,YAAI;AAAEC,UAAAA;AAAF,YAAcF,OAAlB;;AACA,YAAIE,OAAO,CAAC,CAAD,CAAX,EAAgB;AACd,gBAAM;AAAEC,YAAAA;AAAF,cAAaD,OAAO,CAAC,CAAD,CAA1B;AACA,gBAAM;AAAEE,YAAAA;AAAF,cAAcD,MAApB;AACAX,UAAAA,eAAe,CAACY,OAAO,CAACnB,wBAAD,CAAR,CAAf;AACAgB,UAAAA,OAAO,GAAGV,YAAY,CAACU,OAAvB;AACD;;AACD,YAAII,MAAJ,EAAY;AACV,cAAIA,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6BN,OAAjC,EAA0C;AACxCX,YAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AACD,cAAIe,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,WAAjC,EAA8C;AAC5CjB,YAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF;AACF;AACF,KA7BD;;AA8BAG,IAAAA,iBAAiB,CAACN,IAAD,CAAjB;AACD,GAhCQ,EAgCN,EAhCM,CAAT;AAkCA,SAAO;AAAEE,IAAAA,UAAF;AAAcE,IAAAA;AAAd,GAAP;AACD,CA1CD;;AA4CA,eAAeL,mBAAf","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst REGISTERED_PLATFORM_TMPL = 'tmpl_F6A8A55E'\nconst useRegisterPlatform = ({\n  txid,\n  daemon\n}) => {\n  const [registered, setRegister] = useState(false)\n  const [platformData, setPlatformData] = useState({})\n  // look up register platform record\n  useEffect(() => {\n    const getPlatformRecord = async (txid) => {\n      let res\n      try {\n        res = await daemon.getOip5Record(txid)\n      } catch (err) {\n        console.error(`Failed to register platform; Failed to get platform record \\n ${err}`)\n        return\n      }\n\n      // console.log(res)\n      const { success, payload } = res\n      if (success) {\n        let httpUrl\n        let { results } = payload\n        if (results[0]) {\n          const { record } = results[0]\n          const { details } = record\n          setPlatformData(details[REGISTERED_PLATFORM_TMPL])\n          httpUrl = platformData.httpUrl\n        }\n        if (window) {\n          if (window.location.hostname === httpUrl) {\n            setRegister(true)\n          }\n          if (window.location.hostname === 'localhost') {\n            setRegister(true)\n          }\n        }\n      }\n    }\n    getPlatformRecord(txid)\n  }, [])\n\n  return { registered, platformData }\n}\n\nexport default useRegisterPlatform\n"]},"metadata":{},"sourceType":"module"}