{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/components/views/dumb/paymentRow/PaymentRow.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport withStyles from 'react-jss';\nimport PropTypes from 'prop-types';\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexDirection: 'row',\n      flex: '0 0 50px',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: [0, 30],\n      position: 'relative'\n    },\n    tipButton: {\n      position: 'relative',\n      display: 'flex',\n      justifyContent: 'center',\n      left: 30,\n      backgroundColor: 'transparent',\n      border: 'none',\n      outline: 'none',\n      '&:hover': {\n        cursor: 'pointer'\n      },\n      '& > img': {\n        height: 40,\n        '&:hover': {\n          height: 42\n        }\n      }\n    },\n    transactionContainer: {\n      marginLeft: '30px'\n    },\n    transactionLink: {\n      cursor: 'pointer',\n      borderBottom: 'none',\n      color: theme.palette.primary.main\n    }\n  };\n};\n\nvar PaymentRow = function PaymentRow(_ref) {\n  _s();\n\n  var classes = _ref.classes,\n      paymentTemplate = _ref.paymentTemplate,\n      paymentAddress = _ref.paymentAddress,\n      tip = _ref.tip;\n\n  var _useState = useState(undefined),\n      txid = _useState[0],\n      setTxid = _useState[1];\n\n  var _useState2 = useState(false),\n      showTxid = _useState2[0],\n      setShowTxid = _useState2[1];\n\n  function sendTip(_x) {\n    return _sendTip.apply(this, arguments);\n  }\n  /**Storing sugTip amounts in suggestedTips */\n\n\n  function _sendTip() {\n    _sendTip = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tV) {\n      var tx;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return tip({\n                paymentAddr: paymentAddress,\n                paymentTemplate: paymentTemplate,\n                tV: tV\n              });\n\n            case 2:\n              tx = _context.sent;\n              console.log('tip txid: ', tx);\n\n              if (tx) {\n                setTxid(tx);\n                setShowTxid(true);\n              }\n\n              setTimeout(function () {\n                setShowTxid(false);\n              }, 20000);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _sendTip.apply(this, arguments);\n  }\n\n  var suggestedTips = paymentTemplate.sugTip; // console.log(suggestedTips);\n\n  /**Mapping over suggestedTips and returning a button for each with the suggested tip, if no suggestedTip return default button */\n\n  if (suggestedTips) {\n    return __jsx(\"div\", {\n      className: classes.root,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, suggestedTips.map(function (tipValue) {\n      return __jsx(\"button\", {\n        //! sendTip takes the tipvalue and passes it back to the thunk. That vaule is used to calculate tip based on what is clicked\n        onClick: function onClick() {\n          return sendTip(tipValue);\n        },\n        className: classes.tipButton,\n        key: tipValue,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }\n      }, __jsx(\"h4\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }\n      }, \"$\", tipValue), __jsx(\"img\", {\n        src: '/static/assets/icons/tip.png',\n        alt: 'tip',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }\n      }));\n    }), __jsx(\"div\", {\n      className: classes.transactionContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, showTxid && __jsx(\"a\", {\n      target: \"_blank\",\n      href: \"https://livenet.flocha.in/tx/\".concat(txid),\n      className: classes.transactionLink,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, \"See payment here\")));\n  } else {\n    return __jsx(\"div\", {\n      className: classes.root,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, __jsx(\"button\", {\n      onClick: function onClick() {\n        return sendTip(0.2);\n      },\n      className: classes.tipButton,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, \".20\\uD834\\uDDCD\"), __jsx(\"img\", {\n      src: '/static/assets/icons/tip.png',\n      alt: 'tip',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    })), __jsx(\"div\", {\n      className: classes.transactionContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, showTxid && __jsx(\"a\", {\n      target: \"_blank\",\n      href: \"https://livenet.flocha.in/tx/\".concat(txid),\n      className: classes.transactionLink,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, \"See payment here\")));\n  }\n};\n\n_s(PaymentRow, \"19L7FGXpiAEGxyk3o/J1ix/wu2M=\");\n\n_c = PaymentRow;\nPaymentRow.propTypes = {\n  classes: PropTypes.object.isRequired,\n  paymentTemplate: PropTypes.object.isRequired,\n  paymentAddress: PropTypes.string.isRequired,\n  tip: PropTypes.func.isRequired\n};\nexport default withStyles(styles)(PaymentRow);\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentRow\");","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/components/views/dumb/paymentRow/PaymentRow.js"],"names":["React","useState","withStyles","PropTypes","styles","theme","root","display","flexDirection","flex","alignItems","justifyContent","padding","position","tipButton","left","backgroundColor","border","outline","cursor","height","transactionContainer","marginLeft","transactionLink","borderBottom","color","palette","primary","main","PaymentRow","classes","paymentTemplate","paymentAddress","tip","undefined","txid","setTxid","showTxid","setShowTxid","sendTip","tV","paymentAddr","tx","console","log","setTimeout","suggestedTips","sugTip","map","tipValue","propTypes","object","isRequired","string","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport withStyles from 'react-jss';\nimport PropTypes from 'prop-types';\n\nconst styles = (theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    flex: '0 0 50px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: [0, 30],\n    position: 'relative'\n  },\n  tipButton: {\n    position: 'relative',\n    display: 'flex',\n    justifyContent: 'center',\n    left: 30,\n    backgroundColor: 'transparent',\n    border: 'none',\n    outline: 'none',\n    '&:hover': {\n      cursor: 'pointer'\n    },\n    '& > img': {\n      height: 40,\n      '&:hover': {\n        height: 42\n      }\n    }\n  },\n  transactionContainer: {\n    marginLeft: '30px'\n  },\n  transactionLink: {\n    cursor: 'pointer',\n    borderBottom: 'none',\n    color: theme.palette.primary.main\n  }\n});\n\nconst PaymentRow = ({ classes, paymentTemplate, paymentAddress, tip }) => {\n  const [txid, setTxid] = useState(undefined);\n  const [showTxid, setShowTxid] = useState(false);\n  async function sendTip(tV) {\n    let tx = await tip({\n      paymentAddr: paymentAddress,\n      paymentTemplate,\n      tV\n    });\n    console.log('tip txid: ', tx);\n    if (tx) {\n      setTxid(tx);\n      setShowTxid(true);\n    }\n    setTimeout(() => {\n      setShowTxid(false);\n    }, 20000);\n  }\n\n  /**Storing sugTip amounts in suggestedTips */\n  let suggestedTips = paymentTemplate.sugTip;\n  // console.log(suggestedTips);\n\n  /**Mapping over suggestedTips and returning a button for each with the suggested tip, if no suggestedTip return default button */\n  if (suggestedTips) {\n    return (\n      <div className={classes.root}>\n        {suggestedTips.map((tipValue) => {\n          return (\n            <button\n              //! sendTip takes the tipvalue and passes it back to the thunk. That vaule is used to calculate tip based on what is clicked\n              onClick={() => sendTip(tipValue)}\n              className={classes.tipButton}\n              key={tipValue}\n            >\n              <h4>${tipValue}</h4>\n              <img src={'/static/assets/icons/tip.png'} alt={'tip'} />\n            </button>\n          );\n        })}\n        <div className={classes.transactionContainer}>\n          {showTxid && (\n            <a\n              target='_blank'\n              href={`https://livenet.flocha.in/tx/${txid}`}\n              className={classes.transactionLink}\n            >\n              See payment here\n            </a>\n          )}\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.root}>\n        <button onClick={() => sendTip(0.2)} className={classes.tipButton}>\n          <h4>.20𝇍</h4>\n          <img src={'/static/assets/icons/tip.png'} alt={'tip'} />\n        </button>\n        <div className={classes.transactionContainer}>\n          {showTxid && (\n            <a\n              target='_blank'\n              href={`https://livenet.flocha.in/tx/${txid}`}\n              className={classes.transactionLink}\n            >\n              See payment here\n            </a>\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nPaymentRow.propTypes = {\n  classes: PropTypes.object.isRequired,\n  paymentTemplate: PropTypes.object.isRequired,\n  paymentAddress: PropTypes.string.isRequired,\n  tip: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(PaymentRow);\n"]},"metadata":{},"sourceType":"module"}