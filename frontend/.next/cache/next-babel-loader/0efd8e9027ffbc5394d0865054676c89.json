{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Networks, OIP } from 'js-oip';\nimport { ECPair, payments } from 'bitcoinjs-lib';\nimport config from '../../../config.js';\nimport { setFloBalance, setFloExchangeRate, txError, txPending, txSuccess, purchase_record } from './creators';\nimport axios from 'axios';\nimport { updatePurchasedTxid } from '../Autopay/creators';\nvar floMainnet = Networks.floMainnet,\n    floTestnet = Networks.floTestnet;\nvar network = {\n  flo_mainnet: floMainnet.network,\n  flo_testnet: floTestnet.network\n};\n\nfunction getPubAddress(wif) {\n  var useNetwork = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'mainnet';\n  var floNetwork = useNetwork === 'mainnet' ? network.flo_mainnet : network.floTestnet;\n  var EC = ECPair.fromWIF(wif, floNetwork);\n  return payments.p2pkh({\n    pubkey: EC.publicKey,\n    network: floNetwork\n  }).address;\n} //! ****************************************************TIP Function **************************************************/\n\n\nexport var tip = function tip(_ref) {\n  var paymentAddr = _ref.paymentAddr,\n      paymentTemplate = _ref.paymentTemplate,\n      tipAmountSat = _ref.tipAmountSat,\n      tV = _ref.tV;\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, getState) {\n      var _getState, Platform, Wallet, wallet, TIP_FIAT, TIP_FLO_SAT, platformAddr, amount, pubCut, pubValue, platformValue, toPlatform, toPublisher, outputs, txid;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _getState = getState(), Platform = _getState.Platform, Wallet = _getState.Wallet;\n              wallet = Wallet.xWallet;\n\n              if (wallet) {\n                _context.next = 5;\n                break;\n              }\n\n              console.error(\"Failed to send tip. private key is probably not set. Wallet undefined\");\n              return _context.abrupt(\"return\");\n\n            case 5:\n              // paymentTemplate holds the sugTip array\n              // tV value is passed up from child PaymentRow depending on which button is clicked\n              // If template doesnt have sugTip, it will default to .2 cents in PaymentRow\n              TIP_FIAT = tV;\n              console.log(\"Tip amount: $\".concat(tV));\n              TIP_FLO_SAT = TIP_FIAT * 1e8 / (Wallet.floExchangeRate * 1e8) * 1e8; //console.log(TIP_FLO_SAT, Wallet.floExchangeRate);\n\n              //! *************** There is currently no platform, when not using a platform we need to change this to ignore the platform cut. It is currently taking a cut\n              // if (Platform.registered) {\n              //   // console.log(Platform.registered, Platform.platformData.floPaymentAddress)\n              //   platformAddr = Platform.platformData.floPaymentAddress;\n              // }\n              amount = tipAmountSat || Math.floor(TIP_FLO_SAT); // console.log('amount', amount);\n\n              if (paymentTemplate && paymentTemplate.platformCut) {\n                pubCut = (100 - paymentTemplate.platformCut) / 100;\n                pubValue = Math.floor(amount * pubCut);\n                platformValue = Math.floor(amount * (paymentTemplate.platformCut / 100));\n                toPlatform = {\n                  address: platformAddr,\n                  value: platformValue\n                };\n              } else pubValue = amount; // console.log(pubCut, pubValue, platformValue)\n\n\n              toPublisher = {\n                address: paymentAddr,\n                value: pubValue\n              };\n              outputs = [toPublisher, toPlatform]; // console.log(outputs);\n\n              _context.prev = 12;\n              _context.next = 15;\n              return dispatch(sendTx(outputs));\n\n            case 15:\n              txid = _context.sent;\n              _context.next = 22;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](12);\n              console.error(_context.t0);\n              return _context.abrupt(\"return\");\n\n            case 22:\n              // console.log('sent tip: ', txid)\n              setTimeout(function () {\n                dispatch(getBalance());\n              }, 5000);\n              return _context.abrupt(\"return\", txid);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[12, 18]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}; //! ******************************************* END TIP Function ********************************/\n\nexport var sendTx = function sendTx(outputs) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n      var _getState2, Wallet, xWallet, txid;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _getState2 = getState(), Wallet = _getState2.Wallet;\n              xWallet = Wallet.xWallet;\n\n              if (xWallet) {\n                _context2.next = 5;\n                break;\n              }\n\n              console.error(\"Failed to send transaction. private key is probably not set. Wallet undefined\");\n              return _context2.abrupt(\"return\");\n\n            case 5:\n              dispatch(txPending());\n              _context2.prev = 6;\n              _context2.next = 9;\n              return xWallet.sendTx(outputs);\n\n            case 9:\n              txid = _context2.sent;\n              _context2.next = 16;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](6);\n              dispatch(txError(_context2.t0));\n              throw Error(\"Failed to sendTx: \\n \".concat(_context2.t0));\n\n            case 16:\n              dispatch(txSuccess());\n              console.log(\"tx sent: \", txid);\n              return _context2.abrupt(\"return\", txid);\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[6, 12]]);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var getBalance = function getBalance(addr) {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n      var _getState3, Wallet, xWallet, address, explorer, res;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _getState3 = getState(), Wallet = _getState3.Wallet;\n              xWallet = Wallet.xWallet;\n\n              if (xWallet) {\n                _context3.next = 5;\n                break;\n              }\n\n              console.error(\"Failed to get balance. private key is probably not set. Wallet undefined\");\n              return _context3.abrupt(\"return\");\n\n            case 5:\n              address = addr || getPubAddress(config.privatekey);\n              explorer = xWallet.explorer;\n              _context3.prev = 7;\n              _context3.next = 10;\n              return explorer.getAddress(address);\n\n            case 10:\n              res = _context3.sent;\n              _context3.next = 17;\n              break;\n\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3[\"catch\"](7);\n              console.error(\"failed to get address from explorer: \\n \".concat(_context3.t0));\n              return _context3.abrupt(\"return\");\n\n            case 17:\n              dispatch(setFloBalance(res.balanceSat));\n              return _context3.abrupt(\"return\", res.balanceSat);\n\n            case 19:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[7, 13]]);\n    }));\n\n    return function (_x5, _x6) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport var getExchangeRate = function getExchangeRate() {\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch, getState) {\n      var _exchange, xr;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _exchange = getState().Wallet._exchange;\n              _context4.prev = 1;\n              _context4.next = 4;\n              return _exchange.getExchangeRate('flo', 'usd');\n\n            case 4:\n              xr = _context4.sent;\n              _context4.next = 11;\n              break;\n\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.log(\"Failed to get exchange rate: \\n \".concat(_context4.t0));\n              return _context4.abrupt(\"return\");\n\n            case 11:\n              dispatch(setFloExchangeRate(xr));\n              return _context4.abrupt(\"return\", xr);\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 7]]);\n    }));\n\n    return function (_x7, _x8) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n}; //! ****************************************************PurchaseRecord Function **************************************************/\n\nexport var purchaseRecord = function purchaseRecord(_ref6) {\n  var txid = _ref6.txid,\n      terms = _ref6.terms;\n  return /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch, getState) {\n      var _getState4, Platform, Wallet, wallet, response, _response$data, valid_until, pre_image, res, _res$data$results$0$r, amount, destination, paymentAddr, payment_txid, sleep, output;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _getState4 = getState(), Platform = _getState4.Platform, Wallet = _getState4.Wallet;\n              wallet = Wallet.xWallet;\n\n              if (wallet) {\n                _context5.next = 5;\n                break;\n              }\n\n              console.error(\"Failed to send tip. private key is probably not set. Wallet undefined\");\n              return _context5.abrupt(\"return\");\n\n            case 5:\n              _context5.next = 7;\n              return axios.get(\"https://api.oip.io/oip/o5/location/request?id=\".concat(txid, \"&terms=\").concat(terms));\n\n            case 7:\n              response = _context5.sent;\n              _response$data = response.data, valid_until = _response$data.valid_until, pre_image = _response$data.pre_image;\n              _context5.next = 11;\n              return axios.get(\"https://api.oip.io/oip/o5/record/get/\".concat(txid));\n\n            case 11:\n              res = _context5.sent;\n              _res$data$results$0$r = res.data.results[0].record.details.tmpl_DE84D583, amount = _res$data$results$0$r.amount, destination = _res$data$results$0$r.destination;\n              paymentAddr = destination;\n              console.log(\"PURCHASE REFCORD!\");\n              _context5.prev = 15;\n\n              sleep = function sleep(ms) {\n                return new Promise(function (resolve) {\n                  return setTimeout(resolve, ms);\n                });\n              };\n\n              output = {\n                address: paymentAddr,\n                value: amount * 1e8 //satoshis\n\n              };\n              _context5.next = 20;\n              return dispatch(sendTx(output));\n\n            case 20:\n              payment_txid = _context5.sent;\n              _context5.next = 23;\n              return sleep(2000);\n\n            case 23:\n              _context5.next = 29;\n              break;\n\n            case 25:\n              _context5.prev = 25;\n              _context5.t0 = _context5[\"catch\"](15);\n              console.error(_context5.t0);\n              return _context5.abrupt(\"return\", {\n                'error': _context5.t0\n              });\n\n            case 29:\n              return _context5.abrupt(\"return\", dispatch(updatePurchasedTxid({\n                txid: txid,\n                payment_txid: payment_txid,\n                terms: terms\n              })));\n\n            case 30:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[15, 25]]);\n    }));\n\n    return function (_x9, _x10) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n}; //todo: To grab previous purchases:  find amd search addresses from commerical content; in wallet's transactions if so, grab the txid. push that into...\n// the global state.autoPay.purchased. \n// UseEffect will call proofOfPurchase and take care of the rest.\n\nexport var proofOfPurchase = function proofOfPurchase(_ref8) {\n  var payment_txid = _ref8.payment_txid,\n      txid = _ref8.txid,\n      terms = _ref8.terms;\n  return /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch, getState) {\n      var _getState5, Platform, Wallet, wallet, response, _response$data2, valid_until, pre_image, signature, publicAddress, body, res;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _getState5 = getState(), Platform = _getState5.Platform, Wallet = _getState5.Wallet;\n              wallet = Wallet.xWallet;\n\n              if (wallet) {\n                _context6.next = 5;\n                break;\n              }\n\n              console.error(\"Failed to send tip. private key is probably not set. Wallet undefined\");\n              return _context6.abrupt(\"return\");\n\n            case 5:\n              _context6.next = 7;\n              return axios.get(\"https://api.oip.io/oip/o5/location/request?id=\".concat(txid, \"&terms=\").concat(terms));\n\n            case 7:\n              response = _context6.sent;\n              _response$data2 = response.data, valid_until = _response$data2.valid_until, pre_image = _response$data2.pre_image;\n              signature = wallet.signMessage(pre_image);\n              publicAddress = getPubAddress(config.privatekey);\n              body = {\n                valid_until: valid_until,\n                id: txid,\n                term: terms,\n                pre_image: pre_image,\n                signature: signature,\n                payment_txid: payment_txid,\n                signing_address: publicAddress\n              };\n              _context6.prev = 12;\n              _context6.next = 15;\n              return axios.post(\"https://api.oip.io/oip/o5/location/proof?id=\".concat(txid, \"&terms=\").concat(terms), body);\n\n            case 15:\n              res = _context6.sent;\n              return _context6.abrupt(\"return\", res.data);\n\n            case 19:\n              _context6.prev = 19;\n              _context6.t0 = _context6[\"catch\"](12);\n              console.log(_context6.t0);\n\n            case 22:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[12, 19]]);\n    }));\n\n    return function (_x11, _x12) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n}; //! ****************************************************END PurchaseRecord Function **************************************************/","map":null,"metadata":{},"sourceType":"module"}