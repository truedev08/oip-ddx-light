{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useState, useEffect } from 'react';\nvar REGISTERED_PLATFORM_TMPL = 'tmpl_F6A8A55E';\n\nvar useRegisterPlatform = function useRegisterPlatform(_ref) {\n  var txid = _ref.txid,\n      daemon = _ref.daemon;\n\n  var _useState = useState(false),\n      registered = _useState[0],\n      setRegister = _useState[1];\n\n  var _useState2 = useState({}),\n      platformData = _useState2[0],\n      setPlatformData = _useState2[1]; // look up register platform record\n\n\n  useEffect(function () {\n    var getPlatformRecord = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(txid) {\n        var res, _res, success, payload, httpUrl, results, record, details;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return daemon.getOip5Record(txid);\n\n              case 3:\n                res = _context.sent;\n                _context.next = 10;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(\"Failed to register platform; Failed to get platform record \\n \".concat(_context.t0));\n                return _context.abrupt(\"return\");\n\n              case 10:\n                // console.log(res)\n                _res = res, success = _res.success, payload = _res.payload;\n\n                if (success) {\n                  results = payload.results;\n\n                  if (results[0]) {\n                    record = results[0].record;\n                    details = record.details;\n                    setPlatformData(details[REGISTERED_PLATFORM_TMPL]);\n                    httpUrl = platformData.httpUrl;\n                  }\n\n                  if (window) {\n                    if (window.location.hostname === httpUrl) {\n                      setRegister(true);\n                    }\n\n                    if (window.location.hostname === 'localhost') {\n                      setRegister(true);\n                    }\n                  }\n                }\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 6]]);\n      }));\n\n      return function getPlatformRecord(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    getPlatformRecord(txid);\n  }, []);\n  return {\n    registered: registered,\n    platformData: platformData\n  };\n};\n\nexport default useRegisterPlatform;","map":null,"metadata":{},"sourceType":"module"}