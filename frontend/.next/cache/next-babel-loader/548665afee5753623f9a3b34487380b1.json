{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as actions from '../actions/Autopay/creators';\nconst initalState = {\n  video: 100,\n  audio: 50,\n  photos: 30,\n  articles: 15,\n  other: 10,\n  purchased: []\n};\n\nconst Autopay = (state = initalState, action) => {\n  switch (action.type) {\n    case actions.THRESHOLDS:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case actions.UPDATE_INPUT:\n      {\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      }\n\n    case actions.PURCHASED_TXID:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          purchased: [...state.purchased, {\n            txid: action.payload.txid,\n            payment_txid: action.payload.payment_txid,\n            terms: action.payload.terms\n          }]\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default Autopay;","map":null,"metadata":{},"sourceType":"module"}