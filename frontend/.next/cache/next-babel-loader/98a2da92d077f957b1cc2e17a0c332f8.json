{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport config from '../config.js';\nimport InterfaceContainer from '../components/containers/InterfaceContainer';\nimport { fetchingRecordsError, fetchingTemplatesError, setDefaultRecords, setDefaultTemplates } from '../redux/actions/Explorer/creators';\nimport { getDefaultRecords, getDefaultTemplates } from '../redux/actions/Explorer/thunks';\nimport { getBalance, getExchangeRate } from '../redux/actions/Wallet/thunks';\nimport useRegisterPlatform from '../helpers/hooks/useRegisterPlatform';\nimport { registerPlatform, setPlatformData } from '../redux/actions/Platform/creators';\n\nconst Index = ({\n  defaultRecords,\n  defaultTemplates,\n  setDefaultRecords,\n  setDefaultTemplates,\n  fetchingRecordsError,\n  fetchingTemplatesError,\n  getExchangeRate,\n  getBalance,\n  daemonApi,\n  setPlatformData,\n  registerPlatform\n}) => {\n  const {\n    registered,\n    platformData\n  } = useRegisterPlatform({\n    txid: config.platformRegistrationTxid,\n    daemon: daemonApi\n  });\n  useEffect(() => {\n    let current = true;\n\n    if (current) {\n      if (registered) {\n        registerPlatform(registered);\n        setPlatformData(platformData);\n      }\n    }\n\n    return () => {\n      current = false;\n    };\n  }, [registered, platformData]);\n  useEffect(() => {\n    let current = true;\n\n    if (defaultRecords) {\n      const {\n        error\n      } = defaultRecords;\n\n      if (current) {\n        if (error) {\n          fetchingRecordsError(error);\n        } else setDefaultRecords(defaultRecords);\n      }\n    }\n\n    if (defaultTemplates) {\n      const {\n        error\n      } = defaultTemplates;\n\n      if (current) {\n        if (error) {\n          fetchingTemplatesError(error);\n        } else setDefaultTemplates(defaultTemplates);\n      }\n    }\n\n    return () => {\n      current = false;\n    };\n  }, []); // get flo balance and exchange rate\n\n  useEffect(() => {\n    let current = true;\n\n    const getXrAndBalance = async () => {\n      if (current) {\n        await getExchangeRate();\n        await getBalance();\n      }\n    };\n\n    getXrAndBalance();\n    return () => {\n      current = false;\n    };\n  }, []);\n  return __jsx(InterfaceContainer, null);\n};\n\nIndex.getInitialProps = async ctx => {\n  const {\n    req,\n    reduxStore\n  } = ctx;\n  const {\n    dispatch\n  } = reduxStore;\n  const isServer = !!req; // this is a part of render blocking I think\n\n  const recordsPayload = await dispatch(getDefaultRecords());\n  const templatesPayload = await dispatch(getDefaultTemplates());\n\n  if (isServer) {\n    return {\n      defaultRecords: recordsPayload,\n      defaultTemplates: templatesPayload\n    };\n  } else return {};\n};\n\nconst mapStateToProps = state => {\n  return {\n    daemonApi: state.Explorer.daemonApi\n  };\n};\n\nconst mapDispatchToProps = {\n  setDefaultTemplates,\n  setDefaultRecords,\n  fetchingRecordsError,\n  fetchingTemplatesError,\n  getExchangeRate,\n  getBalance,\n  setPlatformData,\n  registerPlatform\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","map":null,"metadata":{},"sourceType":"module"}