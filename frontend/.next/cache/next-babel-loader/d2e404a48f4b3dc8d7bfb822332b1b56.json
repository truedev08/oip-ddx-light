{"ast":null,"code":"import { useEffect, useState } from 'react';\n\nconst useWindowSize = ({\n  breakpoints = {\n    xs: 0,\n    sm: 600,\n    md: 960,\n    lg: 1280,\n    xl: 1920\n  },\n  initialWidth = Infinity,\n  initialHeight = Infinity\n}) => {\n  const isClient = false;\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    width: isClient ? window.innerWidth : initialWidth,\n    height: isClient ? window.innerHeight : initialHeight\n  });\n  useEffect(() => {\n    if (isClient) {\n      const handler = () => {\n        setState({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      };\n\n      window.addEventListener('resize', handler);\n      return () => window.removeEventListener('resize', handler);\n    } else {\n      return undefined;\n    }\n  }, []);\n  const {\n    height,\n    width\n  } = state;\n  let breakpoint;\n\n  if (width < breakpoints['sm']) {\n    breakpoint = 'xs';\n  } else if (width < breakpoints['md'] && width >= breakpoints['sm']) {\n    breakpoint = 'sm';\n  } else if (width < breakpoints['lg'] && width >= breakpoints['md']) {\n    breakpoint = 'md';\n  } else if (width < breakpoints['xl'] && width >= breakpoints['lg']) {\n    breakpoint = 'lg';\n  } else breakpoint = 'xl';\n\n  return {\n    height,\n    width,\n    breakpoint\n  };\n};\n\nexport default useWindowSize;","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/helpers/hooks/useWindowSize.js"],"names":["useEffect","useState","useWindowSize","breakpoints","xs","sm","md","lg","xl","initialWidth","Infinity","initialHeight","isClient","state","setState","width","window","innerWidth","height","innerHeight","handler","addEventListener","removeEventListener","undefined","breakpoint"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,WAAW,GAAG;AACrCC,IAAAA,EAAE,EAAE,CADiC;AAErCC,IAAAA,EAAE,EAAE,GAFiC;AAGrCC,IAAAA,EAAE,EAAE,GAHiC;AAIrCC,IAAAA,EAAE,EAAE,IAJiC;AAKrCC,IAAAA,EAAE,EAAE;AALiC,GAAhB;AAMpBC,EAAAA,YAAY,GAAGC,QANK;AAMKC,EAAAA,aAAa,GAAGD;AANrB,CAAD,KAMqC;AACzD,QAAME,QAAQ,QAAd;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBb,QAAQ,CAAC;AACjCc,IAAAA,KAAK,EAAEH,QAAQ,GAAGI,MAAM,CAACC,UAAV,GAAuBR,YADL;AAEjCS,IAAAA,MAAM,EAAEN,QAAQ,GAAGI,MAAM,CAACG,WAAV,GAAwBR;AAFP,GAAD,CAAlC;AAKAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,QAAJ,EAAc;AACZ,YAAMQ,OAAO,GAAG,MAAM;AACpBN,QAAAA,QAAQ,CAAC;AACPC,UAAAA,KAAK,EAAEC,MAAM,CAACC,UADP;AAEPC,UAAAA,MAAM,EAAEF,MAAM,CAACG;AAFR,SAAD,CAAR;AAID,OALD;;AAMAH,MAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkCD,OAAlC;AACA,aAAO,MAAMJ,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqCF,OAArC,CAAb;AACD,KATD,MASO;AACL,aAAOG,SAAP;AACD;AACF,GAbQ,EAaN,EAbM,CAAT;AAcA,QAAM;AAAEL,IAAAA,MAAF;AAAUH,IAAAA;AAAV,MAAoBF,KAA1B;AAEA,MAAIW,UAAJ;;AACA,MAAIT,KAAK,GAAGZ,WAAW,CAAC,IAAD,CAAvB,EAA+B;AAC7BqB,IAAAA,UAAU,GAAG,IAAb;AACD,GAFD,MAEO,IAAIT,KAAK,GAAGZ,WAAW,CAAC,IAAD,CAAnB,IAA6BY,KAAK,IAAIZ,WAAW,CAAC,IAAD,CAArD,EAA6D;AAClEqB,IAAAA,UAAU,GAAG,IAAb;AACD,GAFM,MAEA,IAAIT,KAAK,GAAGZ,WAAW,CAAC,IAAD,CAAnB,IAA6BY,KAAK,IAAIZ,WAAW,CAAC,IAAD,CAArD,EAA6D;AAClEqB,IAAAA,UAAU,GAAG,IAAb;AACD,GAFM,MAEA,IAAIT,KAAK,GAAGZ,WAAW,CAAC,IAAD,CAAnB,IAA6BY,KAAK,IAAIZ,WAAW,CAAC,IAAD,CAArD,EAA6D;AAClEqB,IAAAA,UAAU,GAAG,IAAb;AACD,GAFM,MAEAA,UAAU,GAAG,IAAb;;AAEP,SAAO;AAAEN,IAAAA,MAAF;AAAUH,IAAAA,KAAV;AAAiBS,IAAAA;AAAjB,GAAP;AACD,CAzCD;;AA2CA,eAAetB,aAAf","sourcesContent":["import { useEffect, useState } from 'react'\n\nconst useWindowSize = ({ breakpoints = {\n  xs: 0,\n  sm: 600,\n  md: 960,\n  lg: 1280,\n  xl: 1920\n}, initialWidth = Infinity, initialHeight = Infinity }) => {\n  const isClient = typeof window === 'object'\n  const [state, setState] = useState({\n    width: isClient ? window.innerWidth : initialWidth,\n    height: isClient ? window.innerHeight : initialHeight\n  })\n\n  useEffect(() => {\n    if (isClient) {\n      const handler = () => {\n        setState({\n          width: window.innerWidth,\n          height: window.innerHeight\n        })\n      }\n      window.addEventListener('resize', handler)\n      return () => window.removeEventListener('resize', handler)\n    } else {\n      return undefined\n    }\n  }, [])\n  const { height, width } = state\n\n  let breakpoint\n  if (width < breakpoints['sm']) {\n    breakpoint = 'xs'\n  } else if (width < breakpoints['md'] && width >= breakpoints['sm']) {\n    breakpoint = 'sm'\n  } else if (width < breakpoints['lg'] && width >= breakpoints['md']) {\n    breakpoint = 'md'\n  } else if (width < breakpoints['xl'] && width >= breakpoints['lg']) {\n    breakpoint = 'lg'\n  } else breakpoint = 'xl'\n\n  return { height, width, breakpoint }\n}\n\nexport default useWindowSize\n"]},"metadata":{},"sourceType":"module"}