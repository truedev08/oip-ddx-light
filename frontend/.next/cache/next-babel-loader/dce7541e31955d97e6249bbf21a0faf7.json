{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport config from '../config.js';\nimport InterfaceContainer from '../components/containers/InterfaceContainer';\nimport { fetchingRecordsError, fetchingTemplatesError, setDefaultRecords, setDefaultTemplates } from '../redux/actions/Explorer/creators';\nimport { getDefaultRecords, getDefaultTemplates } from '../redux/actions/Explorer/thunks';\nimport { getBalance, getExchangeRate } from '../redux/actions/Wallet/thunks';\nimport useRegisterPlatform from '../helpers/hooks/useRegisterPlatform';\nimport { registerPlatform, setPlatformData } from '../redux/actions/Platform/creators';\n\nvar Index = function Index(_ref) {\n  _s();\n\n  var defaultRecords = _ref.defaultRecords,\n      defaultTemplates = _ref.defaultTemplates,\n      setDefaultRecords = _ref.setDefaultRecords,\n      setDefaultTemplates = _ref.setDefaultTemplates,\n      fetchingRecordsError = _ref.fetchingRecordsError,\n      fetchingTemplatesError = _ref.fetchingTemplatesError,\n      getExchangeRate = _ref.getExchangeRate,\n      getBalance = _ref.getBalance,\n      daemonApi = _ref.daemonApi,\n      setPlatformData = _ref.setPlatformData,\n      registerPlatform = _ref.registerPlatform;\n\n  var _useRegisterPlatform = useRegisterPlatform({\n    txid: config.platformRegistrationTxid,\n    daemon: daemonApi\n  }),\n      registered = _useRegisterPlatform.registered,\n      platformData = _useRegisterPlatform.platformData;\n\n  useEffect(function () {\n    var current = true;\n\n    if (current) {\n      if (registered) {\n        registerPlatform(registered);\n        setPlatformData(platformData);\n      }\n    }\n\n    return function () {\n      current = false;\n    };\n  }, [registered, platformData]);\n  useEffect(function () {\n    var current = true;\n\n    if (defaultRecords) {\n      var error = defaultRecords.error;\n\n      if (current) {\n        if (error) {\n          fetchingRecordsError(error);\n        } else setDefaultRecords(defaultRecords);\n      }\n    }\n\n    if (defaultTemplates) {\n      var _error = defaultTemplates.error;\n\n      if (current) {\n        if (_error) {\n          fetchingTemplatesError(_error);\n        } else setDefaultTemplates(defaultTemplates);\n      }\n    }\n\n    return function () {\n      current = false;\n    };\n  }, []); // get flo balance and exchange rate\n\n  useEffect(function () {\n    var current = true;\n\n    var getXrAndBalance = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!current) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return getExchangeRate();\n\n              case 3:\n                _context.next = 5;\n                return getBalance();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getXrAndBalance() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    getXrAndBalance();\n    return function () {\n      current = false;\n    };\n  }, []);\n  return __jsx(InterfaceContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 10\n    }\n  });\n};\n\n_s(Index, \"a1EPhOvBh3Aiqwqv186IwEXxPEc=\", false, function () {\n  return [useRegisterPlatform];\n});\n\n_c = Index;\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ctx) {\n    var req, reduxStore, dispatch, isServer, recordsPayload, templatesPayload;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            req = ctx.req, reduxStore = ctx.reduxStore;\n            dispatch = reduxStore.dispatch;\n            isServer = !!req; // this is a part of render blocking I think\n\n            _context2.next = 5;\n            return dispatch(getDefaultRecords());\n\n          case 5:\n            recordsPayload = _context2.sent;\n            _context2.next = 8;\n            return dispatch(getDefaultTemplates());\n\n          case 8:\n            templatesPayload = _context2.sent;\n\n            if (!isServer) {\n              _context2.next = 13;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              defaultRecords: recordsPayload,\n              defaultTemplates: templatesPayload\n            });\n\n          case 13:\n            return _context2.abrupt(\"return\", {});\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nIndex.propTypes = {\n  defaultTemplates: PropTypes.object,\n  defaultRecords: PropTypes.object\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    daemonApi: state.Explorer.daemonApi\n  };\n};\n\nvar mapDispatchToProps = {\n  setDefaultTemplates: setDefaultTemplates,\n  setDefaultRecords: setDefaultRecords,\n  fetchingRecordsError: fetchingRecordsError,\n  fetchingTemplatesError: fetchingTemplatesError,\n  getExchangeRate: getExchangeRate,\n  getBalance: getBalance,\n  setPlatformData: setPlatformData,\n  registerPlatform: registerPlatform\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/pages/index.js"],"names":["React","useEffect","PropTypes","connect","config","InterfaceContainer","fetchingRecordsError","fetchingTemplatesError","setDefaultRecords","setDefaultTemplates","getDefaultRecords","getDefaultTemplates","getBalance","getExchangeRate","useRegisterPlatform","registerPlatform","setPlatformData","Index","defaultRecords","defaultTemplates","daemonApi","txid","platformRegistrationTxid","daemon","registered","platformData","current","error","getXrAndBalance","getInitialProps","ctx","req","reduxStore","dispatch","isServer","recordsPayload","templatesPayload","propTypes","object","mapStateToProps","state","Explorer","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport config from '../config.js'\nimport InterfaceContainer from '../components/containers/InterfaceContainer'\n\nimport {\n  fetchingRecordsError,\n  fetchingTemplatesError,\n  setDefaultRecords,\n  setDefaultTemplates\n} from '../redux/actions/Explorer/creators'\nimport { getDefaultRecords, getDefaultTemplates } from '../redux/actions/Explorer/thunks'\nimport { getBalance, getExchangeRate } from '../redux/actions/Wallet/thunks'\nimport useRegisterPlatform from '../helpers/hooks/useRegisterPlatform'\nimport { registerPlatform, setPlatformData } from '../redux/actions/Platform/creators'\n\nconst Index = ({\n  defaultRecords,\n  defaultTemplates,\n  setDefaultRecords,\n  setDefaultTemplates,\n  fetchingRecordsError,\n  fetchingTemplatesError,\n  getExchangeRate,\n  getBalance,\n  daemonApi,\n  setPlatformData,\n  registerPlatform\n}) => {\n  const { registered, platformData } = useRegisterPlatform({\n    txid: config.platformRegistrationTxid,\n    daemon: daemonApi\n  })\n  useEffect(() => {\n    let current = true\n    if (current) {\n      if (registered) {\n        registerPlatform(registered)\n        setPlatformData(platformData)\n      }\n    }\n    return () => {\n      current = false\n    }\n  }, [registered, platformData])\n\n  useEffect(() => {\n    let current = true\n    if (defaultRecords) {\n      const { error } = defaultRecords\n      if (current) {\n        if (error) {\n          fetchingRecordsError(error)\n        } else setDefaultRecords(defaultRecords)\n      }\n    }\n    if (defaultTemplates) {\n      const { error } = defaultTemplates\n      if (current) {\n        if (error) {\n          fetchingTemplatesError(error)\n        } else setDefaultTemplates(defaultTemplates)\n      }\n    }\n    return () => {\n      current = false\n    }\n  }, [])\n\n  // get flo balance and exchange rate\n  useEffect(() => {\n    let current = true\n    const getXrAndBalance = async () => {\n      if (current) {\n        await getExchangeRate()\n        await getBalance()\n      }\n    }\n    getXrAndBalance()\n    return () => {\n      current = false\n    }\n  }, [])\n\n  return <InterfaceContainer />\n}\n\nIndex.getInitialProps = async (ctx) => {\n  const { req, reduxStore } = ctx\n  const { dispatch } = reduxStore\n  const isServer = !!req\n\n  // this is a part of render blocking I think\n  const recordsPayload = await dispatch(getDefaultRecords())\n  const templatesPayload = await dispatch(getDefaultTemplates())\n\n  if (isServer) {\n    return {\n      defaultRecords: recordsPayload,\n      defaultTemplates: templatesPayload\n    }\n  } else return {}\n}\n\nIndex.propTypes = {\n  defaultTemplates: PropTypes.object,\n  defaultRecords: PropTypes.object\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    daemonApi: state.Explorer.daemonApi\n  }\n}\n\nconst mapDispatchToProps = {\n  setDefaultTemplates,\n  setDefaultRecords,\n  fetchingRecordsError,\n  fetchingTemplatesError,\n  getExchangeRate,\n  getBalance,\n  setPlatformData,\n  registerPlatform\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index)\n"]},"metadata":{},"sourceType":"module"}