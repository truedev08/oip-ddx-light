{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport withStyles from 'react-jss';\nimport { connect } from 'react-redux';\nimport SwitchViewer from '../components/views/dumb/switchViewer/SwitchViewer';\nimport RecordMap from '../components/views/dumb/recordMap/RecordMap';\nimport PaymentRow from '../components/views/dumb/paymentRow/PaymentRow';\nimport SideBar from '../components/views/dumb/sideBar/SideBar';\nimport { getBalance, getExchangeRate, tip, purchaseRecord, proofOfPurchase } from '../redux/actions/Wallet/thunks';\nimport { setActivePage } from '../redux/actions/Interface/creators';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    height: '100%'\n  },\n  [`@media (max-width: ${theme.breakpoints['md']}px)`]: {\n    root: {\n      flexDirection: 'column'\n    }\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    overflowY: 'auto',\n    overflowX: 'hidden',\n    flex: 1\n  },\n  recordViewer: {\n    display: 'flex',\n    flex: '1 0 700px',\n    flexDirection: 'column',\n    maxHeight: 850 // height: 1000\n\n  },\n  recordsByPublisher: {\n    display: 'flex',\n    flex: 1,\n    minHeight: '50%',\n    flexDirection: 'column',\n    '& h3': {\n      paddingLeft: 30,\n      color: theme.palette.greyscale(0.8)\n    }\n  }\n});\n\nconst Record = ({\n  classes,\n  recordPayload,\n  daemonApi,\n  registered,\n  platformData,\n  tip,\n  showOnlyVerifiedPublishers,\n  setActivePage,\n  getExchangeRate,\n  getBalance,\n  autoPay,\n  purchaseRecord,\n  proofOfPurchase\n}) => {\n  useEffect(() => {\n    setActivePage(null);\n  }, []);\n  const {\n    0: purchasedData,\n    1: setPurchasedData\n  } = useState({\n    proofTxid: '',\n    data: '',\n    paid: false\n  });\n  useEffect(() => {\n    if (autoPay.purchased) {\n      let {\n        txid\n      } = recordPayload.meta;\n      let found = autoPay.purchased.find(purchase => {\n        return purchase.txid === txid;\n      });\n\n      if (found) {\n        let {\n          txid,\n          payment_txid,\n          terms\n        } = found;\n        proofOfPurchase({\n          txid,\n          payment_txid,\n          terms\n        }).then(data => {\n          setPurchasedData({\n            proofTxid: payment_txid,\n            data: data,\n            paid: true\n          });\n        }).catch(err => console.log(err));\n      }\n    }\n  }, []); // get records by the same publisher\n\n  const {\n    0: recordsByPublisher,\n    1: setRecordsByPublisher\n  } = useState([]);\n  useEffect(() => {\n    let current = true;\n\n    const getRecordsByPublisher = async () => {\n      const {\n        meta\n      } = recordPayload;\n      const q = `meta.signed_by:${meta.signed_by}`;\n      let res;\n\n      try {\n        res = await daemonApi.searchOip5Records({\n          q,\n          limit: 100\n        });\n      } catch (err) {\n        console.error(err);\n      }\n\n      if (!res) return;\n      const {\n        success,\n        payload,\n        error\n      } = res;\n\n      if (success) {\n        const {\n          results\n        } = payload;\n\n        if (results.length > 0) {\n          if (current) {\n            setRecordsByPublisher(results);\n          }\n        }\n      } else {\n        console.error(error);\n      }\n    };\n\n    if (recordPayload) {\n      try {\n        getRecordsByPublisher();\n      } catch (err) {\n        console.error(`Failed to get records by publisher: \\n ${err}`);\n      }\n    }\n\n    return () => {\n      current = false;\n    };\n  }, []); // get flo balance and exchange rate\n\n  useEffect(() => {\n    let current = true;\n\n    const getXrAndBalance = async () => {\n      if (current) {\n        await getExchangeRate();\n        await getBalance();\n      }\n    };\n\n    getXrAndBalance();\n    return () => {\n      current = false;\n    };\n  }, []);\n\n  async function isVerified({\n    pubAddr,\n    templateName,\n    apiUrl,\n    localhost\n  }) {\n    try {\n      return await daemonApi.isVerifiedPublisher({\n        pubAddr,\n        templateName,\n        apiUrl,\n        localhost\n      });\n    } catch (err) {\n      console.error(`Failed to verify pub address: ${pubAddr}: \\n ${err}`);\n      return {\n        success: false,\n        error: err\n      };\n    }\n  } // check if record includes a payment template\n\n\n  const TMPL_PAYMENT = 'tmpl_3084380E';\n  let payment = false;\n\n  if (recordPayload.record.details[TMPL_PAYMENT]) {\n    payment = true;\n  }\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(SideBar, {\n    reroute: true\n  }), __jsx(\"div\", {\n    className: classes.content\n  }, __jsx(\"div\", {\n    className: classes.recordViewer\n  }, __jsx(SwitchViewer, {\n    recordPayload: recordPayload,\n    purchasedData: purchasedData\n  }), payment && __jsx(PaymentRow, {\n    paymentTemplate: recordPayload.record.details[TMPL_PAYMENT],\n    registered: registered,\n    platformData: platformData,\n    paymentAddress: recordPayload.meta.signed_by,\n    tip: tip,\n    purchasedData: purchasedData\n  })), __jsx(\"div\", {\n    className: classes.recordsByPublisher\n  }, __jsx(RecordMap, {\n    records: recordsByPublisher,\n    isVerified: isVerified,\n    showOnlyVerifiedPublishers: showOnlyVerifiedPublishers,\n    autoPay: autoPay,\n    purchaseRecord: purchaseRecord,\n    proofOfPurchase: proofOfPurchase\n  }))));\n};\n\nRecord.getInitialProps = async ctx => {\n  const {\n    reduxStore,\n    query\n  } = ctx;\n  const {\n    getState\n  } = reduxStore; // const isServer = !!req\n\n  let state = getState();\n  const {\n    Explorer\n  } = state;\n  const txid = query.txid;\n  let response = await Explorer.daemonApi.getOip5Record(txid);\n  const {\n    success,\n    payload,\n    error\n  } = response;\n\n  if (success) {\n    const {\n      results\n    } = payload;\n\n    if (results[0]) {\n      return {\n        recordPayload: results[0]\n      };\n    }\n  } else {\n    console.error(error);\n  }\n\n  return {};\n};\n\nfunction mapStateToProps(state) {\n  return {\n    registered: state.Platform.registered,\n    platformData: state.Platform.platformData,\n    showOnlyVerifiedPublishers: state.Interface.showOnlyVerifiedPublishers,\n    daemonApi: state.Explorer.daemonApi,\n    autoPay: state.Autopay\n  };\n}\n\nconst mapDispatchToProps = {\n  tip,\n  setActivePage,\n  getExchangeRate,\n  getBalance,\n  purchaseRecord,\n  proofOfPurchase\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Record));","map":null,"metadata":{},"sourceType":"module"}