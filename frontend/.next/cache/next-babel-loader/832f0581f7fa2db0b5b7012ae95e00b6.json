{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/components/views/dumb/pdfViewer/PdfViewer.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport getIpfsUrl from '../../../../helpers/getIpfsUrl';\nimport withStyles from 'react-jss';\nimport { Document, Page } from 'react-pdf';\n/*******************************************npm install react-pdf or yarn add react-pdf */\n\nvar styles = function styles() {\n  return {\n    pdfCont: {\n      display: 'flex',\n      justifyContent: 'center',\n      flexDirection: 'row'\n    },\n    pdfSelf: {\n      display: 'flex',\n      '& > canvas': {\n        height: [800, '!important'],\n        width: [700, '!important']\n      }\n    },\n    pdfNone: {\n      display: 'none',\n      '& > canvas': {\n        display: 'none',\n        height: [800, '!important'],\n        width: [700, '!important']\n      }\n    },\n    '@media (max-device-width: 1600px)': {\n      pdfSelf: {\n        display: 'flex',\n        '& > canvas': {\n          height: [600, '!important'],\n          width: [400, '!important']\n        }\n      }\n    }\n  };\n};\n/**********************recordPayload prop which holds template information, passed from switchViewer, classes is for the jss styles *********************/\n\n\nvar PdfViewer = function PdfViewer(_ref) {\n  _s();\n\n  var recordPayload = _ref.recordPayload,\n      classes = _ref.classes;\n\n  /**********************Set state with Hooks *********************/\n  var _useState = useState(1),\n      pageNum = _useState[0],\n      setPageNum = _useState[1];\n\n  var _useState2 = useState(1),\n      numPages = _useState2[0],\n      setNumPages = _useState2[1];\n  /**********************Get address and filename(if there is one) from props *********************/\n\n\n  var addressPull = recordPayload.record.details.tmpl_8EE48C00.addressDirectory;\n  var pdfFile = recordPayload.record.details.tmpl_8EE48C00.fileName;\n  /**********************Use getIfps to convert address and filename into accessable URL *********************/\n\n  var pdfSrc = getIpfsUrl({\n    dirName: addressPull,\n    pdfFile: pdfFile\n  });\n  /**********************Function to get the number of pages of the PDF*********************/\n\n  var onDocumentLoadSuccess = function onDocumentLoadSuccess(_ref2) {\n    var numPages = _ref2.numPages;\n    setNumPages(numPages);\n  };\n\n  var nextPage = function nextPage() {\n    if (pageNum === numPages || pageNum === numPages - 1) {\n      setPageNum(pageNum);\n    } else if (pageNum > 1) {\n      setPageNum(pageNum + 2);\n    } else {\n      setPageNum(pageNum + 1);\n    }\n  };\n\n  var backPage = function backPage() {\n    if (pageNum === 2) {\n      setPageNum(pageNum - 1);\n    } else if (pageNum === 1) {\n      setPageNum(pageNum);\n    } else {\n      setPageNum(pageNum - 2);\n    }\n  };\n  /**Console logs to check if URL and numPages successfully updated*/\n\n\n  console.log(pdfSrc); // console.log(numPages);\n\n  console.log(pageNum);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, __jsx(Document, {\n    file: pdfSrc,\n    className: classes.pdfCont,\n    onLoadSuccess: onDocumentLoadSuccess,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return backPage();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Back\"), __jsx(Page, {\n    pageNumber: pageNum,\n    className: classes.pdfSelf,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), __jsx(Page, {\n    pageNumber: pageNum + 1 > numPages ? 1 : pageNum + 1,\n    className: pageNum > 1 ? classes.pdfSelf : classes.pdfNone,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Next\")));\n};\n\n_s(PdfViewer, \"IgN4R+qbFsyAaoGzxUTfMO34N1w=\");\n\n_c = PdfViewer;\nexport default withStyles(styles)(PdfViewer);\n\nvar _c;\n\n$RefreshReg$(_c, \"PdfViewer\");","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/components/views/dumb/pdfViewer/PdfViewer.js"],"names":["React","useState","getIpfsUrl","withStyles","Document","Page","styles","pdfCont","display","justifyContent","flexDirection","pdfSelf","height","width","pdfNone","PdfViewer","recordPayload","classes","pageNum","setPageNum","numPages","setNumPages","addressPull","record","details","tmpl_8EE48C00","addressDirectory","pdfFile","fileName","pdfSrc","dirName","onDocumentLoadSuccess","nextPage","backPage","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport getIpfsUrl from '../../../../helpers/getIpfsUrl';\nimport withStyles from 'react-jss';\nimport { Document, Page } from 'react-pdf';\n\n/*******************************************npm install react-pdf or yarn add react-pdf */\n\nconst styles = () => ({\n  pdfCont: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  pdfSelf: {\n    display: 'flex',\n    '& > canvas': {\n      height: [800, '!important'],\n      width: [700, '!important']\n    }\n  },\n  pdfNone: {\n    display: 'none',\n    '& > canvas': {\n      display: 'none',\n      height: [800, '!important'],\n      width: [700, '!important']\n    }\n  },\n  '@media (max-device-width: 1600px)': {\n    pdfSelf: {\n      display: 'flex',\n      '& > canvas': {\n        height: [600, '!important'],\n        width: [400, '!important']\n      }\n    }\n  }\n});\n\n/**********************recordPayload prop which holds template information, passed from switchViewer, classes is for the jss styles *********************/\nconst PdfViewer = ({ recordPayload, classes }) => {\n  /**********************Set state with Hooks *********************/\n  const [pageNum, setPageNum] = useState(1);\n  const [numPages, setNumPages] = useState(1);\n\n  /**********************Get address and filename(if there is one) from props *********************/\n  const addressPull =\n    recordPayload.record.details.tmpl_8EE48C00.addressDirectory;\n  const pdfFile = recordPayload.record.details.tmpl_8EE48C00.fileName;\n\n  /**********************Use getIfps to convert address and filename into accessable URL *********************/\n  const pdfSrc = getIpfsUrl({ dirName: addressPull, pdfFile });\n\n  /**********************Function to get the number of pages of the PDF*********************/\n  const onDocumentLoadSuccess = ({ numPages }) => {\n    setNumPages(numPages);\n  };\n\n  const nextPage = () => {\n    if (pageNum === numPages || pageNum === numPages - 1) {\n      setPageNum(pageNum);\n    } else if (pageNum > 1) {\n      setPageNum(pageNum + 2);\n    } else {\n      setPageNum(pageNum + 1);\n    }\n  };\n  const backPage = () => {\n    if (pageNum === 2) {\n      setPageNum(pageNum - 1);\n    } else if (pageNum === 1) {\n      setPageNum(pageNum);\n    } else {\n      setPageNum(pageNum - 2);\n    }\n  };\n\n  /**Console logs to check if URL and numPages successfully updated*/\n  console.log(pdfSrc);\n  // console.log(numPages);\n  console.log(pageNum);\n\n  return (\n    <div>\n      {/**onLoadSuccess is built in with React-Pdf, use it to call function to set state of numPages*/}\n      <Document\n        file={pdfSrc}\n        className={classes.pdfCont}\n        onLoadSuccess={onDocumentLoadSuccess}\n      >\n        {/**On click calls setPageNumber to update the state, ternary to stop updating state if no pages to access*/}\n        <button onClick={() => backPage()}>Back</button>\n        <Page pageNumber={pageNum} className={classes.pdfSelf} />\n        {/**Conditional to show first page if odd number of pages, otherwise you will get No page found, thought it looked good with front and back as end */}\n        <Page\n          pageNumber={pageNum + 1 > numPages ? 1 : pageNum + 1}\n          className={pageNum > 1 ? classes.pdfSelf : classes.pdfNone}\n        />\n        <button onClick={() => nextPage()}>Next</button>\n      </Document>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(PdfViewer);\n"]},"metadata":{},"sourceType":"module"}