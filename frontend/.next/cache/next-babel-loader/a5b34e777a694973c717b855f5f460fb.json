{"ast":null,"code":"var _jsxFileName = \"/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport config from '../config.js';\nimport InterfaceContainer from '../components/containers/InterfaceContainer';\nimport { fetchingRecordsError, fetchingTemplatesError, setDefaultRecords, setDefaultTemplates } from '../redux/actions/Explorer/creators';\nimport { getDefaultRecords, getDefaultTemplates } from '../redux/actions/Explorer/thunks';\nimport { getBalance, getExchangeRate } from '../redux/actions/Wallet/thunks';\nimport useRegisterPlatform from '../helpers/hooks/useRegisterPlatform';\nimport { registerPlatform, setPlatformData } from '../redux/actions/Platform/creators';\n\nconst Index = ({\n  defaultRecords,\n  defaultTemplates,\n  setDefaultRecords,\n  setDefaultTemplates,\n  fetchingRecordsError,\n  fetchingTemplatesError,\n  getExchangeRate,\n  getBalance,\n  daemonApi,\n  setPlatformData,\n  registerPlatform\n}) => {\n  const {\n    registered,\n    platformData\n  } = useRegisterPlatform({\n    txid: config.platformRegistrationTxid,\n    daemon: daemonApi\n  });\n  useEffect(() => {\n    let current = true;\n\n    if (current) {\n      if (registered) {\n        registerPlatform(registered);\n        setPlatformData(platformData);\n      }\n    }\n\n    return () => {\n      current = false;\n    };\n  }, [registered, platformData]);\n  useEffect(() => {\n    let current = true;\n\n    if (defaultRecords) {\n      const {\n        error\n      } = defaultRecords;\n\n      if (current) {\n        if (error) {\n          fetchingRecordsError(error);\n        } else setDefaultRecords(defaultRecords);\n      }\n    }\n\n    if (defaultTemplates) {\n      const {\n        error\n      } = defaultTemplates;\n\n      if (current) {\n        if (error) {\n          fetchingTemplatesError(error);\n        } else setDefaultTemplates(defaultTemplates);\n      }\n    }\n\n    return () => {\n      current = false;\n    };\n  }, []); // get flo balance and exchange rate\n\n  useEffect(() => {\n    let current = true;\n\n    const getXrAndBalance = async () => {\n      if (current) {\n        await getExchangeRate();\n        await getBalance();\n      }\n    };\n\n    getXrAndBalance();\n    return () => {\n      current = false;\n    };\n  }, []);\n  return __jsx(InterfaceContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 10\n    }\n  });\n};\n\nIndex.getInitialProps = async ctx => {\n  const {\n    req,\n    reduxStore\n  } = ctx;\n  const {\n    dispatch\n  } = reduxStore;\n  const isServer = !!req; // this is a part of render blocking I think\n\n  const recordsPayload = await dispatch(getDefaultRecords());\n  const templatesPayload = await dispatch(getDefaultTemplates());\n\n  if (isServer) {\n    return {\n      defaultRecords: recordsPayload,\n      defaultTemplates: templatesPayload\n    };\n  } else return {};\n};\n\nIndex.propTypes = {\n  defaultTemplates: PropTypes.object,\n  defaultRecords: PropTypes.object\n};\n\nconst mapStateToProps = state => {\n  return {\n    daemonApi: state.Explorer.daemonApi\n  };\n};\n\nconst mapDispatchToProps = {\n  setDefaultTemplates,\n  setDefaultRecords,\n  fetchingRecordsError,\n  fetchingTemplatesError,\n  getExchangeRate,\n  getBalance,\n  setPlatformData,\n  registerPlatform\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/pages/index.js"],"names":["React","useEffect","PropTypes","connect","config","InterfaceContainer","fetchingRecordsError","fetchingTemplatesError","setDefaultRecords","setDefaultTemplates","getDefaultRecords","getDefaultTemplates","getBalance","getExchangeRate","useRegisterPlatform","registerPlatform","setPlatformData","Index","defaultRecords","defaultTemplates","daemonApi","registered","platformData","txid","platformRegistrationTxid","daemon","current","error","getXrAndBalance","getInitialProps","ctx","req","reduxStore","dispatch","isServer","recordsPayload","templatesPayload","propTypes","object","mapStateToProps","state","Explorer","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport config from '../config.js'\nimport InterfaceContainer from '../components/containers/InterfaceContainer'\n\nimport {\n  fetchingRecordsError,\n  fetchingTemplatesError,\n  setDefaultRecords,\n  setDefaultTemplates\n} from '../redux/actions/Explorer/creators'\nimport { getDefaultRecords, getDefaultTemplates } from '../redux/actions/Explorer/thunks'\nimport { getBalance, getExchangeRate } from '../redux/actions/Wallet/thunks'\nimport useRegisterPlatform from '../helpers/hooks/useRegisterPlatform'\nimport { registerPlatform, setPlatformData } from '../redux/actions/Platform/creators'\n\nconst Index = ({\n  defaultRecords,\n  defaultTemplates,\n  setDefaultRecords,\n  setDefaultTemplates,\n  fetchingRecordsError,\n  fetchingTemplatesError,\n  getExchangeRate,\n  getBalance,\n  daemonApi,\n  setPlatformData,\n  registerPlatform\n}) => {\n  const { registered, platformData } = useRegisterPlatform({\n    txid: config.platformRegistrationTxid,\n    daemon: daemonApi\n  })\n  useEffect(() => {\n    let current = true\n    if (current) {\n      if (registered) {\n        registerPlatform(registered)\n        setPlatformData(platformData)\n      }\n    }\n    return () => {\n      current = false\n    }\n  }, [registered, platformData])\n\n  useEffect(() => {\n    let current = true\n    if (defaultRecords) {\n      const { error } = defaultRecords\n      if (current) {\n        if (error) {\n          fetchingRecordsError(error)\n        } else setDefaultRecords(defaultRecords)\n      }\n    }\n    if (defaultTemplates) {\n      const { error } = defaultTemplates\n      if (current) {\n        if (error) {\n          fetchingTemplatesError(error)\n        } else setDefaultTemplates(defaultTemplates)\n      }\n    }\n    return () => {\n      current = false\n    }\n  }, [])\n\n  // get flo balance and exchange rate\n  useEffect(() => {\n    let current = true\n    const getXrAndBalance = async () => {\n      if (current) {\n        await getExchangeRate()\n        await getBalance()\n      }\n    }\n    getXrAndBalance()\n    return () => {\n      current = false\n    }\n  }, [])\n\n  return <InterfaceContainer />\n}\n\nIndex.getInitialProps = async (ctx) => {\n  const { req, reduxStore } = ctx\n  const { dispatch } = reduxStore\n  const isServer = !!req\n\n  // this is a part of render blocking I think\n  const recordsPayload = await dispatch(getDefaultRecords())\n  const templatesPayload = await dispatch(getDefaultTemplates())\n\n  if (isServer) {\n    return {\n      defaultRecords: recordsPayload,\n      defaultTemplates: templatesPayload\n    }\n  } else return {}\n}\n\nIndex.propTypes = {\n  defaultTemplates: PropTypes.object,\n  defaultRecords: PropTypes.object\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    daemonApi: state.Explorer.daemonApi\n  }\n}\n\nconst mapDispatchToProps = {\n  setDefaultTemplates,\n  setDefaultRecords,\n  fetchingRecordsError,\n  fetchingTemplatesError,\n  getExchangeRate,\n  getBalance,\n  setPlatformData,\n  registerPlatform\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index)\n"]},"metadata":{},"sourceType":"module"}