{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport Explorer from '../views/wrappers/Explorer';\nimport { DEFAULT, SEARCH, setMode } from '../../redux/actions/Interface/creators';\nimport { searchRecords, searchTemplates } from '../../redux/actions/Explorer/thunks';\nimport { extendTemplates, publishRecord, publishTemplate } from '../../redux/actions/Publisher/creators';\nvar Records = 'Records';\nvar Templates = 'Templates';\n\nvar ExplorerContainer = function ExplorerContainer(_ref) {\n  var defaultRecords = _ref.defaultRecords,\n      defaultTemplates = _ref.defaultTemplates,\n      searchedRecords = _ref.searchedRecords,\n      searchedTemplates = _ref.searchedTemplates,\n      mode = _ref.mode,\n      defaultRecordPage = _ref.defaultRecordPage,\n      defaultTemplatePage = _ref.defaultTemplatePage,\n      searchedRecordPage = _ref.searchedRecordPage,\n      searchedTemplatePage = _ref.searchedTemplatePage,\n      defaultRecordKeys = _ref.defaultRecordKeys,\n      defaultTemplateKeys = _ref.defaultTemplateKeys,\n      searchedRecordKeys = _ref.searchedRecordKeys,\n      searchedTemplateKeys = _ref.searchedTemplateKeys,\n      recordsFetching = _ref.recordsFetching,\n      recordsSuccess = _ref.recordsSuccess,\n      recordsError = _ref.recordsError,\n      templatesFetching = _ref.templatesFetching,\n      templatesSuccess = _ref.templatesSuccess,\n      templatesError = _ref.templatesError,\n      searchRecords = _ref.searchRecords,\n      searchTemplates = _ref.searchTemplates,\n      setMode = _ref.setMode,\n      publishRecord = _ref.publishRecord,\n      publishTemplate = _ref.publishTemplate,\n      extendTemplates = _ref.extendTemplates,\n      daemonApi = _ref.daemonApi,\n      showOnlyVerifiedPublishers = _ref.showOnlyVerifiedPublishers;\n\n  var _useState = useState(''),\n      searchInput = _useState[0],\n      setSearchInput = _useState[1];\n\n  var _useState2 = useState(Records),\n      selectOption = _useState2[0],\n      setSelectOption = _useState2[1];\n\n  function isVerified(_x) {\n    return _isVerified.apply(this, arguments);\n  }\n\n  function _isVerified() {\n    _isVerified = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var pubAddr, templateName, apiUrl, localhost;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              pubAddr = _ref2.pubAddr, templateName = _ref2.templateName, apiUrl = _ref2.apiUrl, localhost = _ref2.localhost;\n              _context.prev = 1;\n              _context.next = 4;\n              return daemonApi.isVerifiedPublisher({\n                pubAddr: pubAddr,\n                templateName: templateName,\n                apiUrl: apiUrl,\n                localhost: localhost\n              });\n\n            case 4:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              console.error(\"Failed to verify pub address: \".concat(pubAddr, \": \\n \").concat(_context.t0));\n              return _context.abrupt(\"return\", {\n                success: false,\n                error: _context.t0\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 7]]);\n    }));\n    return _isVerified.apply(this, arguments);\n  }\n\n  var _useState3 = useState({}),\n      selectedTemplates = _useState3[0],\n      setSelectedTemplates = _useState3[1];\n\n  function handleSelectTemplate(_ref3) {\n    var id = _ref3.id,\n        template = _ref3.template;\n\n    if (selectedTemplates[id]) {\n      var _ = selectedTemplates[id],\n          newSelection = _objectWithoutProperties(selectedTemplates, [id].map(_toPropertyKey));\n\n      setSelectedTemplates(newSelection);\n    } else {\n      setSelectedTemplates(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, _defineProperty({}, id, template));\n      });\n    }\n  }\n\n  function handlePublishRecordWithTemplates() {\n    var templates = [];\n\n    for (var tmpl in selectedTemplates) {\n      if (selectedTemplates.hasOwnProperty(tmpl)) {\n        templates.push(selectedTemplates[tmpl]);\n      }\n    }\n\n    publishRecord(templates);\n  }\n\n  function handleExtendTemplates() {\n    // get template IDs\n    var ids = [];\n\n    for (var tmpl in selectedTemplates) {\n      if (selectedTemplates.hasOwnProperty(tmpl)) {\n        ids.push(selectedTemplates[tmpl].identifier);\n      }\n    }\n\n    publishTemplate();\n    extendTemplates(ids);\n  }\n\n  function handleSearchInput(e) {\n    setSearchInput(e.target.value);\n  }\n\n  function handleSelectOption(e) {\n    setSelectOption(e.target.value);\n  }\n\n  function handleSearchSubmit() {\n    if (searchInput === '') {\n      setMode(DEFAULT);\n    } else {\n      if (selectOption === Records) {\n        setMode(SEARCH);\n        searchRecords(searchInput);\n      }\n\n      if (selectOption === Templates) {\n        setMode(SEARCH);\n        searchTemplates(searchInput);\n      }\n    }\n  }\n\n  var records, templates;\n\n  if (mode === DEFAULT) {\n    records = defaultRecords;\n    var recordKey = defaultRecordKeys[defaultRecordPage];\n    records = records[recordKey];\n    templates = defaultTemplates;\n    var templateKey = defaultTemplateKeys[defaultTemplatePage];\n    templates = templates[templateKey];\n  } else if (mode === SEARCH) {\n    records = searchedRecords;\n    var _recordKey = searchedRecordKeys[searchedRecordPage];\n    records = records[_recordKey];\n    templates = searchedTemplates;\n    var _templateKey = searchedTemplateKeys[searchedTemplatePage];\n    templates = templates[_templateKey];\n  }\n\n  return __jsx(Explorer, {\n    records: records,\n    templates: templates,\n    searchInput: searchInput,\n    selectOption: selectOption,\n    handleSearchInput: handleSearchInput,\n    handleSelectOption: handleSelectOption,\n    handleSearchSubmit: handleSearchSubmit,\n    recordsFetching: recordsFetching,\n    recordsSuccess: recordsSuccess,\n    recordsError: recordsError,\n    templatesFetching: templatesFetching,\n    templatesSuccess: templatesSuccess,\n    templatesError: templatesError,\n    publishRecord: publishRecord,\n    publishTemplate: publishTemplate,\n    extendTemplates: extendTemplates,\n    handleSelectTemplate: handleSelectTemplate,\n    selectedTemplates: selectedTemplates,\n    handlePublishRecordWithTemplates: handlePublishRecordWithTemplates,\n    handleExtendTemplates: handleExtendTemplates,\n    isVerified: isVerified,\n    showOnlyVerifiedPublishers: showOnlyVerifiedPublishers\n  });\n};\n\nfunction mapStateToProps(state) {\n  // toDo: note:: separate templates and records\n  return {\n    daemonApi: state.Explorer.daemonApi,\n    defaultRecords: state.Explorer.defaultRecords,\n    defaultTemplates: state.Explorer.defaultTemplates,\n    searchedRecords: state.Explorer.searchedRecords,\n    searchedTemplates: state.Explorer.searchedTemplates,\n    mode: state.Interface.mode,\n    defaultRecordPage: state.Interface.defaultRecordPage,\n    defaultTemplatePage: state.Interface.defaultTemplatePage,\n    searchedRecordPage: state.Interface.searchedRecordPage,\n    searchedTemplatePage: state.Interface.searchedTemplatePage,\n    defaultRecordKeys: state.Explorer.defaultRecordKeys,\n    defaultTemplateKeys: state.Explorer.defaultTemplateKeys,\n    searchedRecordKeys: state.Explorer.searchedRecordKeys,\n    searchedTemplateKeys: state.Explorer.searchedTemplateKeys,\n    recordsFetching: state.Explorer.recordsFetching,\n    recordsSuccess: state.Explorer.recordsSuccess,\n    recordsError: state.Explorer.recordsError,\n    templatesFetching: state.Explorer.templatesFetching,\n    templatesSuccess: state.Explorer.templatesSuccess,\n    templatesError: state.Explorer.templatesError,\n    showOnlyVerifiedPublishers: state.Interface.showOnlyVerifiedPublishers\n  };\n}\n\nvar mapDispatchToProps = {\n  setMode: setMode,\n  searchRecords: searchRecords,\n  searchTemplates: searchTemplates,\n  publishRecord: publishRecord,\n  publishTemplate: publishTemplate,\n  extendTemplates: extendTemplates\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerContainer);","map":null,"metadata":{},"sourceType":"module"}