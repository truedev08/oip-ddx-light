{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { DaemonApi } from 'js-oip';\nimport config from '../../config.js';\nimport * as actions from '../actions/Explorer/creators';\nconst initialState = {\n  daemonApi: new DaemonApi(config.daemonApiUrl),\n  templateFilter: config.templateFilter,\n  templateOperand: config.templateOperand,\n  defaultRecordKeys: [],\n  defaultTemplateKeys: [],\n  searchedRecordKeys: [],\n  searchedTemplateKeys: [],\n  searchedRecords: {},\n  searchedTemplates: {},\n  defaultTemplates: {},\n  defaultRecords: {},\n  recordsFetching: false,\n  recordsSuccess: false,\n  recordsError: false,\n  recordsErrorMessage: undefined,\n  templatesFetching: false,\n  templatesSuccess: false,\n  templatesError: false,\n  templatesErrorMessage: undefined\n};\n\nconst Explorer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.SET_DAEMON_API:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          daemonApi: action.daemon\n        });\n      }\n\n    case actions.SET_DEFAULT_RECORDS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        defaultRecords: _objectSpread(_objectSpread({}, state.defaultRecords), {}, {\n          [action.payload.next]: action.payload\n        }),\n        defaultRecordKeys: [...state.defaultRecordKeys, action.payload.next]\n      });\n\n    case actions.SET_DEFAULT_TEMPLATES:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        defaultTemplates: _objectSpread(_objectSpread({}, state.defaultTemplates), {}, {\n          [action.payload.next]: action.payload\n        }),\n        defaultTemplateKeys: [...state.defaultTemplateKeys, action.payload.next]\n      });\n\n    case actions.SET_SEARCHED_RECORDS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          searchedRecords: {\n            [action.payload.next]: action.payload\n          },\n          searchedRecordKeys: [action.payload.next]\n        });\n      }\n\n    case actions.SET_SEARCHED_TEMPLATES:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        searchedTemplates: {\n          [action.payload.next]: action.payload\n        },\n        searchedTemplateKeys: [action.payload.next]\n      });\n\n    case actions.FETCHING_RECORDS_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        recordsFetching: false,\n        recordsError: false,\n        recordsErrorMessage: null,\n        recordsSuccess: true\n      });\n\n    case actions.FETCHING_RECORDS_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        recordsFetching: false,\n        recordsError: true,\n        recordsErrorMessage: action.error,\n        recordsSuccess: false\n      });\n\n    case actions.FETCHING_RECORDS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        recordsFetching: true,\n        recordsError: false,\n        recordsErrorMessage: null,\n        recordsSuccess: false\n      });\n\n    case actions.FETCHING_TEMPLATES:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        templatesError: false,\n        templatesFetching: true,\n        templatesSuccess: false,\n        templatesErrorMessage: null\n      });\n\n    case actions.FETCHING_TEMPLATES_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        templatesError: false,\n        templatesFetching: false,\n        templatesSuccess: true,\n        templatesErrorMessage: null\n      });\n\n    case actions.FETCHING_TEMPLATES_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        templatesError: true,\n        templatesFetching: false,\n        templatesSuccess: false,\n        templatesErrorMessage: action.error\n      });\n\n    case actions.CLEAR_FETCH_STATUS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        templatesError: false,\n        templatesFetching: false,\n        templatesSuccess: false,\n        templatesErrorMessage: null,\n        recordsFetching: false,\n        recordsError: false,\n        recordsErrorMessage: null,\n        recordsSuccess: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default Explorer;","map":null,"metadata":{},"sourceType":"module"}