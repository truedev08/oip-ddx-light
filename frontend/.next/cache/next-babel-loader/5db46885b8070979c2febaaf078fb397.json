{"ast":null,"code":"var _jsxFileName = \"/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/components/views/dumb/videoViewer/VideoViewer.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect } from 'react';\nimport withStyles from 'react-jss';\nimport PropTypes from 'prop-types';\nimport videojs from 'video.js';\nimport getIpfsUrl from '../../../../helpers/getIpfsUrl';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flex: 1,\n    '& > .video-js': {\n      height: '100%',\n      width: '100%'\n    }\n  }\n});\n\nconst RenderPlayer = ({\n  classes,\n  videoSrc,\n  videoExtension\n}) => {\n  const videoRef = useRef(null);\n  const playerRef = useRef(null);\n  useEffect(() => {\n    playerRef.current = videojs(videoRef.current, {\n      controls: true,\n      autoplay: false,\n      preload: 'auto'\n    });\n    const player = playerRef.current;\n    player.on('ready', () => {\n      console.log('player is ready');\n    });\n    return () => {\n      if (playerRef.current) {\n        playerRef.current.dispose();\n      }\n    };\n  }, []);\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 3\n    }\n  }, __jsx(\"video\", {\n    ref: videoRef,\n    className: 'video-js vjs-oip vjs-big-play-centered',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(\"source\", {\n    src: videoSrc,\n    type: `video/${videoExtension}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  })));\n};\n\nconst stripFileExtension = filename => {\n  let split = filename.split('.');\n  return split[split.length - 1];\n};\n\nconst MAINNET_VIDEO_TEMPLATE = 'tmpl_4769368E';\nconst TESTNET_VIDEO_TEMPLATE = 'tmpl_5679C4E4';\n\nconst VideoViewer = ({\n  classes,\n  recordPayload,\n  src\n}) => {\n  const {\n    record\n  } = recordPayload;\n  const {\n    details\n  } = record;\n  let template;\n  let addressDirectory,\n      filename,\n      thumbnail = '';\n  let videoExtension, thumbnailSrc, videoSrc;\n\n  if (details[MAINNET_VIDEO_TEMPLATE]) {\n    template = details[MAINNET_VIDEO_TEMPLATE];\n  } else {\n    template = details[TESTNET_VIDEO_TEMPLATE];\n  }\n\n  if (template) {\n    addressDirectory = template.addressDirectory;\n    filename = template.filename;\n    thumbnail = template.thumbnailFilename;\n  } else {\n    for (const obj in details) {\n      Object.keys(details[obj]).map(key => {\n        if (key === 'addressDirectory') {\n          addressDirectory = details[obj][key];\n        }\n\n        if (key === 'filename') {\n          filename = details[obj][key];\n        }\n\n        if (key === 'thumbnailFilename') {\n          thumbnail = details[obj][key];\n        }\n      });\n    }\n  }\n\n  if (thumbnail) {\n    thumbnailSrc = getIpfsUrl({\n      dirName: addressDirectory,\n      filename: thumbnail\n    });\n  }\n\n  if (filename) {\n    videoExtension = stripFileExtension(filename);\n  } else videoExtension = stripFileExtension(src); // init video js\n  // const videoRef = useRef(null);\n  // const playerRef = useRef(null);\n\n\n  if (src) {\n    videoSrc = getIpfsUrl({\n      dirName: src\n    });\n  } else {\n    videoSrc = getIpfsUrl({\n      dirName: addressDirectory,\n      filename\n    });\n  }\n\n  if (src && videoSrc) {\n    return __jsx(RenderPlayer, {\n      classes: classes,\n      videoSrc: videoSrc,\n      videoExtension: videoExtension,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 12\n      }\n    });\n  } else return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, __jsx(\"img\", {\n    src: thumbnailSrc,\n    style: {\n      width: \"100%\",\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }));\n};\n\nVideoViewer.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(VideoViewer);","map":{"version":3,"sources":["/Users/martinadams/Desktop/FLO-OIP projects/DDX/oip-ddx-light/frontend/components/views/dumb/videoViewer/VideoViewer.js"],"names":["React","useRef","useEffect","withStyles","PropTypes","videojs","getIpfsUrl","styles","theme","root","display","flex","height","width","RenderPlayer","classes","videoSrc","videoExtension","videoRef","playerRef","current","controls","autoplay","preload","player","on","console","log","dispose","stripFileExtension","filename","split","length","MAINNET_VIDEO_TEMPLATE","TESTNET_VIDEO_TEMPLATE","VideoViewer","recordPayload","src","record","details","template","addressDirectory","thumbnail","thumbnailSrc","thumbnailFilename","obj","Object","keys","map","key","dirName","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport withStyles from 'react-jss';\nimport PropTypes from 'prop-types';\nimport videojs from 'video.js';\nimport getIpfsUrl from '../../../../helpers/getIpfsUrl';\n\nconst styles = (theme) => ({\n  root: {\n    display: 'flex',\n    flex: 1,\n    '& > .video-js': {\n      height: '100%',\n      width: '100%'\n    }\n  }\n});\n\nconst RenderPlayer = ({classes, videoSrc, videoExtension}) => {\n\n  const videoRef = useRef(null);\n  const playerRef = useRef(null);\n\n\n  useEffect(() => {\n    playerRef.current = videojs(videoRef.current, {\n      controls: true,\n      autoplay: false,\n      preload: 'auto'\n    });\n    const player = playerRef.current;\n\n    player.on('ready', () => {\n      console.log('player is ready');\n    });\n\n    return () => {\n      if (playerRef.current) {\n        playerRef.current.dispose();\n      }\n    };\n  }, []);\n  \n\n  return (\n  <div className={classes.root}>\n    <video\n      ref={videoRef}\n      className={'video-js vjs-oip vjs-big-play-centered'}\n    >\n      <source src={videoSrc} type={`video/${videoExtension}`} />\n    </video>\n  </div>\n);\n}\n\nconst stripFileExtension = (filename) => {\n  let split = filename.split('.');\n  return split[split.length - 1];\n};\n\nconst MAINNET_VIDEO_TEMPLATE = 'tmpl_4769368E';\nconst TESTNET_VIDEO_TEMPLATE = 'tmpl_5679C4E4';\n\nconst VideoViewer = ({ classes, recordPayload, src }) => {\n  const { record } = recordPayload;\n  const { details } = record;\n\n\n\n  let template;\n  let addressDirectory, filename, thumbnail  = '';\n  let videoExtension, thumbnailSrc, videoSrc\n\n\n  if (details[MAINNET_VIDEO_TEMPLATE]) {\n    template = details[MAINNET_VIDEO_TEMPLATE];\n  } else {\n    template = details[TESTNET_VIDEO_TEMPLATE];\n  }\n\n\n\n  if(template){\n    addressDirectory = template.addressDirectory\n    filename = template.filename\n    thumbnail = template.thumbnailFilename;\n\n  } else {\n    for (const obj in details){\n      Object.keys(details[obj]).map(key => {\n\n\n        if(key === 'addressDirectory'){\n          addressDirectory = details[obj][key]\n        }\n        if(key === 'filename'){\n          filename = details[obj][key]\n        }\n        if(key === 'thumbnailFilename'){\n          thumbnail = details[obj][key]\n        }\n      })\n    }\n  }\n  \n  if(thumbnail) {\n    thumbnailSrc = getIpfsUrl({dirName: addressDirectory, filename: thumbnail})\n  }\n\n\n\n  if(filename){\n    videoExtension = stripFileExtension(filename);\n  } else videoExtension = stripFileExtension(src);\n\n\n  // init video js\n  // const videoRef = useRef(null);\n  // const playerRef = useRef(null);\n  \n  if(src){\n    videoSrc = getIpfsUrl({ dirName: src })\n  } else {\n    videoSrc = getIpfsUrl({ dirName: addressDirectory, filename });\n  }\n\n\n  if(src && videoSrc){\n    return <RenderPlayer classes={classes} videoSrc={videoSrc} videoExtension={videoExtension} />\n  } else return (\n    <div className={classes.root}>\n      <img src={thumbnailSrc} style={{width: \"100%\", height: '100%'}}/>\n    </div>\n  )\n\n};\n\nVideoViewer.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(VideoViewer);\n\n"]},"metadata":{},"sourceType":"module"}