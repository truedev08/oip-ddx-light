"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactJss = _interopRequireDefault(require("react-jss"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// import styled from 'styled-jss'
// const _div = styled('div')({
//   width: (props) => props.w,
//   height: (props) => props.h,
//   backgroundColor: (props) => props.bgColor,
//   color: (props) => props.color,
//   border: (props) => props.border,
//   padding: (props) => props.padding,
//   borderRadius: (props) => props.br
// })
const TagsInput = ({
  classes,
  getTags,
  placeholder,
  allowSpaces = false,
  onBlur
}) => {
  const initialState = {
    tags: []
  };

  function removeTag({
    tags,
    index
  }) {
    if (!index && index !== 0) {
      const newArray = [...tags];
      newArray.pop();
      return newArray;
    } else {
      const newArray = [...tags];
      newArray.splice(index, 1);
      return newArray;
    }
  }

  function reducer(state, action) {
    switch (action.type) {
      case 'ADD':
        return {
          tags: [...state.tags, action.tag]
        };

      case 'REMOVE':
        return {
          tags: [...removeTag({
            tags: state.tags,
            index: action.index
          })]
        };

      default:
        throw new Error();
    }
  }

  const [state, dispatch] = (0, _react.useReducer)(reducer, initialState);
  const [inputValue, updateValue] = (0, _react.useState)('');
  (0, _react.useEffect)(() => {
    if (getTags) {
      getTags(state.tags);
    }
  }, [state.tags]);

  function handleChange(e) {
    const value = e.target.value;

    if (!allowSpaces) {
      if (value[value.length - 1] === ' ') {
        return false;
      }
    }

    if (value[value.length - 1] !== ',') {
      updateValue(e.target.value);
    }
  }

  function handleKeyUp(e) {
    if (/(188|13)/.test(e.which)) {
      // test for comma or enter
      // add tag
      if (inputValue !== '') {
        if (state.tags.includes(inputValue)) {
          alert('Tag already exists');
        } else {
          dispatch({
            type: 'ADD',
            tag: inputValue
          });
        }
      } // clear field


      updateValue('');
    } else if (/(8)/.test(e.which)) {
      if (inputValue === '' && state.tags.length > 0) {
        dispatch({
          type: 'REMOVE'
        });
      }
    }
  }

  const handleRemoveTag = index => {
    dispatch({
      type: 'REMOVE',
      index
    });
  };

  const placeHolderText = state.tags.length === 0 && inputValue === '' ? placeholder || 'e.g. (tag swag mag)' : null;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.tagsInputRoot
  }, /*#__PURE__*/_react.default.createElement("div", {
    id: "tags"
  }, state.tags.map((tag, i) => {
    return /*#__PURE__*/_react.default.createElement("span", {
      className: classes.tagContainer,
      key: i
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: classes.tagName
    }, tag), /*#__PURE__*/_react.default.createElement("span", {
      onClick: () => handleRemoveTag(i),
      className: classes.tagRemove
    }, "x"));
  })), /*#__PURE__*/_react.default.createElement("div", {
    id: "input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    className: classes.input,
    type: "text",
    onKeyUp: handleKeyUp,
    value: inputValue,
    onChange: handleChange,
    placeholder: placeHolderText,
    onBlur: onBlur || null
  })));
};

const styles = {
  tagsInputRoot: {
    flexWrap: 'wrap',
    width: 'auto',
    overflow: 'scroll',
    padding: 4,
    border: '1px solid grey',
    borderRadius: '3px',
    '& #tags': {
      display: 'flex',
      flexWrap: 'wrap',
      '& > span': {
        padding: 4
      }
    },
    font: '400 13.3333px Arial',
    '&:focus-within': {
      borderColor: '#66bfff',
      boxShadow: '0 0 0 4px rgba(0, 149, 255, 0.15)',
      outline: 0,
      position: 'relative'
    },
    alignItems: 'center',
    justifyContent: 'flex-start',
    cursor: 'text',
    whiteSpace: 'nowrap'
  },
  tagContainer: {
    backgroundColor: 'rgba(0, 149, 255, 0.15)',
    borderRadius: 3,
    margin: [0, 3]
  },
  tagName: {},
  tagRemove: {
    paddingLeft: 3,
    fontWeight: 'bold',
    cursor: 'pointer'
  },
  input: {
    width: '98%',
    outline: 'none',
    padding: '4px'
  }
};

var _default = (0, _reactJss.default)(styles)(TagsInput);

exports.default = _default;