"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _moment = _interopRequireDefault(require("moment"));

var _capDecimals = _interopRequireDefault(require("../../util/capDecimals"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const styles = theme => ({
  root: {
    display: 'flex',
    flexDirection: 'column',
    flex: '10',
    overflowY: 'auto'
  },
  txContainer: {
    display: 'flex',
    flexDirection: 'row',
    flex: '0 0 30px',
    fontFamily: 'monospace',
    alignItems: 'center',
    margin: [16, 16],
    fontSize: '11px'
  },
  txBalance: {
    display: 'flex',
    justifyContent: 'center',
    flex: '2',
    margin: [0, 34]
  },
  timeAndTxid: {
    display: 'flex',
    flexDirection: 'column',
    flex: '9',
    justfiyContent: 'center',
    wordBreak: 'break-word'
  },
  blockTime: {
    display: 'flex',
    flex: '3',
    fontWeight: 'bold',
    marginBottom: 3
  },
  txLink: {
    display: 'flex',
    flex: '9',
    cursor: 'pointer',
    '&:hover': {
      color: 'blue'
    }
  }
});

const calculateAmount = (vin, vout, addresses) => {
  const usedPubAddresses = [];

  for (const addr of addresses) {
    usedPubAddresses.push(addr.getPublicAddress());
  }

  const vinData = [];

  for (const vi of vin) {
    vinData.push({
      address: vi.addr,
      valueSat: vi.valueSat
    });
  }

  const voutData = [];

  for (const vo of vout) {
    const value = vo.value * 1e8; // convert to satoshi

    const addresses = [];
    const addressesInVout = vo.scriptPubKey.addresses;

    for (const addr of addressesInVout) {
      addresses.push(addr);
    }

    voutData.push({
      value,
      addresses
    });
  }

  let moneySentFromMe = 0;

  for (const vind of vinData) {
    if (usedPubAddresses.includes(vind.address)) {
      moneySentFromMe += Number(vind.valueSat);
    }
  }

  let moneySentToMe = 0;

  for (const voutd of voutData) {
    for (const addr of voutd.addresses) {
      if (usedPubAddresses.includes(addr)) {
        moneySentToMe += Number(voutd.value);
      }
    }
  }

  let amount = moneySentToMe - moneySentFromMe;
  amount /= 1e8;
  const type = amount > 0 ? 'Received' : 'Sent';
  amount = (0, _capDecimals.default)(amount, 8);
  return {
    amount,
    type
  };
};

function sortTransactions(transactions) {
  return transactions.sort((a, b) => {
    return b.time - a.time;
  });
} // tx.floData


const Transactions = ({
  classes,
  transactions = [],
  explorerUrl,
  addresses
}) => {
  explorerUrl = explorerUrl.split('api')[0];
  transactions = sortTransactions(transactions);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root
  }, transactions.map((tx, i) => {
    const {
      amount
    } = calculateAmount(tx.vin, tx.vout, addresses);
    return /*#__PURE__*/_react.default.createElement("div", {
      key: i,
      className: classes.txContainer
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: classes.timeAndTxid
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: classes.blockTime
    }, _moment.default.unix(tx.time).format('MMM D, YYYY')), /*#__PURE__*/_react.default.createElement("span", {
      className: classes.txLink,
      onClick: () => window.open(`${explorerUrl}/tx/${tx.txid}`, '_blank')
    }, tx.txid)), /*#__PURE__*/_react.default.createElement("div", {
      style: {
        color: amount >= 0 ? 'green' : 'red'
      },
      className: classes.txBalance
    }, amount > 0 ? '+' : null, amount));
  }));
};

var _default = (0, _reactJss.default)(styles)(Transactions);

exports.default = _default;