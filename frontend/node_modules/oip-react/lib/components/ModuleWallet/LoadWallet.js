"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _bip = require("bip39");

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const styles = theme => ({
  root: {
    display: 'flex',
    flexDirection: 'column',
    flex: '11',
    justifyContent: 'center',
    alignItems: 'center',
    width: '100%',
    position: 'relative',
    backgroundColor: 'white',
    borderBottomLeftRadius: 'inherit',
    borderBottomRightRadius: 'inherit'
  },
  inputBase: {
    height: 33
  },
  inputMnemonic: {
    display: 'flex',
    border: 'none',
    width: '70%',
    borderBottom: `1px ${theme.palette.primary.main} solid`,
    textAlign: 'center',
    maxWidth: '722px'
  },
  contentContainer: {
    display: 'flex',
    flexDirection: 'column',
    width: '100%',
    alignItems: 'center',
    position: 'relative',
    top: '-15px'
  },
  buttonRow: {
    display: 'flex',
    flexDirection: 'row',
    flex: '0 1 30px',
    marginTop: '20px'
  },
  buttonBase: {
    minWidth: '82px',
    border: `1px solid ${theme.palette.primary.main}`,
    margin: [0, 5],
    backgroundColor: `${theme.palette.primary.main}`,
    borderRadius: '5px',
    color: 'white',
    fontWeight: 'bold',
    cursor: 'pointer',
    '&:disabled': {
      backgroundColor: '#A8A8A8',
      border: 'none',
      cursor: 'not-allowed'
    }
  },
  loadButton: {
    backgroundColor: `${theme.palette.primary.darken(0.7)}`
  }
});

const LoadWallet = ({
  classes,
  onMnemonicSubmit
}) => {
  const [mnemonicState, setMnemonic] = (0, _react.useState)('');
  const [isValidMnemonic, setMnemonicValidToBe] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    const isValid = (0, _bip.validateMnemonic)(mnemonicState);
    setMnemonicValidToBe(isValid);
  }, [mnemonicState]);

  function handleMnemonicChange(e) {
    setMnemonic(e.target.value);
  }

  function genMnemonic() {
    setMnemonic((0, _bip.generateMnemonic)());
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.contentContainer
  }, /*#__PURE__*/_react.default.createElement("h3", {
    style: {
      color: '#989898'
    }
  }, "enter your mnemonic or create a new wallet"), /*#__PURE__*/_react.default.createElement("input", {
    type: "text",
    value: mnemonicState,
    onChange: handleMnemonicChange,
    className: (0, _classnames.default)(classes.inputBase, classes.inputMnemonic),
    placeholder: "enter your twelve word mnemonic here ob la di ob la da"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.buttonRow
  }, /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _classnames.default)(classes.buttonBase, classes.generateButton),
    onClick: genMnemonic
  }, "New Wallet"), /*#__PURE__*/_react.default.createElement("button", {
    onClick: () => onMnemonicSubmit ? onMnemonicSubmit(mnemonicState) : null,
    disabled: !isValidMnemonic,
    className: (0, _classnames.default)(classes.buttonBase, classes.loadButton)
  }, "Load Wallet"))));
};

var _default = (0, _reactJss.default)(styles)(LoadWallet);

exports.default = _default;