"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _TagsInput = _interopRequireDefault(require("../../../UI/TagsInput"));

var _SelectOptions = _interopRequireDefault(require("../SelectOptions"));

var _shouldUpdate = _interopRequireDefault(require("../helpers/shouldUpdate"));

var _InputField = _interopRequireDefault(require("../InputField"));

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//  two selects; singular/repeated and types
const FieldRow = ({
  gfs,
  id,
  liftDescriptor,
  classes,
  validate
}) => {
  const isEnum = gfs.state.form[id].fieldType === 'enum';
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.descriptorFieldRowContainer
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.selectOptions
  }, /*#__PURE__*/_react.default.createElement(_SelectOptions.default, {
    opts: ['singular', 'repeated'],
    id: id,
    state: gfs.state.form[id],
    onChange: gfs.update,
    name: "fieldRule",
    shouldUpdate: _shouldUpdate.default,
    onBlur: liftDescriptor,
    classes: classes
  }), /*#__PURE__*/_react.default.createElement(_SelectOptions.default, {
    opts: _constants.protoFields,
    id: id,
    state: gfs.state.form[id],
    onChange: gfs.update,
    name: "fieldType",
    shouldUpdate: _shouldUpdate.default,
    onBlur: liftDescriptor,
    classes: classes
  })), /*#__PURE__*/_react.default.createElement(_InputField.default, {
    placeholder: "Field Name",
    id: id,
    state: gfs.state.form[id],
    onChange: gfs.update,
    name: "fieldName",
    shouldUpdate: _shouldUpdate.default,
    allowSpaces: false,
    onBlur: liftDescriptor,
    classes: classes,
    validate: validate
  }), isEnum ? /*#__PURE__*/_react.default.createElement(_TagsInput.default, {
    placeholder: "(i.e. type enum fields here)",
    onBlur: liftDescriptor,
    classes: classes,
    getTags: tags => {
      const e = {
        target: {
          name: 'enumValue',
          value: tags
        }
      };
      gfs.update(e, id);
    }
  }) : null, gfs.state.form[id].index > 0 && /*#__PURE__*/_react.default.createElement("button", {
    onClick: () => {
      gfs.remove(id), validate();
    },
    className: (0, _classnames.default)(classes.buttonBase, classes.removeRowButton)
  }, "-"));
};

var _default = FieldRow;
exports.default = _default;