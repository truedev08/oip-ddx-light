"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _classnames = _interopRequireDefault(require("classnames"));

var _oipProtobufjs = require("oip-protobufjs");

var _uid = _interopRequireDefault(require("uid"));

var _FieldRow = _interopRequireDefault(require("./FieldRow"));

var _hooks = require("../../../hooks");

var _styles = _interopRequireDefault(require("./styles"));

var _serializeFormData = _interopRequireDefault(require("./helpers/serializeFormData"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// gfs = GLOBAl FORM STATE - duh!
const DescriptorSetProto = ({
  classes,
  getDescriptor
}) => {
  const [passErrorMessage, setPassErrorMessage] = (0, _react.useState)('');
  const id = (0, _react.useRef)((0, _uid.default)()).current;
  const gfs = (0, _hooks.useGlobalFormState)(id, _constants.initialFormRow);
  const fieldnameArr = (0, _serializeFormData.default)(gfs.state.form).map(x => x.name).filter(el => el !== '');
  const filtered = fieldnameArr.filter((v, i, a) => a.indexOf(v) === i).filter(el => el !== '');

  const liftDescriptor = () => {
    if (getDescriptor) {
      let descriptor;

      try {
        descriptor = (0, _oipProtobufjs.buildDescriptor)((0, _serializeFormData.default)(gfs.state.form));
      } catch (err) {
        console.error(`${err}: liftDescriptor - DescriptorSetProto`);
      }

      getDescriptor(descriptor);
    }
  };

  function errorMessage(message) {
    setPassErrorMessage(message);
  }

  const arraysMatch = function (arr1, arr2) {
    if (arr1.length !== arr2.length) {
      return errorMessage('Enter unique field names');
    }

    return errorMessage(null);
  };

  function validate() {
    arraysMatch(fieldnameArr, filtered);
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.descriptorRoot
  }, /*#__PURE__*/_react.default.createElement(_FieldRow.default, {
    gfs: gfs,
    id: id,
    liftDescriptor: liftDescriptor,
    classes: classes,
    validate: validate
  }), Object.keys(gfs.state.form).map(formId => {
    if (formId !== id) {
      return /*#__PURE__*/_react.default.createElement(_FieldRow.default, {
        classes: classes,
        gfs: gfs,
        id: formId,
        key: formId,
        liftDescriptor: liftDescriptor,
        fieldnameArr: fieldnameArr,
        validate: validate
      });
    }
  }), /*#__PURE__*/_react.default.createElement("div", null, passErrorMessage), /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _classnames.default)(classes.buttonBase, classes.addRowButton),
    onClick: () => gfs.add((0, _uid.default)(), _constants.initialFormRow)
  }, "+"));
};

var _default = (0, _reactJss.default)(_styles.default)(DescriptorSetProto);

exports.default = _default;