"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _oipProtobufjs = require("oip-protobufjs");

var _jsOip = require("js-oip");

var _styles = _interopRequireDefault(require("./styles"));

var _RecordInterface = _interopRequireDefault(require("./RecordInterface"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// handle individual record proto state
const initialState = {};

function reducer(state, action) {
  if (action.type === 'UPDATE') {
    return { ...state,
      [action.field]: action.value
    };
  } else throw Error('Invalid type passed to reducer - RecordProto');
}

const RecordProto = ({
  classes,
  template,
  onSuccess,
  onError,
  mainnetExplorerUrl = 'https://livenet.flocha.in/api',
  testnetExplorerUrl = 'https://testnet.explorer.mediciland.com/api',
  oipdHttpApi = 'https://api.oip.io/oip',
  withPublisher = false,
  keyIndex,
  // internal use
  getOipDetails,
  // external use
  rootKey,
  // internal use
  __liftDetails // internal use,

}) => {
  // define top-level record proto
  const root = rootKey || 'ROOT'; // deserialize template data

  let {
    file_descriptor_set: descriptor,
    name: templateName,
    extends: _extends
  } = template;
  const memoizedDescriptor = (0, _react.useMemo)(() => (0, _oipProtobufjs.decodeDescriptor)(descriptor, true), [descriptor]);
  const {
    webFmt
  } = memoizedDescriptor; // handle extended templates

  const [extendedTemplates, setExtendedTemplates] = (0, _react.useState)({});
  const daemonRef = (0, _react.useRef)(null); // fetches extended templates

  (0, _react.useEffect)(() => {
    if (_extends) {
      if (!Array.isArray(_extends)) {
        _extends = [_extends];
      }

      const getDaemonApi = () => {
        if (daemonRef.current === null) {
          daemonRef.current = new _jsOip.DaemonApi(oipdHttpApi);
        }

        return daemonRef.current;
      };

      const searchTemplates = async templatesIds => {
        const daemonApi = getDaemonApi();

        for (const id of templatesIds) {
          if (!extendedTemplates[id]) {
            const searchQuery = `template.identifier:${id}`;
            let res;

            try {
              res = await daemonApi.searchOip5Templates({
                q: searchQuery
              });
            } catch (err) {
              throw Error(`Failed to search for templates matching identifier: ${id} \n ${err}`);
            }

            const {
              success,
              payload
            } = res;

            if (success) {
              const payloadResults = payload.results; // SHOULD ALWAYS BE AN ARRAY

              if (payloadResults[0]) {
                const {
                  template
                } = payloadResults[0];

                if (template) {
                  setExtendedTemplates(prevState => {
                    return { ...prevState,
                      [id]: template
                    };
                  });
                }
              }
            } else {
              console.error(`response success returns false when searching templates for identifier: ${id}`);
            }
          }
        }
      };

      searchTemplates(_extends);
    }
  }, [_extends]); // handles individual record proto state

  const [state, dispatch] = (0, _react.useReducer)(reducer, initialState); // handle state updating and lifting

  /**
   * @typedef detailsData
   * @example
   * {
   *   [root]: serializedState(state),
   *   [root1]: serializedState(state)
   * }
   */

  const [detailsData, setDetailsData] = (0, _react.useState)({}); // handle state updates, set it to total details data state (internal)

  (0, _react.useEffect)(() => {
    setDetailsData(prevState => {
      return { ...prevState,
        [root]: serializeState(state)
      };
    });
  }, [state]); // lift details up to parent

  (0, _react.useEffect)(() => {
    if (__liftDetails) {
      __liftDetails(detailsData);
    }

    if (getOipDetails) {
      const keys = Object.keys(detailsData);
      const details = [];

      for (const key of keys) {
        details.push(detailsData[key]);
      }

      getOipDetails(details); // array of detail Any payloads
    }
  }, [detailsData, __liftDetails, getOipDetails]); // ^^ handling build and lift state
  // serialize

  function prefixMessage(message) {
    return `p64:${message}`;
  }

  function serializeState(state) {
    return {
      name: templateName,
      descriptor: descriptor,
      payload: state
    };
  }

  const setChildState = (0, _react.useCallback)(detailsData => {
    setDetailsData(prevState => {
      return { ...prevState,
        ...detailsData
      };
    });
  }, []); // function passed to Publisher to build and create message (only useful if publisher is set to true)

  function getMessage({
    wif,
    network
  }) {
    // build record template
    const keys = Object.keys(detailsData);
    const anyPayloads = [];

    for (const key of keys) {
      anyPayloads.push(detailsData[key]);
    }

    let signedMessage;

    try {
      signedMessage = (0, _oipProtobufjs.recordProtoBuilder)({
        detailsData: anyPayloads,
        wif,
        network
      });
    } catch (err) {
      throw Error(`Failed to get message in RecordProto: \n ${err}`);
    }

    return prefixMessage(signedMessage.signedMessage64);
  }

  return /*#__PURE__*/_react.default.createElement(_RecordInterface.default, {
    classes: classes,
    webFmt: webFmt,
    dispatch: dispatch,
    onSuccess: onSuccess,
    onError: onError,
    getMessage: getMessage,
    mainnetExplorerUrl: mainnetExplorerUrl,
    testnetExplorerUrl: testnetExplorerUrl,
    withPublisher: withPublisher,
    keyIndex: keyIndex,
    extendedTemplates: extendedTemplates,
    oipdHttpApi: oipdHttpApi,
    root: root,
    setChildState: setChildState
  });
};

RecordProto.propTypes = {
  classes: _propTypes.default.object.isRequired,
  template: _propTypes.default.shape({
    file_descriptor_set: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired,
    extends: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
    description: _propTypes.default.string,
    identifier: _propTypes.default.number,
    friendly_name: _propTypes.default.string
  }),
  onSuccess: _propTypes.default.func,
  onError: _propTypes.default.func,
  withPublisher: _propTypes.default.bool,
  mainnetExplorerUrl: _propTypes.default.string,
  testnetExplorerUrl: _propTypes.default.string,
  getOipDetailsData: _propTypes.default.func,
  oipdHttpApi: _propTypes.default.string
};

var _default = (0, _reactJss.default)(_styles.default)(RecordProto);

exports.default = _default;