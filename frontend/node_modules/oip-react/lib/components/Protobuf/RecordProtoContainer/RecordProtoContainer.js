"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _index = require("../index");

var _Publisher = require("../../Publisher");

var _oipProtobufjs = require("oip-protobufjs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @typedef {Object} templateData
 * @param {string} templateData.file_descriptor_set
 * @param {string} templateData.name
 * @param {string|Array.<string>} [templateData.extends]
 */

/**
 *
 * @param {templateData|Array.<templateData>} recordData
 */
function RecordProtoContainer({
  classes,
  templates,
  onSuccess,
  onError,
  mainnetExplorerUrl,
  testnetExplorerUrl,
  oipdHttpApi = 'https://api.oip.io/oip',
  feedback
}) {
  if (!Array.isArray(templates)) {
    templates = [templates];
  }

  const initState = {}; // Reducers

  const [state, dispatch] = (0, _react.useReducer)(reducer, initState);

  function reducer(state, action) {
    if (action.type === 'UPDATE') {
      return { ...state,
        [action.data.name]: { ...action.data
        }
      };
    } else {
      throw Error('Invalid action type in recordProtoContainer');
    }
  }

  const storeDetailsData = (0, _react.useCallback)(detailsData => {
    if (detailsData.length === 0) return;

    for (const data of detailsData) {
      const payload = {
        type: 'UPDATE',
        data
      };
      dispatch(payload);
    }
  }, []);

  function prefixMessage(message) {
    return `p64:${message}`;
  }

  function getMessage({
    wif,
    network
  }) {
    const detailsData = [];

    for (const tmpl in state) {
      if (state.hasOwnProperty(tmpl)) {
        detailsData.push(state[tmpl]);
      }
    } // build record proto


    let recordData;

    try {
      recordData = (0, _oipProtobufjs.recordProtoBuilder)({
        wif,
        network,
        detailsData
      });
    } catch (err) {
      throw Error(`Failed to build record at getMessage in recordProtoContainer: \n ${err}`);
    }

    return prefixMessage(recordData.signedMessage64);
  } // Protobuf Decoder => Template. Creates a Template.


  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.rpcRoot
  }, templates.map((template, i) => {
    return /*#__PURE__*/_react.default.createElement(_index.RecordProto, {
      key: `${template.identifier}-${i}`,
      classes: classes,
      template: template,
      getOipDetails: storeDetailsData,
      oipdHttpApi: oipdHttpApi
    });
  }), /*#__PURE__*/_react.default.createElement(_Publisher.Publisher, {
    classes: classes,
    getMessage: getMessage,
    mainnetExplorerUrl: mainnetExplorerUrl,
    testnetExplorerUrl: testnetExplorerUrl,
    onSuccess: onSuccess,
    onError: onError,
    feedback: feedback
  }));
}

const styles = theme => ({
  rpcRoot: {}
});

RecordProtoContainer.propTypes = {
  classes: _propTypes.default.object.isRequired,
  templates: _propTypes.default.oneOfType([_propTypes.default.object.isRequired, _propTypes.default.arrayOf(_propTypes.default.object).isRequired]),
  onSuccess: _propTypes.default.func,
  onError: _propTypes.default.func,
  mainnetExplorerUrl: _propTypes.default.string,
  testnetExplorerUrl: _propTypes.default.string,
  oipdHttpApi: _propTypes.default.string
};

var _default = (0, _reactJss.default)(styles)(RecordProtoContainer);

exports.default = _default;