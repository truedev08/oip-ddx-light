"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _WalletButton = _interopRequireDefault(require("../WalletButton/WalletButton"));

var _Feedback = _interopRequireDefault(require("../../UI/feedback/Feedback"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Publisher = ({
  classes,
  getMessage,
  message,
  onSuccess,
  onError,
  mainnetExplorerUrl,
  testnetExplorerUrl,
  feedback,
  hidePrivateKeyInput,
  wif: userWif
}) => {
  const [wif, setWif] = (0, _react.useState)(userWif);
  const [network, setNetwork] = (0, _react.useState)('mainnet'); // mainnet or testnet

  (0, _react.useEffect)(() => {
    setWif(userWif);
  }, [userWif]);

  function handlePrivateKey(e) {
    setWif(e.target.value);
  }

  function handleNetworkChange(e) {
    setNetwork(e.target.value);
  }

  function _getMessage() {
    if (getMessage) {
      try {
        return getMessage({
          wif,
          network
        });
      } catch (err) {
        throw Error(`Failed to getMessage in Publisher.js: \n ${err}`);
      }
    }

    return undefined;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.publishContainer
  }, !hidePrivateKeyInput && /*#__PURE__*/_react.default.createElement("div", {
    className: classes.fieldContainer
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: classes.fieldTitle
  }, "Private key (wif)"), /*#__PURE__*/_react.default.createElement("input", {
    id: "wif",
    type: "text",
    onChange: handlePrivateKey,
    value: wif,
    className: classes.inputField,
    placeholder: "private key (wallet import format)"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.publishRow
  }, /*#__PURE__*/_react.default.createElement("select", {
    value: network,
    onChange: handleNetworkChange,
    className: classes.networkSelect
  }, /*#__PURE__*/_react.default.createElement("option", {
    value: "mainnet"
  }, "mainnet"), /*#__PURE__*/_react.default.createElement("option", {
    value: "testnet"
  }, "testnet")), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.walletButton
  }, /*#__PURE__*/_react.default.createElement(_WalletButton.default, {
    text: "Create & Publish",
    wif: wif // KEY
    ,
    network: network,
    message: message,
    getMessage: _getMessage,
    onSuccess: onSuccess,
    onError: onError,
    mainnetExplorerUrl: mainnetExplorerUrl,
    testnetExplorerUrl: testnetExplorerUrl
  }))), feedback && /*#__PURE__*/_react.default.createElement(_Feedback.default, {
    message: feedback
  }));
};

const fieldHeight = 25;
const fieldWidth = 250;
const marginTopForTitle = 5;

const styles = theme => ({
  publishContainer: {
    width: fieldWidth,
    marginBottom: '2rem'
  },
  fieldContainer: {
    position: 'relative'
  },
  fieldTitle: {
    fontSize: 10,
    color: `${theme.palette.greyscale(0.8)}`
  },
  publishRow: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center'
  },
  networkSelect: {
    height: fieldHeight,
    boxSizing: 'border-box',
    padding: 4,
    background: 'none',
    border: `1px solid ${theme.palette.greyscale(0.3)}`,
    borderRadius: 3,
    fontSize: 12,
    width: 123
  },
  walletButton: {
    '& > button': {
      padding: [4, 8]
    }
  },
  inputField: {
    width: fieldWidth,
    height: fieldHeight,
    boxSizing: 'border-box',
    padding: 4,
    marginTop: marginTopForTitle,
    marginBottom: 10,
    border: `1px solid ${theme.palette.greyscale(0.3)}`,
    borderRadius: 3,
    fontSize: 12,
    '&::placeholder': {
      fontSize: 10
    }
  }
});

Publisher.propTypes = {
  classes: _propTypes.default.object.isRequired,
  getMessage: _propTypes.default.func,
  onSuccess: _propTypes.default.func,
  onError: _propTypes.default.func,
  mainnetExplorerUrl: _propTypes.default.string,
  testnetExplorerUrl: _propTypes.default.string,
  message: _propTypes.default.string,
  // set this to true to hide the ability to input a private key
  hidePrivateKeyInput: _propTypes.default.bool,
  // pass in a wif (private key) to sign messages. if you are not hiding
  // the private key input, the user will have the ability to override
  // the passed in wif
  wif: _propTypes.default.string
};

var _default = (0, _reactJss.default)(styles)(Publisher);

exports.default = _default;