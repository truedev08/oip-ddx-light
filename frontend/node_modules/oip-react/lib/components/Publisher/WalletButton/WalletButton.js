"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _jsOip = require("js-oip");

var _reactJss = _interopRequireDefault(require("react-jss"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _util = require("../../../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const styles = theme => ({
  walletButtonRoot: {
    backgroundColor: 'transparent',
    color: theme.palette.primary.main,
    padding: [7, 12],
    border: `1px solid ${theme.palette.primary.main}`,
    borderRadius: '3px',
    '&:hover': {
      backgroundColor: theme.palette.primary.main,
      color: 'white',
      cursor: 'pointer',
      fontWeight: 'bold'
    },
    '&:disabled': {
      color: 'grey',
      borderColor: 'grey',
      backgroundColor: 'white',
      fontWeight: '400',
      cursor: 'default'
    }
  }
});

const WalletButton = ({
  classes,
  text = 'Submit',
  wif = '',
  network = 'mainnet',
  message,
  onSuccess,
  onError,
  getMessage,
  // function
  mainnetExplorerUrl = 'https://livenet.flocha.in/api',
  testnetExplorerUrl = 'https://testnet.explorer.mediciland.com/api'
}) => {
  const [disable, toggleDisable] = (0, _react.useState)(true);
  (0, _react.useEffect)(() => {
    toggleDisable(!(0, _util.isValidWIF)(wif, network));
  }, [wif, network]);

  async function handleClick(e) {
    e.preventDefault();
    const originalMessage = message;

    if (getMessage) {
      try {
        message = getMessage();
      } catch (err) {
        if (onError) {
          return onError(err);
        } else {
          throw Error(`Failed to get getMessage in wallet button component \n ${err}`);
        }
      }

      if (!message) {
        // if message is undefined, then set to the original message
        message = originalMessage;
      }
    }

    if (!message || message === '') {
      if (onError) {
        return onError('must pass a message prop of type string to WalletButton');
      } else {
        throw Error('must pass a message prop of type string to WalletButton \n');
      }
    }

    const explorerUrl = network === 'mainnet' ? mainnetExplorerUrl : testnetExplorerUrl;
    const oip = new _jsOip.OIP(wif, network, {
      explorerUrl
    });
    const wallet = oip.wallet;
    let res;

    if (message.length > 1040) {
      try {
        res = await oip.publishMultiparts(message);
      } catch (err) {
        if (onError) onError(err);
      }
    } else {
      try {
        res = await wallet.sendDataToChain(message);
      } catch (err) {
        if (onError) onError(err);
      }
    }

    if (onSuccess) onSuccess(res);
  }

  return /*#__PURE__*/_react.default.createElement("button", {
    disabled: disable,
    className: classes.walletButtonRoot,
    onClick: handleClick
  }, text);
};

WalletButton.propTypes = {
  classes: _propTypes.default.object.isRequired,
  text: _propTypes.default.string,
  wif: _propTypes.default.string,
  network: _propTypes.default.string,
  message: _propTypes.default.string,
  onSuccess: _propTypes.default.func,
  onError: _propTypes.default.func,
  getMessage: _propTypes.default.func,
  mainnetExplorerUrl: _propTypes.default.string,
  testnetExplorerUrl: _propTypes.default.string
};

var _default = (0, _reactJss.default)(styles)(WalletButton);

exports.default = _default;