"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _moment = _interopRequireDefault(require("moment"));

var _uid = _interopRequireDefault(require("uid"));

var _classnames = _interopRequireDefault(require("classnames"));

var _querybuilder = _interopRequireDefault(require("./dependencies/querybuilder"));

var _elasticmapparser = _interopRequireDefault(require("./dependencies/elasticmapparser"));

var _dcsHooks = require("./dependencies/dcsHooks");

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const stringFields = ['contains', 'is (exact)', 'is (not)', 'exists', 'nonexistent'];
const numFields = ['is (exact)', 'is (not)', 'above', 'below', 'between', 'exists', 'nonexistent'];
const dateFields = ['is (on)', 'is (not on)', 'after', 'before', 'between', 'exists', 'nonexistent'];
const booleanFields = ['is', 'exists', 'nonexistent']; // the root search component

const DynamicComplexSearch = ({
  mapping,
  onSubmit,
  classes
}) => {
  if (!onSubmit) {
    throw new Error('Must pass in an onSubmit callback function');
  }

  return /*#__PURE__*/_react.default.createElement(FormContainer, {
    mapping: mapping,
    onSubmit: onSubmit,
    classes: classes
  });
};

const FormContainer = ({
  mapping,
  onSubmit,
  classes
}) => {
  const rootId = (0, _react.useRef)((0, _uid.default)()).current; // set a unique id for the initial simple search form (to distinguish it from incoming complex search forms)

  const [state, add, handleRemove, handleUpdate] = (0, _dcsHooks.useComplexFilter)(rootId); // todo: remove when using real component for param input

  mapping = (0, _elasticmapparser.default)({
    index: 'mainnet-oip042_artifact'
  }); // console.log(mapping)

  const splitField = field => {
    const split = field.split('.');
    return split[split.length - 1];
  };

  const getFieldOptions = (field = '') => {
    if (field === '*') {
      return ['contains'];
    }

    const fieldType = splitField(field) === 'date' ? 'date' : mapping[splitField(field)].type;

    switch (fieldType) {
      case 'date':
        return dateFields;

      case 'string':
        return stringFields;

      case 'number':
        return numFields;

      case 'boolean':
        return booleanFields;

      default:
        return ['contains'];
    }
  };

  const getFieldType = field => {
    if (field === '*') {
      return 'string';
    }

    field = splitField(field);
    return field === 'date' ? 'date' : mapping[field].type;
  };

  return /*#__PURE__*/_react.default.createElement(FormWrapper, {
    mapping: mapping,
    getFieldOptions: getFieldOptions,
    getFieldType: getFieldType,
    handleUpdate: handleUpdate,
    handleRemove: handleRemove,
    add: add,
    state: state,
    rootId: rootId,
    onSubmit: onSubmit,
    classes: classes
  });
};

const FormWrapper = (0, _reactJss.default)(_styles.default)(({
  mapping,
  getFieldOptions,
  getFieldType,
  handleUpdate,
  handleRemove,
  add,
  state,
  rootId,
  classes,
  onSubmit
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/_react.default.createElement("form", {
    className: classes.formRow
  }, /*#__PURE__*/_react.default.createElement(FormBase, {
    mapping: mapping,
    getFieldOptions: getFieldOptions,
    getFieldType: getFieldType,
    handleUpdate: handleUpdate,
    id: rootId,
    state: state,
    classes: classes
  })), Object.keys(state.forms).filter(uid => uid !== rootId).map(uid => {
    return /*#__PURE__*/_react.default.createElement("form", {
      key: uid,
      className: classes.formRow
    }, /*#__PURE__*/_react.default.createElement(ComplexBase, {
      id: uid,
      state: state,
      mapping: mapping,
      handleUpdate: handleUpdate,
      handleRemove: handleRemove,
      getFieldOptions: getFieldOptions,
      getFieldType: getFieldType,
      classes: classes
    }));
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.buttonRow
  }, /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _classnames.default)(classes.buttonBase, classes.fnButtons, classes.addButton),
    onClick: () => add((0, _uid.default)())
  }, "Add Row"), /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _classnames.default)(classes.buttonBase, classes.fnButtons, classes.submitButton),
    onClick: e => {
      e.preventDefault();
      onSubmit((0, _querybuilder.default)(state));
    }
  }, "Submit")));
});

const FormBase = ({
  id,
  state,
  mapping,
  handleUpdate,
  getFieldOptions,
  getFieldType,
  classes
}) => {
  const formState = state.forms[id];
  const field = formState.field;
  const option = formState.option;
  const optionRef = (0, _react.useRef)(null); // when the field updates, make sure the option gets updated too

  (0, _react.useEffect)(() => {
    const name = optionRef.current.name;
    const value = optionRef.current.value;
    handleUpdate({
      target: {
        name,
        value
      }
    }, id); // simulate e.target.[] event
  }, [field]);
  const shouldRenderQueryInput = !(option === 'exists' || option === 'nonexistent');
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("select", {
    className: (0, _classnames.default)(classes.selectBase, classes.selectField),
    name: "field",
    onChange: e => handleUpdate(e, id)
  }, /*#__PURE__*/_react.default.createElement("option", {
    value: "*"
  }, "All Fields"), Object.keys(mapping).map((k, i) => {
    return /*#__PURE__*/_react.default.createElement("option", {
      value: mapping[k].path,
      key: i
    }, k);
  })), /*#__PURE__*/_react.default.createElement("select", {
    className: (0, _classnames.default)(classes.selectBase, classes.selectOption),
    ref: optionRef,
    name: "option",
    onChange: e => handleUpdate(e, id)
  }, getFieldOptions(field).map((opt, i) => {
    return /*#__PURE__*/_react.default.createElement("option", {
      value: opt,
      key: i
    }, opt);
  })), shouldRenderQueryInput ? /*#__PURE__*/_react.default.createElement(FormQueryInput, {
    handleUpdate: handleUpdate,
    id: id,
    option: option,
    getFieldType: getFieldType,
    field: field,
    formState: formState,
    classes: classes
  }) : null);
};

const ComplexBase = ({
  id,
  state,
  mapping,
  handleUpdate,
  handleRemove,
  getFieldOptions,
  getFieldType,
  classes
}) => {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("select", {
    className: (0, _classnames.default)(classes.selectBase, classes.selectOp),
    name: "operator",
    onChange: e => handleUpdate(e, id)
  }, /*#__PURE__*/_react.default.createElement("option", {
    value: "AND"
  }, " AND"), /*#__PURE__*/_react.default.createElement("option", {
    value: "OR"
  }, " OR"), /*#__PURE__*/_react.default.createElement("option", {
    value: "NOT"
  }, " NOT")), /*#__PURE__*/_react.default.createElement(FormBase, {
    id: id,
    state: state,
    mapping: mapping,
    handleUpdate: handleUpdate,
    getFieldOptions: getFieldOptions,
    getFieldType: getFieldType,
    classes: classes
  }), /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _classnames.default)(classes.buttonBase, classes.removeButton),
    onClick: e => {
      e.preventDefault();
      handleRemove(id);
    }
  }, "(delete)"));
};

const FormQueryInput = ({
  handleUpdate,
  id,
  option,
  getFieldType,
  field,
  classes
}) => {
  const booleanRef = (0, _react.useRef)(null);
  const textNumRef = (0, _react.useRef)(null);
  const textNumBetweenRef = (0, _react.useRef)(null);
  let fieldType = getFieldType(field);

  if (fieldType === 'string') {
    fieldType = 'text';
  }

  const forceUpdate = ref => {
    const name = ref.current.name;
    const value = ref.current.value;
    handleUpdate({
      target: {
        name,
        value
      }
    }, id); // simulate e.target.[] event
  }; // when the field changes, update option field


  (0, _react.useEffect)(() => {
    if (fieldType === 'boolean') {
      forceUpdate(booleanRef);
    }

    if ((fieldType === 'text' || fieldType === 'number') && field !== 'date') {
      if (textNumRef) {
        forceUpdate(textNumRef);

        if (textNumBetweenRef.current) {
          forceUpdate(textNumBetweenRef);
        }
      }
    }
  }, [field]);

  const input = type => {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes.queryContainer
    }, /*#__PURE__*/_react.default.createElement("input", {
      className: (0, _classnames.default)(classes.selectBase, classes.inputQuery),
      ref: textNumRef,
      name: "query",
      type: type,
      onChange: e => handleUpdate(e, id)
    }), option === 'between' ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
      className: classes.andSpan
    }, "and"), /*#__PURE__*/_react.default.createElement("input", {
      className: (0, _classnames.default)(classes.selectBase, classes.inputQuery),
      ref: textNumBetweenRef,
      name: "maxQuery",
      type: type,
      onChange: e => handleUpdate(e, id)
    })) : null);
  };

  const dtp = name => /*#__PURE__*/_react.default.createElement(DateTimePicker, {
    handleUpdate: handleUpdate,
    name: name,
    id: id,
    option: option,
    classes: classes
  });

  const renderDateTimePicker = () => /*#__PURE__*/_react.default.createElement("div", {
    className: classes.queryContainer
  }, dtp('query'), option === 'between' ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
    className: classes.andSpan
  }, "and"), dtp('maxQuery'), " ") : null); // text, number, boolean, or date


  const renderFormInput = fieldType => {
    switch (fieldType) {
      case 'text':
      case 'number':
        return input(fieldType);

      case 'boolean':
        return /*#__PURE__*/_react.default.createElement("select", {
          className: (0, _classnames.default)(classes.selectBase, classes.selectOption),
          ref: booleanRef,
          name: "query",
          onChange: e => handleUpdate(e, id)
        }, /*#__PURE__*/_react.default.createElement("option", {
          value: true
        }, "True"), /*#__PURE__*/_react.default.createElement("option", {
          value: false
        }, "False"));

      case 'date':
        return renderDateTimePicker();

      default:
        return input(fieldType);
    }
  };

  return renderFormInput(fieldType);
};

const DateTimePicker = ({
  name,
  id,
  handleUpdate,
  option,
  classes
}) => {
  _moment.default.locale('en');

  const pickingOnDate = option === 'is (on)' || option === 'is (not on)';
  const [displayTimePicker, toggleTimePicker] = (0, _react.useState)(false); // don't display time picker when picking 'on' dates (see react docs for why we useLayoutEffect here. Or use[Effect])

  (0, _react.useLayoutEffect)(() => {
    const shouldDisplayTimePicker = !pickingOnDate;
    toggleTimePicker(shouldDisplayTimePicker);
  }, [option]);
  const {
    month,
    day,
    year,
    // state
    setMonth,
    setDay,
    setYear,
    // setstate
    hour,
    minute,
    second,
    // state
    setHour,
    setMinute,
    setSecond,
    // setstate
    days,
    years,
    // html maps
    hours,
    minutes,
    seconds,
    // html maps
    dateObject
  } = (0, _dcsHooks.useDateTimePicker)();

  function getUnixTimestamp() {
    return _moment.default.utc(`${year}-${month}-${day} ${hour}:${minute}:${second}`).unix();
  } // this takes the local state found in useDateTimePicker and updates the global reducer form state


  (0, _react.useEffect)(() => {
    const value = getUnixTimestamp();

    if (pickingOnDate) {
      const unixDay = 86400 - 1; // minus one to get 12:00am to 11:59pm

      handleUpdate({
        target: {
          name,
          value
        }
      }, id);
      handleUpdate({
        target: {
          name: 'maxQuery',
          value: value + unixDay
        }
      }, id);
    } else {
      handleUpdate({
        target: {
          name,
          value
        }
      }, id);
    }
  }, [month, day, year, hour, minute, second]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.dateTimePicker
  }, /*#__PURE__*/_react.default.createElement(DatePicker, {
    setMonth: setMonth,
    dateObject: dateObject,
    setDay: setDay,
    days: days,
    setYear: setYear,
    years: years,
    classes: classes
  }), displayTimePicker ? /*#__PURE__*/_react.default.createElement(TimePicker, {
    setHour: setHour,
    hours: hours,
    setMinute: setMinute,
    minutes: minutes,
    setSecond: setSecond,
    seconds: seconds,
    classes: classes
  }) : null);
};

const DatePicker = ({
  setMonth,
  dateObject,
  setDay,
  days,
  setYear,
  years,
  classes
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.datePicker
  }, /*#__PURE__*/_react.default.createElement("select", {
    className: (0, _classnames.default)(classes.selectBase, classes.selectField),
    onChange: e => {
      setMonth(e.target.value);
    },
    name: "months"
  }, Object.keys(dateObject).map((m, i) => {
    return /*#__PURE__*/_react.default.createElement("option", {
      key: i,
      value: dateObject[m].mm
    }, m);
  })), /*#__PURE__*/_react.default.createElement("select", {
    className: (0, _classnames.default)(classes.selectBase, classes.selectField),
    onChange: e => {
      setDay(e.target.value);
    },
    name: "days"
  }, days.map((d, i) => {
    return /*#__PURE__*/_react.default.createElement("option", {
      key: i,
      value: d
    }, d);
  })), /*#__PURE__*/_react.default.createElement("input", {
    className: (0, _classnames.default)(classes.inputBase, classes.inputDatalist),
    onChange: e => {
      setYear(e.target.value);
    },
    type: "number",
    list: "years"
  }), /*#__PURE__*/_react.default.createElement("datalist", {
    id: "years"
  }, years.map((y, i) => {
    return /*#__PURE__*/_react.default.createElement("option", {
      key: i,
      value: y
    }, y);
  })));
};

const TimePicker = ({
  setHour,
  hours,
  setMinute,
  minutes,
  setSecond,
  seconds,
  classes
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.timePicker
  }, /*#__PURE__*/_react.default.createElement("select", {
    className: (0, _classnames.default)(classes.selectBase, classes.selectField),
    onChange: e => {
      setHour(e.target.value);
    },
    name: "hours"
  }, hours.map((m, i) => {
    return /*#__PURE__*/_react.default.createElement("option", {
      key: i,
      value: m
    }, m, "hr");
  })), /*#__PURE__*/_react.default.createElement("select", {
    className: (0, _classnames.default)(classes.selectBase, classes.selectField),
    onChange: e => {
      setMinute(e.target.value);
    },
    name: "minutes"
  }, minutes.map((m, i) => {
    return /*#__PURE__*/_react.default.createElement("option", {
      key: i,
      value: m
    }, m, "m");
  })), /*#__PURE__*/_react.default.createElement("select", {
    className: (0, _classnames.default)(classes.selectBase, classes.selectField),
    onChange: e => {
      setSecond(e.target.value);
    },
    name: "seconds"
  }, seconds.map((m, i) => {
    return /*#__PURE__*/_react.default.createElement("option", {
      key: i,
      value: m
    }, m, "s");
  })));
};

var _default = DynamicComplexSearch;
exports.default = _default;