/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/light"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/light"));

})(this, function($protobuf) {
    "use strict";

    var $root = ($protobuf.roots["default"] || ($protobuf.roots["default"] = new $protobuf.Root()))
    .addJSON({
      oipProto: {
        options: {
          go_package: "oipProto"
        },
        nested: {
          HistorianDataPoint: {
            fields: {
              Version: {
                type: "int32",
                id: 1
              },
              PubKey: {
                type: "bytes",
                id: 2
              },
              MiningRigRentalsLast10: {
                type: "double",
                id: 3
              },
              MiningRigRentalsLast24Hr: {
                type: "double",
                id: 4
              },
              AutominerPoolHashrate: {
                type: "double",
                id: 5
              },
              FloNetHashRate: {
                type: "double",
                id: 6
              },
              FloMarketPriceBTC: {
                type: "double",
                id: 7
              },
              FloMarketPriceUSD: {
                type: "double",
                id: 8
              },
              LtcMarketPriceUSD: {
                type: "double",
                id: 9
              },
              NiceHashLast: {
                type: "double",
                id: 10
              },
              NiceHash24hr: {
                type: "double",
                id: 11
              }
            }
          },
          HistorianPayout: {
            fields: {
              Version: {
                type: "int32",
                id: 1
              }
            }
          },
          MultiPart: {
            fields: {
              currentPart: {
                type: "uint32",
                id: 1
              },
              countParts: {
                type: "uint32",
                id: 2
              },
              rawData: {
                type: "bytes",
                id: 3
              },
              reference: {
                type: "Txid",
                id: 4
              }
            }
          },
          Txid: {
            fields: {
              raw: {
                type: "bytes",
                id: 1
              }
            }
          },
          NormalizeRecordProto: {
            fields: {
              mainTemplate: {
                type: "uint64",
                id: 1
              },
              fields: {
                rule: "repeated",
                type: "NormalField",
                id: 2
              }
            }
          },
          NormalField: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              path: {
                rule: "repeated",
                type: "Field",
                id: 2
              }
            }
          },
          Field: {
            fields: {
              tag: {
                type: "int32",
                id: 1
              },
              type: {
                type: "Type",
                id: 2
              },
              template: {
                type: "uint64",
                id: 3
              }
            },
            nested: {
              Type: {
                values: {
                  TYPE_ERROR: 0,
                  TYPE_DOUBLE: 1,
                  TYPE_FLOAT: 2,
                  TYPE_INT64: 3,
                  TYPE_UINT64: 4,
                  TYPE_INT32: 5,
                  TYPE_FIXED64: 6,
                  TYPE_FIXED32: 7,
                  TYPE_BOOL: 8,
                  TYPE_STRING: 9,
                  TYPE_GROUP: 10,
                  TYPE_MESSAGE: 11,
                  TYPE_BYTES: 12,
                  TYPE_UINT32: 13,
                  TYPE_ENUM: 14,
                  TYPE_SFIXED32: 15,
                  TYPE_SFIXED64: 16,
                  TYPE_SINT32: 17,
                  TYPE_SINT64: 18
                }
              }
            }
          },
          OipFive: {
            fields: {
              recordTemplate: {
                type: "RecordTemplateProto",
                id: 1
              },
              record: {
                type: "RecordProto",
                id: 2
              },
              normalize: {
                type: "NormalizeRecordProto",
                id: 3
              },
              transfer: {
                type: "Transfer",
                id: 7
              },
              deactivate: {
                type: "Deactivate",
                id: 8
              },
              edit: {
                type: "Edit",
                id: 9
              }
            }
          },
          Transfer: {
            fields: {}
          },
          Deactivate: {
            fields: {}
          },
          Edit: {
            fields: {}
          },
          RecordProto: {
            fields: {
              tags: {
                rule: "repeated",
                type: "string",
                id: 4
              },
              payment: {
                type: "Payment",
                id: 6
              },
              details: {
                type: "OipDetails",
                id: 7
              },
              permissions: {
                type: "Permissions",
                id: 8
              }
            }
          },
          Permissions: {
            fields: {}
          },
          Payment: {
            fields: {}
          },
          OipDetails: {
            fields: {
              details: {
                rule: "repeated",
                type: "google.protobuf.Any",
                id: 1
              }
            }
          },
          RecordTemplateProto: {
            fields: {
              friendlyName: {
                type: "string",
                id: 1
              },
              description: {
                type: "string",
                id: 2
              },
              DescriptorSetProto: {
                type: "bytes",
                id: 4
              },
              "extends": {
                rule: "repeated",
                type: "fixed32",
                id: 13
              },
              identifier: {
                type: "fixed32",
                id: 10
              }
            },
            reserved: [
              [
                12,
                12
              ]
            ]
          },
          PubKey: {
            fields: {
              network: {
                type: "NetworkTypes",
                id: 1
              },
              raw: {
                type: "bytes",
                id: 2
              }
            }
          },
          NetworkTypes: {
            values: {
              InvalidNetwork: 0,
              Flo: 1
            }
          },
          SignedMessage: {
            fields: {
              SerializedMessage: {
                type: "bytes",
                id: 1
              },
              MessageType: {
                type: "MessageTypes",
                id: 2
              },
              SignatureType: {
                type: "SignatureTypes",
                id: 3
              },
              PubKey: {
                type: "bytes",
                id: 4
              },
              Signature: {
                type: "bytes",
                id: 5
              }
            }
          },
          MessageTypes: {
            values: {
              InvalidMessage: 0,
              OIP05: 1,
              Historian: 2,
              Multipart: 3
            }
          },
          SignatureTypes: {
            values: {
              InvalidSignature: 0,
              Flo: 1,
              Btc: 2,
              Rvn: 3,
              Tx: 4
            }
          },
          templates: {
            options: {
              go_package: "github.com/oipwg/oip/proto/templates"
            },
            nested: {
              tmpl_0000F113: {
                fields: {
                  displayName: {
                    type: "string",
                    id: 1
                  },
                  filePath: {
                    type: "string",
                    id: 2
                  },
                  size: {
                    type: "uint64",
                    id: 3
                  },
                  contentType: {
                    type: "string",
                    id: 4
                  },
                  network: {
                    type: "Network",
                    id: 5
                  },
                  location: {
                    type: "string",
                    id: 6
                  }
                }
              },
              Network: {
                values: {
                  UNKNOWN_NETWORK: 0,
                  IPFS: 1,
                  WEB_TORRENT: 2,
                  HTTP: 3
                }
              },
              tmpl_000BA51C: {
                fields: {
                  title: {
                    type: "string",
                    id: 1
                  },
                  description: {
                    type: "string",
                    id: 2
                  },
                  year: {
                    type: "int64",
                    id: 3
                  }
                }
              }
            }
          }
        }
      },
      google: {
        nested: {
          protobuf: {
            nested: {
              Any: {
                fields: {
                  type_url: {
                    type: "string",
                    id: 1
                  },
                  value: {
                    type: "bytes",
                    id: 2
                  }
                }
              }
            }
          }
        }
      }
    });

    return $root;
});
