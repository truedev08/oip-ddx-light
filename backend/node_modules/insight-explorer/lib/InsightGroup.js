"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function () {
	function InsightGroup(url) {
		_classCallCheck(this, InsightGroup);

		this.url = url;
	}

	_createClass(InsightGroup, [{
		key: "getBlock",
		value: function getBlock(hash) {}
	}, {
		key: "getBlockIndex",
		value: function getBlockIndex(height) {}
	}, {
		key: "getRawBlock",
		value: function getRawBlock(hash) {}
	}, {
		key: "getBlockSummary",
		value: function getBlockSummary(limit, blockDate) {}
	}, {
		key: "getTransaction",
		value: function getTransaction(txid) {}
	}, {
		key: "getRawTransaction",
		value: function getRawTransaction(txid) {}
	}, {
		key: "getAddress",
		value: function getAddress(address) {}
	}, {
		key: "getAddressProperties",
		value: function getAddressProperties(address, property) {}
	}, {
		key: "getAddressUtxo",
		value: function getAddressUtxo(address) {}
	}, {
		key: "getAddressesUtxo",
		value: function getAddressesUtxo(addresses) {}
	}, {
		key: "getTransactionsForBlock",
		value: function getTransactionsForBlock(hash) {}
	}, {
		key: "getTransactionsForAddress",
		value: function getTransactionsForAddress(address) {}
	}, {
		key: "getTransactionsForAddresses",
		value: function getTransactionsForAddresses(addresses, options) {}
	}, {
		key: "broadcastRawTransaction",
		value: function broadcastRawTransaction(rawtx) {}
	}, {
		key: "getSync",
		value: function getSync() {}
	}, {
		key: "getPeer",
		value: function getPeer() {}
	}, {
		key: "getStatus",
		value: function getStatus(query) {}
	}, {
		key: "on",
		value: function on(event, callback) {}
	}, {
		key: "simpleGET",
		value: function simpleGET() {}
	}, {
		key: "simplePOST",
		value: function simplePOST() {}
	}]);

	return InsightGroup;
}();